<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/entities" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="#all">	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>	<xsl:character-map name="spaces">		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>	</xsl:character-map>	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>	<xsl:param name="SV_OutputFormat" select="'HTML'"/>	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>	</xsl:param>	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;AllEntitiesDetails&apos;" as="xs:string?"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:variable name="altova:CssImages" select="()"/>	<xsl:template match="/">		<xsl:call-template name="altova:Root"/>	</xsl:template>	<xsl:template name="altova:Root">		<html>			<head>				<title/>				<meta name="generator" content="Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)"/>				<meta http-equiv="X-UA-Compatible" content="IE=7"/>				<xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p1, '&quot;>'))" disable-output-escaping="yes"/>                <xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p2, '&quot;>'))" disable-output-escaping="yes"/>				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>				<xsl:comment>&lt;![endif]</xsl:comment>				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>			</head>			<body style="font-family:Tahoma; font-size:xx-small; ">				<xsl:for-each select="$XML">					<xsl:for-each select="n1:Entities">						<center>							<xsl:for-each select="n1:ReportCaption">								<span class="caption">									<xsl:apply-templates/>								</span>							</xsl:for-each>						</center>						<p/>						<br/>						<xsl:variable name="altova:table">							<table class="w_20">								<xsl:variable name="altova:CurrContextGrid_0" select="."/>								<xsl:variable name="altova:ColumnData"/>								<tbody>									<tr>										<td class="td_h_v w_4">											<span>												<xsl:text>Design Name</xsl:text>											</span>										</td>										<td class="td w_16">											<xsl:for-each select="n1:DesignName">												<xsl:apply-templates/>											</xsl:for-each>										</td>									</tr>									<tr>										<td class="td_h_v">											<span>												<xsl:text>Version Date</xsl:text>											</span>										</td>										<td class="td">											<xsl:for-each select="n1:VersionDate">												<xsl:apply-templates/>											</xsl:for-each>										</td>									</tr>									<tr>										<td class="td_h_v">											<span>												<xsl:text>Version Comment</xsl:text>											</span>										</td>										<td class="td">											<xsl:for-each select="n1:VersionComment">												<xsl:apply-templates/>											</xsl:for-each>										</td>									</tr>									<tr>										<td class="td_h_v">											<span>												<xsl:text>Model Name</xsl:text>											</span>										</td>										<td class="td">											<xsl:for-each select="n1:ModelName">												<xsl:apply-templates/>											</xsl:for-each>										</td>									</tr>								</tbody>							</table>						</xsl:variable>						<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>						<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>						<xsl:apply-templates select="$altova:table" mode="altova:generate-table">							<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>						</xsl:apply-templates>						<xsl:if test="count(n1:SubViewsCollection)">							<p/>							<span>								<xsl:text>SubViews</xsl:text>							</span>							<br/>							<xsl:variable name="altova:table">								<table class="w_25">									<xsl:variable name="altova:CurrContextGrid_1" select="."/>									<xsl:variable name="altova:ColumnData"/>									<thead>										<tr>											<th class="td_h_h w_4">												<span>													<xsl:text>SubView</xsl:text>												</span>											</th>											<th class="td_h_h w_7p5">												<span>													<xsl:text>Description</xsl:text>												</span>											</th>											<th class="td_h_h w_7p5">												<span>													<xsl:text>Notes</xsl:text>												</span>											</th>											<th class="td_h_h w_6">												<span>													<xsl:text>Object</xsl:text>												</span>											</th>										</tr>									</thead>									<tbody>										<xsl:for-each select="n1:SubViewsCollection">											<xsl:for-each select="n1:SubViewsDetails">												<xsl:variable name="v_SWDiagramLink" select="n1:SWDiagramLink"/>												<tr>													<td class="td_h_v">														<xsl:choose>															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																<xsl:choose>																	<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																		<xsl:for-each select="n1:SWName">																			<a>																				<xsl:choose>																					<xsl:when test="not(string(.))">																						<xsl:attribute name="href">																							<xsl:text>#</xsl:text>																						</xsl:attribute>																					</xsl:when>																					<xsl:when test="substring(string(.), 1, 1) = '#'">																						<xsl:attribute name="href">																							<xsl:value-of select="."/>																						</xsl:attribute>																					</xsl:when>																					<xsl:otherwise>																						<xsl:attribute name="href">																							<xsl:if test="substring(string(.), 2, 1) = ':'">																								<xsl:text>file:///</xsl:text>																							</xsl:if>																							<xsl:value-of select="translate(string(.), '&#x5c;', '/')"/>																						</xsl:attribute>																					</xsl:otherwise>																				</xsl:choose>																				<span>																					<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																				</span>																			</a>																		</xsl:for-each>																	</xsl:when>																	<xsl:otherwise>																		<xsl:for-each select="n1:SWName">																			<a>																				<xsl:choose>																					<xsl:when test="not(string(concat(&apos;#&apos;,../n1:SWDiagramLink)))">																						<xsl:attribute name="href">																							<xsl:text>#</xsl:text>																						</xsl:attribute>																					</xsl:when>																					<xsl:when test="substring(string(concat(&apos;#&apos;,../n1:SWDiagramLink)), 1, 1) = '#'">																						<xsl:attribute name="href">																							<xsl:value-of select="concat(&apos;#&apos;,../n1:SWDiagramLink)"/>																						</xsl:attribute>																					</xsl:when>																					<xsl:otherwise>																						<xsl:attribute name="href">																							<xsl:if test="substring(string(concat(&apos;#&apos;,../n1:SWDiagramLink)), 2, 1) = ':'">																								<xsl:text>file:///</xsl:text>																							</xsl:if>																							<xsl:value-of select="translate(string(concat(&apos;#&apos;,../n1:SWDiagramLink)), '&#x5c;', '/')"/>																						</xsl:attribute>																					</xsl:otherwise>																				</xsl:choose>																				<xsl:apply-templates/>																			</a>																			<br/>																		</xsl:for-each>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																<xsl:choose>																	<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																		<xsl:for-each select="n1:SWName">																			<a>																				<xsl:choose>																					<xsl:when test="not(string(../n1:SWDiagramLink))">																						<xsl:attribute name="href">																							<xsl:text>#</xsl:text>																						</xsl:attribute>																					</xsl:when>																					<xsl:when test="substring(string(../n1:SWDiagramLink), 1, 1) = '#'">																						<xsl:attribute name="href">																							<xsl:value-of select="../n1:SWDiagramLink"/>																						</xsl:attribute>																					</xsl:when>																					<xsl:otherwise>																						<xsl:attribute name="href">																							<xsl:if test="substring(string(../n1:SWDiagramLink), 2, 1) = ':'">																								<xsl:text>file:///</xsl:text>																							</xsl:if>																							<xsl:value-of select="translate(string(../n1:SWDiagramLink), '&#x5c;', '/')"/>																						</xsl:attribute>																					</xsl:otherwise>																				</xsl:choose>																				<span>																					<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																				</span>																			</a>																		</xsl:for-each>																	</xsl:when>																	<xsl:otherwise>																		<xsl:for-each select="n1:SWName">																			<a>																				<xsl:choose>																					<xsl:when test="not(string($v_SWDiagramLink))">																						<xsl:attribute name="href">																							<xsl:text>#</xsl:text>																						</xsl:attribute>																					</xsl:when>																					<xsl:when test="substring(string($v_SWDiagramLink), 1, 1) = '#'">																						<xsl:attribute name="href">																							<xsl:value-of select="$v_SWDiagramLink"/>																						</xsl:attribute>																					</xsl:when>																					<xsl:otherwise>																						<xsl:attribute name="href">																							<xsl:if test="substring(string($v_SWDiagramLink), 2, 1) = ':'">																								<xsl:text>file:///</xsl:text>																							</xsl:if>																							<xsl:value-of select="translate(string($v_SWDiagramLink), '&#x5c;', '/')"/>																						</xsl:attribute>																					</xsl:otherwise>																				</xsl:choose>																				<xsl:apply-templates/>																			</a>																		</xsl:for-each>																		<span>																			<xsl:text>&#160;</xsl:text>																		</span>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																<xsl:choose>																	<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																		<xsl:for-each select="n1:SWName">																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</xsl:for-each>																	</xsl:when>																	<xsl:otherwise>																		<xsl:for-each select="n1:SWName">																			<xsl:apply-templates/>																			<br/>																		</xsl:for-each>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>														</xsl:choose>													</td>													<td class="td">														<xsl:for-each select="n1:SWDescriptionNotes">															<xsl:for-each select="n1:SWDescription">																<xsl:apply-templates/>															</xsl:for-each>														</xsl:for-each>													</td>													<td class="td">														<xsl:for-each select="n1:SWDescriptionNotes">															<xsl:for-each select="n1:SWNotes">																<xsl:apply-templates/>															</xsl:for-each>														</xsl:for-each>													</td>													<td class="td">														<xsl:choose>															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																<xsl:choose>																	<xsl:when test="contains( n1:SWName , &apos;.pdf&apos; )">																		<xsl:for-each select="n1:SWObjects">																			<xsl:for-each select="n1:SWObject">																				<xsl:for-each select="n1:SWObjectName">																					<a>																						<xsl:choose>																							<xsl:when test="not(string(../../../n1:SWDiagramLink))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(../../../n1:SWDiagramLink), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="../../../n1:SWDiagramLink"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(../../../n1:SWDiagramLink), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(../../../n1:SWDiagramLink), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<xsl:apply-templates/>																					</a>																					<br/>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:when>																	<xsl:otherwise>																		<xsl:for-each select="n1:SWObjects">																			<xsl:for-each select="n1:SWObject">																				<xsl:for-each select="n1:SWObjectName">																					<a>																						<xsl:choose>																							<xsl:when test="not(string(concat(&apos;#&apos;,../n1:SWObjectLink)))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(concat(&apos;#&apos;,../n1:SWObjectLink)), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="concat(&apos;#&apos;,../n1:SWObjectLink)"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(concat(&apos;#&apos;,../n1:SWObjectLink)), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(concat(&apos;#&apos;,../n1:SWObjectLink)), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<xsl:apply-templates/>																					</a>																					<br/>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																<xsl:choose>																	<xsl:when test="contains( n1:SWName , &apos;.pdf&apos; )">																		<xsl:for-each select="n1:SWObjects">																			<xsl:for-each select="n1:SWObject">																				<xsl:for-each select="n1:SWObjectName">																					<xsl:variable name="v_SWObjectLink" select="../n1:SWObjectLink"/>																					<a>																						<xsl:choose>																							<xsl:when test="not(string(../../../n1:SWDiagramLink))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(../../../n1:SWDiagramLink), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="../../../n1:SWDiagramLink"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(../../../n1:SWDiagramLink), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(../../../n1:SWDiagramLink), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<xsl:apply-templates/>																					</a>																					<br/>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:when>																	<xsl:otherwise>																		<xsl:for-each select="n1:SWObjects">																			<xsl:for-each select="n1:SWObject">																				<xsl:for-each select="n1:SWObjectName">																					<xsl:variable name="v_SWObjectLink" select="../n1:SWObjectLink"/>																					<a>																						<xsl:choose>																							<xsl:when test="not(string($v_SWObjectLink))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string($v_SWObjectLink), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="$v_SWObjectLink"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string($v_SWObjectLink), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string($v_SWObjectLink), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<xsl:apply-templates/>																					</a>																					<br/>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																<xsl:for-each select="n1:SWObjects">																	<xsl:for-each select="n1:SWObject">																		<xsl:for-each select="n1:SWObjectName">																			<xsl:apply-templates/>																		</xsl:for-each>																		<br/>																	</xsl:for-each>																</xsl:for-each>															</xsl:when>														</xsl:choose>													</td>												</tr>											</xsl:for-each>										</xsl:for-each>									</tbody>								</table>							</xsl:variable>							<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>							<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>							<xsl:apply-templates select="$altova:table" mode="altova:generate-table">								<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>							</xsl:apply-templates>						</xsl:if>						<xsl:for-each select="n1:EntitiesCollection">							<xsl:for-each select="n1:EntityDetails">								<xsl:variable name="v_ShortObjectID" select="n1:EncodedEntityName"/>								<xsl:variable name="v_ObjectName" select="n1:EntityName"/>								<xsl:variable name="v_DiagramSuffix" select="n1:DiagramSuffix"/>								<xsl:if test="../../n1:UsePageBreaks = &apos;true&apos;">									<br class="altova-page-break" clear="all"/>								</xsl:if>								<p>									<span>										<xsl:text>&#160;</xsl:text>									</span>								</p>								<xsl:variable name="altova:table">									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_2" select="."/>										<xsl:variable name="altova:ColumnData"/>										<tbody>											<tr>												<td class="w_16">													<xsl:variable name="altova:table">														<table class="w_16">															<xsl:variable name="altova:CurrContextGrid_3" select="."/>															<xsl:variable name="altova:ColumnData"/>															<tbody>																<tr>																	<th class="td_h_v w_4">																		<span>																			<xsl:text>Entity Name</xsl:text>																		</span>																	</th>																	<td class="td obj_name w_11p5">																		<xsl:choose>																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																				<xsl:choose>																					<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																						<xsl:element name="a">																							<xsl:attribute name="href">																								<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_DiagramSuffix)"/>																							</xsl:attribute>																							<xsl:attribute name="id">																								<xsl:value-of select="$v_ShortObjectID"/>																							</xsl:attribute>																							<span>																								<xsl:value-of select="$v_ObjectName"/>																							</span>																						</xsl:element>																					</xsl:when>																					<xsl:otherwise>																						<xsl:element name="a">																							<xsl:attribute name="id">																								<xsl:value-of select="$v_ShortObjectID"/>																							</xsl:attribute>																							<span>																								<xsl:value-of select="$v_ObjectName"/>																							</span>																						</xsl:element>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:when>																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																				<a>																					<xsl:attribute name="name">																						<xsl:value-of select="$v_ShortObjectID"/>																					</xsl:attribute>																					<xsl:choose>																						<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																							<a>																								<xsl:choose>																									<xsl:when test="not(string(concat($v_ShortObjectID,$v_DiagramSuffix)))">																										<xsl:attribute name="href">																											<xsl:text>#</xsl:text>																										</xsl:attribute>																									</xsl:when>																									<xsl:when test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 1, 1) = '#'">																										<xsl:attribute name="href">																											<xsl:value-of select="concat($v_ShortObjectID,$v_DiagramSuffix)"/>																										</xsl:attribute>																									</xsl:when>																									<xsl:otherwise>																										<xsl:attribute name="href">																											<xsl:if test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 2, 1) = ':'">																												<xsl:text>file:///</xsl:text>																											</xsl:if>																											<xsl:value-of select="translate(string(concat($v_ShortObjectID,$v_DiagramSuffix)), '&#x5c;', '/')"/>																										</xsl:attribute>																									</xsl:otherwise>																								</xsl:choose>																								<span>																									<xsl:value-of select="$v_ObjectName"/>																								</span>																							</a>																						</xsl:when>																						<xsl:otherwise>																							<span>																								<xsl:value-of select="$v_ObjectName"/>																							</span>																						</xsl:otherwise>																					</xsl:choose>																				</a>																			</xsl:when>																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																				<h3>																					<span>																						<xsl:value-of select="$v_ObjectName"/>																					</span>																				</h3>																			</xsl:when>																		</xsl:choose>																	</td>																</tr>																<tr>																	<th class="td_h_v">																		<span>																			<xsl:text>Preferred Abbreviation</xsl:text>																		</span>																	</th>																	<td class="td">																		<xsl:for-each select="n1:Abbreviation">																			<xsl:apply-templates/>																		</xsl:for-each>																	</td>																</tr>																<tr>																	<th class="td_h_v">																		<span>																			<xsl:text>Classification Type Name</xsl:text>																		</span>																	</th>																	<td class="td">																		<xsl:for-each select="n1:ClassificationTypeName">																			<xsl:apply-templates/>																		</xsl:for-each>																	</td>																</tr>																<tr>																	<th class="td_h_v">																		<span>																			<xsl:text>Object Type Name</xsl:text>																		</span>																	</th>																	<td class="td">																		<xsl:for-each select="n1:ObjectTypeName">																			<xsl:apply-templates/>																		</xsl:for-each>																	</td>																</tr>																<tr>																	<th class="td_h_v">																		<span>																			<xsl:text>Super Type</xsl:text>																		</span>																	</th>																	<td class="td">																		<xsl:for-each select="n1:SuperType">																			<xsl:apply-templates/>																		</xsl:for-each>																	</td>																</tr>																<tr>																	<th class="td_h_v">																		<span>																			<xsl:text>Synonyms</xsl:text>																		</span>																	</th>																	<td class="td">																		<xsl:for-each select="n1:Synonyms">																			<xsl:apply-templates/>																		</xsl:for-each>																	</td>																</tr>															</tbody>														</table>													</xsl:variable>													<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>													<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>													<xsl:apply-templates select="$altova:table" mode="altova:generate-table">														<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>													</xsl:apply-templates>												</td>												<td class="w_0p8"/>												<td style="vertical-align:top; " class="w_8">													<xsl:if test="count( n1:MappedTablesCollection )">														<span class="t_cap">															<xsl:text>Mapped Tables</xsl:text>														</span>														<br/>														<xsl:variable name="altova:table">															<table class="w_8">																<xsl:variable name="altova:CurrContextGrid_4" select="."/>																<xsl:variable name="altova:ColumnData"/>																<tbody>																	<tr>																		<td class="td_h_h">																			<span>																				<xsl:text>Table Name</xsl:text>																			</span>																		</td>																	</tr>																	<xsl:for-each select="n1:MappedTablesCollection">																		<xsl:for-each select="n1:MappedTablesDetails">																			<tr>																				<td class="td">																					<xsl:for-each select="n1:TableName">																						<xsl:apply-templates/>																					</xsl:for-each>																				</td>																			</tr>																		</xsl:for-each>																	</xsl:for-each>																</tbody>															</table>														</xsl:variable>														<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>														<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>														<xsl:apply-templates select="$altova:table" mode="altova:generate-table">															<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>														</xsl:apply-templates>													</xsl:if>												</td>											</tr>										</tbody>									</table>								</xsl:variable>								<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>								<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>								<xsl:apply-templates select="$altova:table" mode="altova:generate-table">									<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>								</xsl:apply-templates>								<xsl:if test="count( n1:DescriptionNotes )">									<p/>									<xsl:for-each select="n1:DescriptionNotes">										<xsl:variable name="altova:table">											<table class="w_16">												<xsl:variable name="altova:CurrContextGrid_5" select="."/>												<xsl:variable name="altova:ColumnData"/>												<tbody>													<tr>														<td class="td_h_v w_4">															<span>																<xsl:text>Description</xsl:text>															</span>														</td>														<td class="td w_11p5">															<xsl:for-each select="n1:Description">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<td class="td_h_v">															<span>																<xsl:text>Notes</xsl:text>															</span>														</td>														<td class="td">															<xsl:for-each select="n1:Notes">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</tbody>											</table>										</xsl:variable>										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>										</xsl:apply-templates>									</xsl:for-each>								</xsl:if>								<xsl:if test="count( n1:QuantitativeInfoCollection )">									<p/>									<xsl:for-each select="n1:QuantitativeInfoCollection">										<xsl:variable name="altova:table">											<table class="w_8">												<xsl:variable name="altova:CurrContextGrid_6" select="."/>												<xsl:variable name="altova:ColumnData"/>												<tbody>													<tr>														<th class="td_h_v w_4">															<span>																<xsl:text>Number Of Attributes</xsl:text>															</span>														</th>														<td class="td_r w_4">															<xsl:for-each select="n1:NumberOfAttributes">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<th class="td_h_v">															<span>																<xsl:text>Number Of Rows Min.</xsl:text>															</span>														</th>														<td style="width:4cm; " class="td_r">															<xsl:for-each select="n1:NumberOfRowsMin">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<th class="td_h_v">															<span>																<xsl:text>Number Of Rows Max.</xsl:text>															</span>														</th>														<td style="width:4cm; " class="td_r">															<xsl:for-each select="n1:NumberOfRowsMax">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<th class="td_h_v">															<span>																<xsl:text>Expected Number Of Rows</xsl:text>															</span>														</th>														<td style="width:4cm; " class="td_r">															<xsl:for-each select="n1:ExpectedNumberOfRows">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<th class="td_h_v">															<span>																<xsl:text>Expected Growth</xsl:text>															</span>														</th>														<td style="width:4cm; " class="td_r">															<xsl:for-each select="n1:ExpectedGrowth">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>													<tr>														<th class="td_h_v">															<span>																<xsl:text>Growth Interval</xsl:text>															</span>														</th>														<td style="width:4cm; " class="td_r">															<xsl:for-each select="n1:GrowthInterval">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</tbody>											</table>										</xsl:variable>										<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>										<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>										<xsl:apply-templates select="$altova:table" mode="altova:generate-table">											<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>										</xsl:apply-templates>									</xsl:for-each>								</xsl:if>								<xsl:if test="count( n1:DiagramsCollection)">									<p/>									<span style="font-size:xx-small; font-style:italic; " class="t_cap">										<xsl:text>Used In Diagrams</xsl:text>									</span>									<br/>									<xsl:variable name="altova:table">										<table class="w_8">											<xsl:variable name="altova:CurrContextGrid_7" select="."/>											<xsl:variable name="altova:ColumnData"/>											<tbody>												<tr>													<td class="td_h_h w_8">														<span>															<xsl:text>Diagram Name</xsl:text>														</span>													</td>												</tr>												<xsl:for-each select="n1:DiagramsCollection">													<xsl:for-each select="n1:Diagram">														<xsl:variable name="v_Suffix" select="n1:Suffix"/>														<tr>															<td class="td">																<xsl:choose>																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																		<xsl:choose>																			<xsl:when test="n1:Suffix != &apos;&apos;">																				<xsl:for-each select="n1:Name">																					<xsl:element name="a">																						<xsl:attribute name="href">																							<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_Suffix)"/>																						</xsl:attribute>																						<xsl:attribute name="name">																							<xsl:value-of select="$v_ObjectName"/>																						</xsl:attribute>																						<span>																							<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																						</span>																					</xsl:element>																				</xsl:for-each>																			</xsl:when>																			<xsl:otherwise>																				<xsl:for-each select="n1:Name">																					<a>																						<xsl:choose>																							<xsl:when test="not(string(../n1:Link))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(../n1:Link), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="../n1:Link"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(../n1:Link), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(../n1:Link), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<span>																							<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																						</span>																					</a>																				</xsl:for-each>																			</xsl:otherwise>																		</xsl:choose>																	</xsl:when>																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																		<xsl:choose>																			<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																				<xsl:for-each select="n1:Name">																					<a>																						<xsl:choose>																							<xsl:when test="not(string(concat(&apos;./&apos;,../n1:Link)))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(concat(&apos;./&apos;,../n1:Link)), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="concat(&apos;./&apos;,../n1:Link)"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(concat(&apos;./&apos;,../n1:Link)), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(concat(&apos;./&apos;,../n1:Link)), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<span>																							<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																						</span>																					</a>																				</xsl:for-each>																			</xsl:when>																			<xsl:otherwise>																				<xsl:for-each select="n1:Name">																					<a>																						<xsl:choose>																							<xsl:when test="not(string(concat($v_ShortObjectID,$v_Suffix)))">																								<xsl:attribute name="href">																									<xsl:text>#</xsl:text>																								</xsl:attribute>																							</xsl:when>																							<xsl:when test="substring(string(concat($v_ShortObjectID,$v_Suffix)), 1, 1) = '#'">																								<xsl:attribute name="href">																									<xsl:value-of select="concat($v_ShortObjectID,$v_Suffix)"/>																								</xsl:attribute>																							</xsl:when>																							<xsl:otherwise>																								<xsl:attribute name="href">																									<xsl:if test="substring(string(concat($v_ShortObjectID,$v_Suffix)), 2, 1) = ':'">																										<xsl:text>file:///</xsl:text>																									</xsl:if>																									<xsl:value-of select="translate(string(concat($v_ShortObjectID,$v_Suffix)), '&#x5c;', '/')"/>																								</xsl:attribute>																							</xsl:otherwise>																						</xsl:choose>																						<span>																							<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																						</span>																					</a>																				</xsl:for-each>																			</xsl:otherwise>																		</xsl:choose>																	</xsl:when>																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																		<xsl:for-each select="n1:Name">																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</xsl:for-each>																	</xsl:when>																</xsl:choose>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:AttributesCollection )">									<p/>									<span class="t_cap">										<xsl:text>Attributes</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_8" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr>													<th class="td_h_h w_1">														<span>															<xsl:text>No</xsl:text>														</span>													</th>													<th class="td_h_h w_5">														<span>															<xsl:text>Attribute Name</xsl:text>														</span>													</th>													<th class="td_h_h w_0p8">														<span>															<xsl:text>PK</xsl:text>														</span>													</th>													<th class="td_h_h w_0p8">														<span>															<xsl:text>FK</xsl:text>														</span>													</th>													<th class="td_h_h w_0p8">														<span>															<xsl:text>M</xsl:text>														</span>													</th>													<th class="td_h_h w_4">														<span>															<xsl:text>Data Type</xsl:text>														</span>													</th>													<th class="td_h_h w_1">														<span>															<xsl:text>DT </xsl:text>														</span>														<br/>														<span>															<xsl:text>kind</xsl:text>														</span>													</th>													<th class="td_h_h w_2p9">														<span>															<xsl:text>Domain Name</xsl:text>														</span>													</th>													<th class="td_h_h w_2p9">														<span>															<xsl:text>Formula</xsl:text>														</span>														<br/>														<span>															<xsl:text>(Default Value)</xsl:text>														</span>													</th>													<th class="td_h_h w_2p5">														<span>															<xsl:text>Preferred Abbreviation</xsl:text>														</span>													</th>													<th class="td_h_h w_2p9">														<span>															<xsl:text>Synonyms</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:AttributesCollection">													<xsl:for-each select="n1:AttributeDetails">														<tr>															<td class="td_r">																<xsl:for-each select="n1:Sequence">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:AttributeName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:PK">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:FK">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:M">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:DataType">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:DataTypeKind">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:DomainName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:Formula">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:PreferredAbbreviation">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:AttributeSynonyms">																	<xsl:apply-templates/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:AttributesCommentsCollection )">									<p/>									<span class="t_cap">										<xsl:text>Attributes Comments</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_9" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr>													<th class="td_h_h w_1">														<span>															<xsl:text>No</xsl:text>														</span>													</th>													<th class="td_h_h w_6">														<span>															<xsl:text>Attribute Name</xsl:text>														</span>													</th>													<th class="td_h_h w_9">														<span>															<xsl:text>Description</xsl:text>														</span>													</th>													<th class="td_h_h w_9">														<span>															<xsl:text>Notes</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:AttributesCommentsCollection">													<xsl:for-each select="n1:AttributeCommentsDetails">														<tr>															<td class="td_r">																<xsl:for-each select="n1:AttributeCommentsSequence">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:AttributeCommentsName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:AttributeDescription">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:AttributeNotes">																	<xsl:apply-templates/>																	<br/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:ConstraintsCollection )">									<p/>									<span class="t_cap">										<xsl:text>Constraints</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_10" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr>													<th class="td_h_h w_3">														<span>															<xsl:text>Type</xsl:text>														</span>													</th>													<th class="td_h_h w_3">														<span>															<xsl:text>Attribute / Constraint Name</xsl:text>														</span>													</th>													<th class="td_h_h w_18p8">														<span>															<xsl:text>Details</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:ConstraintsCollection">													<xsl:for-each select="n1:ConstraintDetails">														<tr>															<td class="td">																<xsl:for-each select="n1:ContstraintType">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:ALCConstraintName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:if test="count( n1:RangesCollection ) != 0">																	<br/>																	<span class="t_cap">																		<xsl:text>Ranges</xsl:text>																	</span>																	<xsl:variable name="altova:table">																		<table>																			<xsl:variable name="altova:CurrContextGrid_11" select="."/>																			<xsl:variable name="altova:ColumnData"/>																			<thead>																				<tr>																					<th class="td_h_h w_3">																						<span>																							<xsl:text>Begin Value</xsl:text>																						</span>																					</th>																					<th class="td_h_h w_3">																						<span>																							<xsl:text>End Value</xsl:text>																						</span>																					</th>																					<th class="td_h_h w_12p5">																						<span>																							<xsl:text>Description</xsl:text>																						</span>																					</th>																				</tr>																			</thead>																			<tbody>																				<xsl:for-each select="n1:RangesCollection">																					<xsl:for-each select="n1:RangeDetails">																						<tr>																							<td class="td">																								<xsl:for-each select="n1:RangeBeginValue">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																							<td class="td">																								<xsl:for-each select="n1:RangeEndValue">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																							<td class="td">																								<xsl:for-each select="n1:RangeShortDescription">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																						</tr>																					</xsl:for-each>																				</xsl:for-each>																			</tbody>																		</table>																	</xsl:variable>																	<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>																	<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>																	<xsl:apply-templates select="$altova:table" mode="altova:generate-table">																		<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>																	</xsl:apply-templates>																</xsl:if>																<xsl:if test="count( n1:ValueListsCollection ) != 0">																	<br/>																	<span class="t_cap">																		<xsl:text>Values List</xsl:text>																	</span>																	<xsl:variable name="altova:table">																		<table>																			<xsl:variable name="altova:CurrContextGrid_12" select="."/>																			<xsl:variable name="altova:ColumnData"/>																			<thead>																				<tr>																					<th class="td_h_h w_3">																						<span>																							<xsl:text>Value</xsl:text>																						</span>																					</th>																					<th class="td_h_h w_15p5">																						<span>																							<xsl:text>Description</xsl:text>																						</span>																					</th>																				</tr>																			</thead>																			<tbody>																				<xsl:for-each select="n1:ValueListsCollection">																					<xsl:for-each select="n1:ValueListDetails">																						<tr>																							<td class="td">																								<xsl:for-each select="n1:VLValue">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																							<td class="td">																								<xsl:for-each select="n1:VLShortDescription">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																						</tr>																					</xsl:for-each>																				</xsl:for-each>																			</tbody>																		</table>																	</xsl:variable>																	<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>																	<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>																	<xsl:apply-templates select="$altova:table" mode="altova:generate-table">																		<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>																	</xsl:apply-templates>																</xsl:if>																<xsl:if test="count( n1:CheckConstraintsCollection ) != 0">																	<br/>																	<span class="t_cap">																		<xsl:text>Check Constraints</xsl:text>																	</span>																	<xsl:variable name="altova:table">																		<table>																			<xsl:variable name="altova:CurrContextGrid_13" select="."/>																			<xsl:variable name="altova:ColumnData"/>																			<thead>																				<tr>																					<th class="td_h_h w_15p5">																						<span>																							<xsl:text>Text</xsl:text>																						</span>																					</th>																					<th class="td_h_h w_3">																						<span>																							<xsl:text>DB Type</xsl:text>																						</span>																					</th>																				</tr>																			</thead>																			<tbody>																				<xsl:for-each select="n1:CheckConstraintsCollection">																					<xsl:for-each select="n1:CheckConstraintDetails">																						<tr>																							<td class="td">																								<xsl:for-each select="n1:CheckConstraintText">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																							<td class="td">																								<xsl:for-each select="n1:DatabaseType">																									<xsl:apply-templates/>																								</xsl:for-each>																							</td>																						</tr>																					</xsl:for-each>																				</xsl:for-each>																			</tbody>																		</table>																	</xsl:variable>																	<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>																	<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>																	<xsl:apply-templates select="$altova:table" mode="altova:generate-table">																		<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>																	</xsl:apply-templates>																</xsl:if>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:IdentifiersCollection )">									<p/>									<span class="t_cap">										<xsl:text>Identifiers</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_14" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr>													<th class="td_h_h w_7">														<span>															<xsl:text>Name</xsl:text>														</span>													</th>													<th class="td_h_h w_2">														<span>															<xsl:text>Primary</xsl:text>														</span>														<br/>														<span>															<xsl:text>Identifyer</xsl:text>														</span>													</th>													<th class="td_h_h w_6">														<span>															<xsl:text>Element Name</xsl:text>														</span>													</th>													<th class="td_h_h w_1p5">														<span>															<xsl:text>Element</xsl:text>														</span>														<br/>														<span>															<xsl:text>Type</xsl:text>														</span>													</th>													<th class="td_h_h w_4">														<span>															<xsl:text>Source Label</xsl:text>														</span>													</th>													<th class="td_h_h w_4">														<span>															<xsl:text>Target Label</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:IdentifiersCollection">													<xsl:for-each select="n1:IdentifierDetails">														<tr>															<td class="td">																<xsl:for-each select="n1:IdentifierName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:PrimaryIdentifier">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:ElementName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:ElementType">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:SourceLabel">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:TargetLabel">																	<xsl:apply-templates/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:RelationshipsCollection )">									<p/>									<span class="t_cap">										<xsl:text>Has Relationships With</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_15" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr style="height:0.23in; ">													<th class="td_h_h w_5">														<span>															<xsl:text>Entity Name</xsl:text>														</span>													</th>													<th class="td_h_h w_4">														<span>															<xsl:text>Role</xsl:text>														</span>													</th>													<th class="td_h_h w_4">														<span>															<xsl:text>Other Role</xsl:text>														</span>													</th>													<th class="td_h_h w_1p5">														<span>															<xsl:text>In Arc</xsl:text>														</span>													</th>													<th class="td_h_h w_2p5">														<span>															<xsl:text>Cardinality</xsl:text>														</span>													</th>													<th class="td_h_h w_2p5">														<span>															<xsl:text>Dominant</xsl:text>														</span>														<br/>														<span>															<xsl:text>Role</xsl:text>														</span>													</th>													<th class="td_h_h w_2p5">														<span>															<xsl:text>Identifying</xsl:text>														</span>													</th>													<th class="td_h_h w_2p5">														<span>															<xsl:text>Transferable</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:RelationshipsCollection">													<xsl:for-each select="n1:RelationshipDetails">														<tr>															<td class="td">																<xsl:for-each select="n1:SourceName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:SourceRole">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:TargetRole">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:InArc">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:Cardinality">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:DominantRole">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:Identifying">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:Transferable">																	<xsl:apply-templates/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:IncomingProcessesCollection )">									<p/>									<span class="t_cap">										<xsl:text>Incoming Processes</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_16" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr>													<th class="td_h_h w_7p5">														<span>															<xsl:text>Process Name</xsl:text>														</span>													</th>													<th class="td_h_h w_7p5">														<span>															<xsl:text>Flow Name</xsl:text>														</span>													</th>													<th class="td_h_h w_2">														<span>															<xsl:text>CRUD Code</xsl:text>														</span>													</th>													<th class="td_h_h w_7p5">														<span>															<xsl:text>DFD Name</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:IncomingProcessesCollection">													<xsl:for-each select="n1:IncomingProcessDetails">														<tr>															<td class="td">																<xsl:for-each select="n1:IncomingProcessName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:IncomingFlowName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:IncomingCRUDCode">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:IncomingDFDName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>								<xsl:if test="count( n1:OutgoingProcessesCollection ) !=0">									<p/>									<span class="t_cap">										<xsl:text>Outgoing Processes</xsl:text>									</span>									<xsl:variable name="altova:table">										<table class="w_25">											<xsl:variable name="altova:CurrContextGrid_17" select="."/>											<xsl:variable name="altova:ColumnData"/>											<thead>												<tr style="height:0.13in; ">													<th class="td_h_h w_7p5">														<span>															<xsl:text>Process Name</xsl:text>														</span>													</th>													<th class="td_h_h w_7p5">														<span>															<xsl:text>Flow Name</xsl:text>														</span>													</th>													<th class="td_h_h w_2">														<span>															<xsl:text>CRUD Code</xsl:text>														</span>													</th>													<th class="td_h_h w_7p5">														<span>															<xsl:text>DFD Name</xsl:text>														</span>													</th>												</tr>											</thead>											<tbody>												<xsl:for-each select="n1:OutgoingProcessesCollection">													<xsl:for-each select="n1:OugoingProcessDetails">														<tr>															<td class="td">																<xsl:for-each select="n1:OutgoingProcessName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:OutgoingFlowName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td_c">																<xsl:for-each select="n1:OutgoingCRUDCode">																	<xsl:apply-templates/>																</xsl:for-each>															</td>															<td class="td">																<xsl:for-each select="n1:OutgoingDFDName">																	<xsl:apply-templates/>																</xsl:for-each>															</td>														</tr>													</xsl:for-each>												</xsl:for-each>											</tbody>										</table>									</xsl:variable>									<xsl:variable name="altova:col-count" select="sum( for $altova:cell in $altova:table/table/(thead | tbody | tfoot)[ 1 ]/tr[ 1 ]/(th | td) return altova:col-span( $altova:cell ) )"/>									<xsl:variable name="altova:generate-cols" as="xs:boolean*" select="for $altova:pos in 1 to $altova:col-count return true()"/>									<xsl:apply-templates select="$altova:table" mode="altova:generate-table">										<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>									</xsl:apply-templates>								</xsl:if>							</xsl:for-each>						</xsl:for-each>					</xsl:for-each>				</xsl:for-each>			</body>		</html>	</xsl:template>	<xsl:function name="altova:is-cell-empty" as="xs:boolean">		<xsl:param name="altova:cell" as="element()"/>		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>	</xsl:function>	<xsl:function name="altova:is-node-empty" as="xs:boolean">		<xsl:param name="altova:node" as="element()"/>		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>	</xsl:function>	<xsl:function name="altova:col-span" as="xs:integer">		<xsl:param name="altova:cell" as="element()"/>		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>	</xsl:function>	<xsl:template match="@* | node()" mode="altova:generate-table">		<xsl:param name="altova:generate-cols"/>		<xsl:copy>			<xsl:apply-templates select="@* | node()" mode="#current">				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>			</xsl:apply-templates>		</xsl:copy>	</xsl:template>	<xsl:template match="tbody" mode="altova:generate-table">		<xsl:param name="altova:generate-cols"/>		<xsl:choose>			<xsl:when test="empty(tr)">				<xsl:copy>					<tr>						<td/>					</tr>				</xsl:copy>			</xsl:when>			<xsl:otherwise>				<xsl:copy>					<xsl:apply-templates select="@* | node()" mode="#current">						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>					</xsl:apply-templates>				</xsl:copy>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="th | td" mode="altova:generate-table">		<xsl:choose>			<xsl:when test="altova:is-cell-empty( . )">				<xsl:copy>					<xsl:apply-templates select="@*" mode="#current"/>					<xsl:text>&#160;</xsl:text>				</xsl:copy>			</xsl:when>			<xsl:otherwise>				<xsl:copy>					<xsl:apply-templates select="@* | node()" mode="#current"/>				</xsl:copy>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:function name="altova:GetChartYValuesForSingleSeries">		<xsl:param name="seqCategoryLeafPos" as="node()*"/>		<xsl:param name="nodeSeriesLeafPos" as="node()"/>		<xsl:param name="bValuesInCategory" as="xs:boolean"/>		<xsl:for-each select="$seqCategoryLeafPos">			<xsl:element name="altova:Value">				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>			</xsl:element>		</xsl:for-each>	</xsl:function>	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">		<xsl:param name="nodeSeriesLeafPos" as="node()"/>		<xsl:param name="nodeCategoryLeafPos" as="node()"/>		<xsl:param name="bValuesInCategory" as="xs:boolean"/>		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>		<xsl:choose>			<xsl:when test="count($altova:sCommonContextId) gt 1">				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>			</xsl:when>			<xsl:when test="count($altova:sCommonContextId) lt 1">				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>				<xsl:sequence select="'altova:no-value'"/>			</xsl:when>			<xsl:when test="$bValuesInCategory">				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>			</xsl:when>			<xsl:otherwise>				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">		<xsl:param name="nodeParam" as="node()"/>		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>	</xsl:function>	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">		<xsl:param name="altova:length"/>		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>		<xsl:choose>			<xsl:when test="ends-with($normLength, 'px')">				<xsl:value-of select="substring-before($normLength, 'px')"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'in')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'cm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'mm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pt')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pc')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$normLength"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">		<xsl:param name="altova:length"/>		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>		<xsl:choose>			<xsl:when test="ends-with($normLength, 'px')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'in')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'cm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'mm')">				<xsl:value-of select="substring-before($normLength, 'mm') "/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pt')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pc')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function></xsl:stylesheet>