<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/entity" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>	<xsl:param name="SV_OutputFormat" select="'HTML'"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:template match="/">		<html>			<head>				<title/>				<meta name="generator" content="Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)"/>				<meta http-equiv="X-UA-Compatible" content="IE=7"/>				<xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p1, '&quot;>'))" disable-output-escaping="yes"/>                <xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p2, '&quot;>'))" disable-output-escaping="yes"/>				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>				<xsl:comment>&lt;![endif]</xsl:comment>				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>			</head>			<body style="font-family:Tahoma; font-size:xx-small; ">				<xsl:for-each select="$XML">					<xsl:for-each select="n1:Entity">						<xsl:variable name="v_ShortObjectID" select="n1:EncodedEntityName"/>						<xsl:variable name="v_DiagramSuffix" select="n1:DiagramSuffix"/>						<xsl:variable name="v_ObjectName" select="n1:EntityName"/>						<center>							<xsl:for-each select="n1:ReportCaption">								<span class="caption">									<xsl:apply-templates/>								</span>							</xsl:for-each>						</center>						<p/>						<table class="w_20">							<xsl:variable name="altova:CurrContextGrid_0" select="."/>							<tbody>								<tr>									<td class="td_h_v w_4">										<span>											<xsl:text>Design Name</xsl:text>										</span>									</td>									<td class="td w_16">										<xsl:for-each select="n1:DesignName">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Version Date</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:VersionDate">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Version Comment</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:VersionComment">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Model Name</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:ModelName">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>							</tbody>						</table>						<p>							<span>								<xsl:text>&#160;</xsl:text>							</span>						</p>						<table class="w_25">							<xsl:variable name="altova:CurrContextGrid_1" select="."/>							<tbody>								<tr>									<td class="w_16">										<table style="padding-bottom:0; padding-left:0; padding-right:0; padding-top:0; " class="w_16">											<xsl:variable name="altova:CurrContextGrid_2" select="."/>											<tbody>												<tr style="height:0.20in; ">													<th class="td_h_v w_4">														<span>															<xsl:text>Entity Name</xsl:text>														</span>													</th>													<td class="td obj_name w_11p5">														<xsl:choose>															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																<xsl:choose>																	<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																		<xsl:element name="a">																			<xsl:attribute name="href">																				<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_DiagramSuffix)"/>																			</xsl:attribute>																			<xsl:attribute name="id">																				<xsl:value-of select="$v_ShortObjectID"/>																			</xsl:attribute>																			<span>																				<xsl:value-of select="$v_ObjectName"/>																			</span>																		</xsl:element>																	</xsl:when>																	<xsl:otherwise>																		<span>																			<xsl:value-of select="$v_ObjectName"/>																		</span>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																<xsl:choose>																	<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																		<a>																			<xsl:choose>																				<xsl:when test="not(string(concat($v_ShortObjectID,$v_DiagramSuffix)))">																					<xsl:attribute name="href">																						<xsl:text>#</xsl:text>																					</xsl:attribute>																				</xsl:when>																				<xsl:when test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 1, 1) = '#'">																					<xsl:attribute name="href">																						<xsl:value-of select="concat($v_ShortObjectID,$v_DiagramSuffix)"/>																					</xsl:attribute>																				</xsl:when>																				<xsl:otherwise>																					<xsl:attribute name="href">																						<xsl:if test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 2, 1) = ':'">																							<xsl:text>file:///</xsl:text>																						</xsl:if>																						<xsl:value-of select="translate(string(concat($v_ShortObjectID,$v_DiagramSuffix)), '&#x5c;', '/')"/>																					</xsl:attribute>																				</xsl:otherwise>																			</xsl:choose>																			<span>																				<xsl:value-of select="$v_ObjectName"/>																			</span>																		</a>																	</xsl:when>																	<xsl:otherwise>																		<span>																			<xsl:value-of select="$v_ObjectName"/>																		</span>																	</xsl:otherwise>																</xsl:choose>															</xsl:when>															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																<span>																	<xsl:value-of select="$v_ObjectName"/>																</span>															</xsl:when>														</xsl:choose>													</td>												</tr>												<tr>													<th class="td_h_v">														<span>															<xsl:text>Preferred Abbreviation</xsl:text>														</span>													</th>													<td class="td">														<xsl:for-each select="n1:Abbreviation">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>												<tr>													<th class="td_h_v">														<span>															<xsl:text>Classification Type Name</xsl:text>														</span>													</th>													<td class="td">														<xsl:for-each select="n1:ClassificationTypeName">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>												<tr>													<th class="td_h_v">														<span>															<xsl:text>Object Type Name</xsl:text>														</span>													</th>													<td class="td">														<xsl:for-each select="n1:ObjectTypeName">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>												<tr>													<th class="td_h_v">														<span>															<xsl:text>Super Type</xsl:text>														</span>													</th>													<td class="td">														<xsl:for-each select="n1:SuperType">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>												<tr>													<th class="td_h_v">														<span>															<xsl:text>Synonyms</xsl:text>														</span>													</th>													<td class="td">														<xsl:for-each select="n1:Synonyms">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>											</tbody>										</table>									</td>									<td class="w_0p8"/>									<td style="vertical-align:top; " class="w_8">										<xsl:if test="count( n1:MappedTablesCollection )">											<span class="t_cap">												<xsl:text>Mapped Tables</xsl:text>											</span>											<br/>											<table class="w_8">												<xsl:variable name="altova:CurrContextGrid_3" select="."/>												<tbody>													<tr>														<td class="td_h_h">															<span>																<xsl:text>Table Name</xsl:text>															</span>														</td>													</tr>													<xsl:for-each select="n1:MappedTablesCollection">														<xsl:for-each select="n1:MappedTablesDetails">															<tr>																<td class="td">																	<xsl:for-each select="n1:TableName">																		<xsl:apply-templates/>																	</xsl:for-each>																</td>															</tr>														</xsl:for-each>													</xsl:for-each>												</tbody>											</table>										</xsl:if>									</td>								</tr>							</tbody>						</table>						<xsl:if test="count( n1:DescriptionNotes )">							<p/>							<xsl:for-each select="n1:DescriptionNotes">								<table class="w_16">									<xsl:variable name="altova:CurrContextGrid_4" select="."/>									<tbody>										<tr>											<td class="td_h_v w_4">												<span>													<xsl:text>Description</xsl:text>												</span>											</td>											<td class="td w_11p5">												<xsl:for-each select="n1:Description">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<td class="td_h_v">												<span>													<xsl:text>Notes</xsl:text>												</span>											</td>											<td class="td">												<xsl:for-each select="n1:Notes">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>									</tbody>								</table>							</xsl:for-each>						</xsl:if>						<xsl:if test="count( n1:QuantitativeInfoCollection )">							<p/>							<xsl:for-each select="n1:QuantitativeInfoCollection">								<table class="w_8">									<xsl:variable name="altova:CurrContextGrid_5" select="."/>									<tbody>										<tr>											<th class="td_h_v w_4">												<span>													<xsl:text>Number Of Attributes</xsl:text>												</span>											</th>											<td class="td_r w_4">												<xsl:for-each select="n1:NumberOfAttributes">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<th class="td_h_v">												<span>													<xsl:text>Number Of Rows Min.</xsl:text>												</span>											</th>											<td style="width:4cm; " class="td_r">												<xsl:for-each select="n1:NumberOfRowsMin">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<th class="td_h_v">												<span>													<xsl:text>Number Of Rows Max.</xsl:text>												</span>											</th>											<td style="width:4cm; " class="td_r">												<xsl:for-each select="n1:NumberOfRowsMax">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<th class="td_h_v">												<span>													<xsl:text>Expected Number Of Rows</xsl:text>												</span>											</th>											<td style="width:4cm; " class="td_r">												<xsl:for-each select="n1:ExpectedNumberOfRows">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<th class="td_h_v">												<span>													<xsl:text>Expected Growth</xsl:text>												</span>											</th>											<td style="width:4cm; " class="td_r">												<xsl:for-each select="n1:ExpectedGrowth">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>										<tr>											<th class="td_h_v">												<span>													<xsl:text>Growth Interval</xsl:text>												</span>											</th>											<td style="width:4cm; " class="td_r">												<xsl:for-each select="n1:GrowthInterval">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>									</tbody>								</table>							</xsl:for-each>						</xsl:if>						<xsl:if test="count( n1:DiagramsCollection)">							<p/>							<span>								<xsl:text>Used In </xsl:text>							</span>							<span class="t_cap">								<xsl:text>Diagrams</xsl:text>							</span>							<br/>							<table class="w_8">								<xsl:variable name="altova:CurrContextGrid_6" select="."/>								<tbody>									<tr>										<td class="td_h_h w_8">											<span>												<xsl:text>Diagram Name</xsl:text>											</span>										</td>									</tr>									<xsl:for-each select="n1:DiagramsCollection">										<xsl:for-each select="n1:Diagram">											<xsl:variable name="v_Suffix" select="n1:Suffix"/>											<tr>												<td class="td">													<xsl:choose>														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">															<xsl:choose>																<xsl:when test="n1:Suffix != &apos;&apos;">																	<xsl:for-each select="n1:Name">																		<xsl:element name="a">																			<xsl:attribute name="href">																				<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_Suffix)"/>																			</xsl:attribute>																			<xsl:attribute name="name">																				<xsl:value-of select="$v_ObjectName"/>																			</xsl:attribute>																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</xsl:element>																	</xsl:for-each>																</xsl:when>																<xsl:otherwise>																	<xsl:for-each select="n1:Name">																		<a>																			<xsl:choose>																				<xsl:when test="not(string(../n1:Link))">																					<xsl:attribute name="href">																						<xsl:text>#</xsl:text>																					</xsl:attribute>																				</xsl:when>																				<xsl:when test="substring(string(../n1:Link), 1, 1) = '#'">																					<xsl:attribute name="href">																						<xsl:value-of select="../n1:Link"/>																					</xsl:attribute>																				</xsl:when>																				<xsl:otherwise>																					<xsl:attribute name="href">																						<xsl:if test="substring(string(../n1:Link), 2, 1) = ':'">																							<xsl:text>file:///</xsl:text>																						</xsl:if>																						<xsl:value-of select="translate(string(../n1:Link), '&#x5c;', '/')"/>																					</xsl:attribute>																				</xsl:otherwise>																			</xsl:choose>																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</a>																	</xsl:for-each>																</xsl:otherwise>															</xsl:choose>														</xsl:when>														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">															<xsl:choose>																<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																	<xsl:for-each select="n1:Name">																		<a>																			<xsl:choose>																				<xsl:when test="not(string(concat(&apos;./&apos;,../n1:Link)))">																					<xsl:attribute name="href">																						<xsl:text>#</xsl:text>																					</xsl:attribute>																				</xsl:when>																				<xsl:when test="substring(string(concat(&apos;./&apos;,../n1:Link)), 1, 1) = '#'">																					<xsl:attribute name="href">																						<xsl:value-of select="concat(&apos;./&apos;,../n1:Link)"/>																					</xsl:attribute>																				</xsl:when>																				<xsl:otherwise>																					<xsl:attribute name="href">																						<xsl:if test="substring(string(concat(&apos;./&apos;,../n1:Link)), 2, 1) = ':'">																							<xsl:text>file:///</xsl:text>																						</xsl:if>																						<xsl:value-of select="translate(string(concat(&apos;./&apos;,../n1:Link)), '&#x5c;', '/')"/>																					</xsl:attribute>																				</xsl:otherwise>																			</xsl:choose>																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</a>																	</xsl:for-each>																</xsl:when>																<xsl:otherwise>																	<xsl:for-each select="n1:Name">																		<a>																			<xsl:choose>																				<xsl:when test="not(string(concat($v_ShortObjectID,$v_Suffix)))">																					<xsl:attribute name="href">																						<xsl:text>#</xsl:text>																					</xsl:attribute>																				</xsl:when>																				<xsl:when test="substring(string(concat($v_ShortObjectID,$v_Suffix)), 1, 1) = '#'">																					<xsl:attribute name="href">																						<xsl:value-of select="concat($v_ShortObjectID,$v_Suffix)"/>																					</xsl:attribute>																				</xsl:when>																				<xsl:otherwise>																					<xsl:attribute name="href">																						<xsl:if test="substring(string(concat($v_ShortObjectID,$v_Suffix)), 2, 1) = ':'">																							<xsl:text>file:///</xsl:text>																						</xsl:if>																						<xsl:value-of select="translate(string(concat($v_ShortObjectID,$v_Suffix)), '&#x5c;', '/')"/>																					</xsl:attribute>																				</xsl:otherwise>																			</xsl:choose>																			<span>																				<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																			</span>																		</a>																	</xsl:for-each>																</xsl:otherwise>															</xsl:choose>														</xsl:when>														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">															<xsl:for-each select="n1:Name">																<span>																	<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																</span>															</xsl:for-each>														</xsl:when>													</xsl:choose>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:AttributesCollection )">							<p/>							<span class="t_cap">								<xsl:text>Attributes</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_7" select="."/>								<thead>									<tr>										<th class="td_h_h w_1">											<span>												<xsl:text>No</xsl:text>											</span>										</th>										<th class="td_h_h w_5">											<span>												<xsl:text>Attribute Name</xsl:text>											</span>										</th>										<th class="td_h_h w_0p8">											<span>												<xsl:text>PK</xsl:text>											</span>										</th>										<th class="td_h_h w_0p8">											<span>												<xsl:text>FK</xsl:text>											</span>										</th>										<th class="td_h_h w_0p8">											<span>												<xsl:text>M</xsl:text>											</span>										</th>										<th class="td_h_h w_4">											<span>												<xsl:text>Data Type</xsl:text>											</span>										</th>										<th class="td_h_h w_1">											<span>												<xsl:text>DT </xsl:text>											</span>											<br/>											<span>												<xsl:text>kind</xsl:text>											</span>										</th>										<th class="td_h_h w_2p9">											<span>												<xsl:text>Domain Name</xsl:text>											</span>										</th>										<th class="td_h_h w_2p9">											<span>												<xsl:text>Formula</xsl:text>											</span>											<br/>											<span>												<xsl:text>(Default Value)</xsl:text>											</span>										</th>										<th class="td_h_h w_2p5">											<span>												<xsl:text>Preferred Abbreviation</xsl:text>											</span>										</th>										<th class="td_h_h w_2p9">											<span>												<xsl:text>Synonyms</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:AttributesCollection">										<xsl:for-each select="n1:AttributeDetails">											<tr>												<td class="td_r">													<xsl:for-each select="n1:Sequence">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:AttributeName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:PK">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:FK">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:M">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:DataType">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:DataTypeKind">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:DomainName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:Formula">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:PreferredAbbreviation">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:AttributeSynonyms">														<xsl:apply-templates/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:AttributesCommentsCollection )">							<p/>							<span class="t_cap">								<xsl:text>Attributes Comments</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_8" select="."/>								<thead>									<tr>										<th class="td_h_h w_1">											<span>												<xsl:text>No</xsl:text>											</span>										</th>										<th class="td_h_h w_6">											<span>												<xsl:text>Attribute Name</xsl:text>											</span>										</th>										<th class="td_h_h w_9">											<span>												<xsl:text>Description</xsl:text>											</span>										</th>										<th class="td_h_h w_9">											<span>												<xsl:text>Notes</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:AttributesCommentsCollection">										<xsl:for-each select="n1:AttributeCommentsDetails">											<tr>												<td class="td_r">													<xsl:for-each select="n1:AttributeCommentsSequence">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:AttributeCommentsName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:AttributeDescription">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:AttributeNotes">														<xsl:apply-templates/>														<br/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:ConstraintsCollection )">							<p/>							<span class="t_cap">								<xsl:text>Constraints</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_9" select="."/>								<thead>									<tr>										<th class="td_h_h w_3">											<span>												<xsl:text>Type</xsl:text>											</span>										</th>										<th class="td_h_h w_3">											<span>												<xsl:text>Attribute / Constraint Name</xsl:text>											</span>										</th>										<th class="td_h_h w_18p8">											<span>												<xsl:text>Details</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:ConstraintsCollection">										<xsl:for-each select="n1:ConstraintDetails">											<tr>												<td class="td">													<xsl:for-each select="n1:ContstraintType">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:ALCConstraintName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:if test="count( n1:RangesCollection ) != 0">														<br/>														<span class="t_cap">															<xsl:text>Ranges</xsl:text>														</span>														<table>															<xsl:variable name="altova:CurrContextGrid_10" select="."/>															<thead>																<tr>																	<th class="td_h_h w_3">																		<span>																			<xsl:text>Begin Value</xsl:text>																		</span>																	</th>																	<th class="td_h_h w_3">																		<span>																			<xsl:text>End Value</xsl:text>																		</span>																	</th>																	<th class="td_h_h w_12p5">																		<span>																			<xsl:text>Description</xsl:text>																		</span>																	</th>																</tr>															</thead>															<tbody>																<xsl:for-each select="n1:RangesCollection">																	<xsl:for-each select="n1:RangeDetails">																		<tr>																			<td class="td">																				<xsl:for-each select="n1:RangeBeginValue">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																			<td class="td">																				<xsl:for-each select="n1:RangeEndValue">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																			<td class="td">																				<xsl:for-each select="n1:RangeShortDescription">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																		</tr>																	</xsl:for-each>																</xsl:for-each>															</tbody>														</table>													</xsl:if>													<xsl:if test="count( n1:ValueListsCollection ) != 0">														<br/>														<span class="t_cap">															<xsl:text>Values List</xsl:text>														</span>														<table>															<xsl:variable name="altova:CurrContextGrid_11" select="."/>															<thead>																<tr>																	<th class="td_h_h w_3">																		<span>																			<xsl:text>Value</xsl:text>																		</span>																	</th>																	<th class="td_h_h w_15p5">																		<span>																			<xsl:text>Description</xsl:text>																		</span>																	</th>																</tr>															</thead>															<tbody>																<xsl:for-each select="n1:ValueListsCollection">																	<xsl:for-each select="n1:ValueListDetails">																		<tr>																			<td class="td">																				<xsl:for-each select="n1:VLValue">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																			<td class="td">																				<xsl:for-each select="n1:VLShortDescription">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																		</tr>																	</xsl:for-each>																</xsl:for-each>															</tbody>														</table>													</xsl:if>													<xsl:if test="count( n1:CheckConstraintsCollection ) != 0">														<br/>														<span class="t_cap">															<xsl:text>Check Constraints</xsl:text>														</span>														<table>															<xsl:variable name="altova:CurrContextGrid_12" select="."/>															<thead>																<tr>																	<th class="td_h_h w_15p5">																		<span>																			<xsl:text>Text</xsl:text>																		</span>																	</th>																	<th class="td_h_h w_3">																		<span>																			<xsl:text>DB Type</xsl:text>																		</span>																	</th>																</tr>															</thead>															<tbody>																<xsl:for-each select="n1:CheckConstraintsCollection">																	<xsl:for-each select="n1:CheckConstraintDetails">																		<tr>																			<td class="td">																				<xsl:for-each select="n1:CheckConstraintText">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																			<td class="td">																				<xsl:for-each select="n1:DatabaseType">																					<xsl:apply-templates/>																				</xsl:for-each>																			</td>																		</tr>																	</xsl:for-each>																</xsl:for-each>															</tbody>														</table>													</xsl:if>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:IdentifiersCollection )">							<p/>							<span class="t_cap">								<xsl:text>Identifiers</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_13" select="."/>								<thead>									<tr>										<th class="td_h_h w_7">											<span>												<xsl:text>Name</xsl:text>											</span>										</th>										<th class="td_h_h w_2">											<span>												<xsl:text>Primary</xsl:text>											</span>											<br/>											<span>												<xsl:text>Identifyer</xsl:text>											</span>										</th>										<th class="td_h_h w_6">											<span>												<xsl:text>Element Name</xsl:text>											</span>										</th>										<th class="td_h_h w_1p5">											<span>												<xsl:text>Element</xsl:text>											</span>											<br/>											<span>												<xsl:text>Type</xsl:text>											</span>										</th>										<th class="td_h_h w_4">											<span>												<xsl:text>Source Label</xsl:text>											</span>										</th>										<th class="td_h_h w_4">											<span>												<xsl:text>Target Label</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:IdentifiersCollection">										<xsl:for-each select="n1:IdentifierDetails">											<tr>												<td class="td">													<xsl:for-each select="n1:IdentifierName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:PrimaryIdentifier">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:ElementName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:ElementType">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:SourceLabel">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:TargetLabel">														<xsl:apply-templates/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:RelationshipsCollection )">							<p/>							<span class="t_cap">								<xsl:text>Has Relationships With</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_14" select="."/>								<thead>									<tr style="height:0.23in; ">										<th class="td_h_h w_5">											<span>												<xsl:text>Entity Name</xsl:text>											</span>										</th>										<th class="td_h_h w_4">											<span>												<xsl:text>Role</xsl:text>											</span>										</th>										<th class="td_h_h w_4">											<span>												<xsl:text>Other Role</xsl:text>											</span>										</th>										<th class="td_h_h w_1p5">											<span>												<xsl:text>In Arc</xsl:text>											</span>										</th>										<th class="td_h_h w_2p5">											<span>												<xsl:text>Cardinality</xsl:text>											</span>										</th>										<th class="td_h_h w_2p5">											<span>												<xsl:text>Dominant</xsl:text>											</span>											<br/>											<span>												<xsl:text>Role</xsl:text>											</span>										</th>										<th class="td_h_h w_2p5">											<span>												<xsl:text>Identifying</xsl:text>											</span>										</th>										<th class="td_h_h w_2p5">											<span>												<xsl:text>Transferable</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:RelationshipsCollection">										<xsl:for-each select="n1:RelationshipDetails">											<tr>												<td class="td">													<xsl:for-each select="n1:SourceName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:SourceRole">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:TargetRole">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:InArc">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:Cardinality">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:DominantRole">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:Identifying">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:Transferable">														<xsl:apply-templates/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:IncomingProcessesCollection )">							<p/>							<span class="t_cap">								<xsl:text>Incoming Processes</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_15" select="."/>								<thead>									<tr>										<th class="td_h_h w_7p5">											<span>												<xsl:text>Process Name</xsl:text>											</span>										</th>										<th class="td_h_h w_7p5">											<span>												<xsl:text>Flow Name</xsl:text>											</span>										</th>										<th class="td_h_h w_2">											<span>												<xsl:text>CRUD Code</xsl:text>											</span>										</th>										<th class="td_h_h w_7p5">											<span>												<xsl:text>DFD Name</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:IncomingProcessesCollection">										<xsl:for-each select="n1:IncomingProcessDetails">											<tr>												<td class="td">													<xsl:for-each select="n1:IncomingProcessName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:IncomingFlowName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:IncomingCRUDCode">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:IncomingDFDName">														<xsl:apply-templates/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>						<xsl:if test="count( n1:OutgoingProcessesCollection ) !=0">							<p/>							<span class="t_cap">								<xsl:text>Outgoing Processes</xsl:text>							</span>							<table class="w_25">								<xsl:variable name="altova:CurrContextGrid_16" select="."/>								<thead>									<tr style="height:0.13in; ">										<th class="td_h_h w_7p5">											<span>												<xsl:text>Process Name</xsl:text>											</span>										</th>										<th class="td_h_h w_7p5">											<span>												<xsl:text>Flow Name</xsl:text>											</span>										</th>										<th class="td_h_h w_2">											<span>												<xsl:text>CRUD Code</xsl:text>											</span>										</th>										<th class="td_h_h w_7p5">											<span>												<xsl:text>DFD Name</xsl:text>											</span>										</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="n1:OutgoingProcessesCollection">										<xsl:for-each select="n1:OugoingProcessDetails">											<tr>												<td class="td">													<xsl:for-each select="n1:OutgoingProcessName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:OutgoingFlowName">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td_c">													<xsl:for-each select="n1:OutgoingCRUDCode">														<xsl:apply-templates/>													</xsl:for-each>												</td>												<td class="td">													<xsl:for-each select="n1:OutgoingDFDName">														<xsl:apply-templates/>													</xsl:for-each>												</td>											</tr>										</xsl:for-each>									</xsl:for-each>								</tbody>							</table>						</xsl:if>					</xsl:for-each>				</xsl:for-each>				<span>					<xsl:text>&#160;</xsl:text>				</span>			</body>		</html>	</xsl:template></xsl:stylesheet>