<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/structuredtypes" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>	<xsl:param name="SV_OutputFormat" select="'HTML'"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:template match="/">		<html>			<head>				<title/>				<meta name="generator" content="Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)"/>				<meta http-equiv="X-UA-Compatible" content="IE=7"/>				<xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p1, '&quot;>'))" disable-output-escaping="yes"/>                <xsl:value-of select="normalize-space(concat('&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;', $p2, '&quot;>'))" disable-output-escaping="yes"/>				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(-90deg) translate(-100%, 0%); -ms-transform-origin: 0% 0%;}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%;-ms-transform: rotate(90deg) translate(0%, -100%); -ms-transform-origin: 0% 0%;}</style>				<xsl:comment>&lt;![endif]</xsl:comment>				<style type="text/css">@page { margin-left:2cm; margin-right:2cm; margin-top:2cm; margin-bottom:2cm } @media print { br.altova-page-break { page-break-before: always; } }</style>			</head>			<body style="font-family:Tahoma; font-size:xx-small; ">				<xsl:for-each select="$XML">					<xsl:for-each select="n1:StructuredTypes">						<center>							<xsl:for-each select="n1:ReportCaption">								<span class="caption">									<xsl:apply-templates/>								</span>							</xsl:for-each>						</center>						<p/>						<table class="w_20">							<xsl:variable name="altova:CurrContextGrid_0" select="."/>							<tbody>								<tr>									<td class="td_h_v w_4">										<span>											<xsl:text>Design Name</xsl:text>										</span>									</td>									<td class="td w_16">										<xsl:for-each select="n1:DesignName">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Version Date</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:VersionDate">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Version Comment</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:VersionComment">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>								<tr>									<td class="td_h_v">										<span>											<xsl:text>Model Name</xsl:text>										</span>									</td>									<td class="td">										<xsl:for-each select="n1:ModelName">											<xsl:apply-templates/>										</xsl:for-each>									</td>								</tr>							</tbody>						</table>						<br/>						<xsl:for-each select="n1:STCollection">							<xsl:for-each select="n1:STDetails">								<xsl:variable name="v_ShortObjectID" select="n1:EncodedSTName"/>								<xsl:variable name="v_ObjectName" select="n1:STName"/>								<xsl:variable name="v_DiagramSuffix" select="n1:DiagramSuffix"/>								<xsl:if test="../../n1:UsePageBreaks = &apos;true&apos;">									<br class="altova-page-break" clear="all"/>								</xsl:if>								<p>									<span>										<xsl:text>&#160;</xsl:text>									</span>								</p>								<table class="w_16">									<xsl:variable name="altova:CurrContextGrid_1" select="."/>									<tbody>										<tr>											<td class="td_h_v w_4">												<span>													<xsl:text>Structured Type Name</xsl:text>												</span>											</td>											<td class="td obj_name w_12">												<xsl:choose>													<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">														<xsl:choose>															<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																<xsl:element name="a">																	<xsl:attribute name="href">																		<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_DiagramSuffix)"/>																	</xsl:attribute>																	<xsl:attribute name="id">																		<xsl:value-of select="$v_ShortObjectID"/>																	</xsl:attribute>																	<span>																		<xsl:value-of select="$v_ObjectName"/>																	</span>																</xsl:element>															</xsl:when>															<xsl:otherwise>																<xsl:element name="a">																	<xsl:attribute name="id">																		<xsl:value-of select="$v_ShortObjectID"/>																	</xsl:attribute>																	<span>																		<xsl:value-of select="$v_ObjectName"/>																	</span>																</xsl:element>															</xsl:otherwise>														</xsl:choose>													</xsl:when>													<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">														<a>															<xsl:attribute name="name">																<xsl:value-of select="$v_ShortObjectID"/>															</xsl:attribute>															<xsl:choose>																<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																	<a>																		<xsl:choose>																			<xsl:when test="not(string(concat($v_ShortObjectID,$v_DiagramSuffix)))">																				<xsl:attribute name="href">																					<xsl:text>#</xsl:text>																				</xsl:attribute>																			</xsl:when>																			<xsl:when test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 1, 1) = '#'">																				<xsl:attribute name="href">																					<xsl:value-of select="concat($v_ShortObjectID,$v_DiagramSuffix)"/>																				</xsl:attribute>																			</xsl:when>																			<xsl:otherwise>																				<xsl:attribute name="href">																					<xsl:if test="substring(string(concat($v_ShortObjectID,$v_DiagramSuffix)), 2, 1) = ':'">																						<xsl:text>file:///</xsl:text>																					</xsl:if>																					<xsl:value-of select="translate(string(concat($v_ShortObjectID,$v_DiagramSuffix)), '&#x5c;', '/')"/>																				</xsl:attribute>																			</xsl:otherwise>																		</xsl:choose>																		<span>																			<xsl:value-of select="$v_ObjectName"/>																		</span>																	</a>																</xsl:when>																<xsl:otherwise>																	<span>																		<xsl:value-of select="$v_ObjectName"/>																	</span>																</xsl:otherwise>															</xsl:choose>														</a>													</xsl:when>													<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">														<h3>															<span>																<xsl:value-of select="$v_ObjectName"/>															</span>														</h3>													</xsl:when>												</xsl:choose>											</td>										</tr>										<tr>											<td class="td_h_v">												<span>													<xsl:text>Super Type</xsl:text>												</span>											</td>											<td class="td">												<xsl:for-each select="n1:STSuperType">													<xsl:apply-templates/>												</xsl:for-each>											</td>										</tr>									</tbody>								</table>								<xsl:if test="count( n1:DescriptionNotes )">									<p/>									<xsl:for-each select="n1:DescriptionNotes">										<table class="w_16">											<xsl:variable name="altova:CurrContextGrid_2" select="."/>											<tbody>												<tr>													<td class="td_h_v w_4">														<span>															<xsl:text>Description</xsl:text>														</span>													</td>													<td class="td w_12">														<xsl:for-each select="n1:Description">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>												<tr>													<td class="td_h_v">														<span>															<xsl:text>Notes</xsl:text>														</span>													</td>													<td class="td">														<xsl:for-each select="n1:Notes">															<xsl:apply-templates/>														</xsl:for-each>													</td>												</tr>											</tbody>										</table>									</xsl:for-each>								</xsl:if>								<xsl:if test="count( n1:DiagramsCollection)">									<p/>									<span class="t_cap">										<xsl:text>Used In Diagrams</xsl:text>									</span>									<br/>									<table class="w_8">										<xsl:variable name="altova:CurrContextGrid_3" select="."/>										<tbody>											<tr>												<td class="td_h_h w_8">													<span>														<xsl:text>Diagram Name</xsl:text>													</span>												</td>											</tr>											<xsl:for-each select="n1:DiagramsCollection">												<xsl:variable name="tName" select="../n1:STName"/>												<xsl:variable name="vEncodedSTName" select="../n1:EncodedSTName"/>												<xsl:for-each select="n1:Diagram">													<xsl:variable name="dSuffix" select="n1:Suffix"/>													<tr>														<td class="td">															<xsl:choose>																<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																	<xsl:choose>																		<xsl:when test="n1:Suffix != &apos;&apos;">																			<xsl:for-each select="n1:Name">																				<xsl:element name="a">																					<xsl:attribute name="href">																						<xsl:value-of select="concat('#' , $vEncodedSTName , $dSuffix)"/>																					</xsl:attribute>																					<xsl:attribute name="name">																						<xsl:value-of select="$tName"/>																					</xsl:attribute>																					<span>																						<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																					</span>																				</xsl:element>																			</xsl:for-each>																		</xsl:when>																		<xsl:otherwise>																			<xsl:for-each select="n1:Name">																				<a>																					<xsl:choose>																						<xsl:when test="not(string(../n1:Link))">																							<xsl:attribute name="href">																								<xsl:text>#</xsl:text>																							</xsl:attribute>																						</xsl:when>																						<xsl:when test="substring(string(../n1:Link), 1, 1) = '#'">																							<xsl:attribute name="href">																								<xsl:value-of select="../n1:Link"/>																							</xsl:attribute>																						</xsl:when>																						<xsl:otherwise>																							<xsl:attribute name="href">																								<xsl:if test="substring(string(../n1:Link), 2, 1) = ':'">																									<xsl:text>file:///</xsl:text>																								</xsl:if>																								<xsl:value-of select="translate(string(../n1:Link), '&#x5c;', '/')"/>																							</xsl:attribute>																						</xsl:otherwise>																					</xsl:choose>																					<span>																						<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																					</span>																				</a>																			</xsl:for-each>																		</xsl:otherwise>																	</xsl:choose>																</xsl:when>																<xsl:otherwise>																	<xsl:choose>																		<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																			<xsl:for-each select="n1:Name">																				<a>																					<xsl:choose>																						<xsl:when test="not(string(concat(&apos;./&apos;,../n1:Link)))">																							<xsl:attribute name="href">																								<xsl:text>#</xsl:text>																							</xsl:attribute>																						</xsl:when>																						<xsl:when test="substring(string(concat(&apos;./&apos;,../n1:Link)), 1, 1) = '#'">																							<xsl:attribute name="href">																								<xsl:value-of select="concat(&apos;./&apos;,../n1:Link)"/>																							</xsl:attribute>																						</xsl:when>																						<xsl:otherwise>																							<xsl:attribute name="href">																								<xsl:if test="substring(string(concat(&apos;./&apos;,../n1:Link)), 2, 1) = ':'">																									<xsl:text>file:///</xsl:text>																								</xsl:if>																								<xsl:value-of select="translate(string(concat(&apos;./&apos;,../n1:Link)), '&#x5c;', '/')"/>																							</xsl:attribute>																						</xsl:otherwise>																					</xsl:choose>																					<span>																						<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																					</span>																				</a>																			</xsl:for-each>																		</xsl:when>																		<xsl:otherwise>																			<xsl:for-each select="n1:Name">																				<a>																					<xsl:choose>																						<xsl:when test="not(string(concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)))">																							<xsl:attribute name="href">																								<xsl:text>#</xsl:text>																							</xsl:attribute>																						</xsl:when>																						<xsl:when test="substring(string(concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)), 1, 1) = '#'">																							<xsl:attribute name="href">																								<xsl:value-of select="concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)"/>																							</xsl:attribute>																						</xsl:when>																						<xsl:otherwise>																							<xsl:attribute name="href">																								<xsl:if test="substring(string(concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)), 2, 1) = ':'">																									<xsl:text>file:///</xsl:text>																								</xsl:if>																								<xsl:value-of select="translate(string(concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)), '&#x5c;', '/')"/>																							</xsl:attribute>																						</xsl:otherwise>																					</xsl:choose>																					<span>																						<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																					</span>																				</a>																			</xsl:for-each>																		</xsl:otherwise>																	</xsl:choose>																</xsl:otherwise>															</xsl:choose>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:AttributesCollection)">									<p/>									<span class="t_cap">										<xsl:text>Attributes</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_4" select="."/>										<thead>											<tr>												<th class="td_h_h w_1">													<span>														<xsl:text>No</xsl:text>													</span>												</th>												<th class="td_h_h w_15">													<span>														<xsl:text>Attribute Name</xsl:text>													</span>												</th>												<th class="td_h_h w_0p8">													<span>														<xsl:text>M</xsl:text>													</span>												</th>												<th class="td_h_h w_4">													<span>														<xsl:text>Data Type</xsl:text>													</span>												</th>												<th class="td_h_h w_1">													<span>														<xsl:text>DT </xsl:text>													</span>													<br/>													<span>														<xsl:text>kind</xsl:text>													</span>												</th>												<th class="td_h_h w_2p9">													<span>														<xsl:text>Domain Name</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:AttributesCollection">												<xsl:for-each select="n1:AttributeDetails">													<tr>														<td class="td_r">															<xsl:for-each select="n1:Sequence">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td_c">															<xsl:for-each select="n1:M">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:DataType">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td_c">															<xsl:for-each select="n1:DataTypeKind">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:DomainName">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:AttributesCommentsCollection )">									<p/>									<span class="t_cap">										<xsl:text>Attributes Comments</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_5" select="."/>										<thead>											<tr>												<th class="td_h_h w_1">													<span>														<xsl:text>No</xsl:text>													</span>												</th>												<th class="td_h_h w_6">													<span>														<xsl:text>Attribute Name</xsl:text>													</span>												</th>												<th class="td_h_h w_9">													<span>														<xsl:text>Description</xsl:text>													</span>												</th>												<th class="td_h_h w_9">													<span>														<xsl:text>Notes</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:AttributesCommentsCollection">												<xsl:for-each select="n1:AttributeCommentsDetails">													<tr>														<td class="td_r">															<xsl:for-each select="n1:AttributeCommentsSequence">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeCommentsName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeDescription">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeNotes">																<xsl:apply-templates/>																<br/>															</xsl:for-each>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:MethodsCollection )">									<p/>									<span class="t_cap">										<xsl:text>Methods</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_6" select="."/>										<thead>											<tr>												<th class="td_h_h w_1">													<span>														<xsl:text>No</xsl:text>													</span>												</th>												<th class="td_h_h w_5">													<span>														<xsl:text>Method Name</xsl:text>													</span>												</th>												<th class="td_h_h w_1">													<span>														<xsl:text>C</xsl:text>													</span>												</th>												<th class="td_h_h w_1">													<span>														<xsl:text>O</xsl:text>													</span>												</th>												<th class="td_h_h w_5">													<span>														<xsl:text>Overriden Method</xsl:text>													</span>												</th>												<th class="td_h_h w_5">													<span>														<xsl:text>Return Value</xsl:text>													</span>												</th>												<th class="td_h_h w_7">													<span>														<xsl:text>Parameters</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:MethodsCollection">												<xsl:for-each select="n1:MethodDetails">													<tr>														<td class="td_r">															<xsl:for-each select="n1:MethodSequence">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:MethodName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td_c">															<xsl:for-each select="n1:MethodConstructor">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td_c">															<xsl:for-each select="n1:MethodOverriding">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:MethodOverridenMethod">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:MethodReturnValue">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:if test="count( n1:MethodParametersCollection ) != 0">																<table>																	<xsl:variable name="altova:CurrContextGrid_7" select="."/>																	<thead>																		<tr>																			<th class="td_h_h w_3p8">																				<span>																					<xsl:text>Name</xsl:text>																				</span>																			</th>																			<th class="td_h_h w_3">																				<span>																					<xsl:text>Type</xsl:text>																				</span>																			</th>																		</tr>																	</thead>																	<tbody>																		<xsl:for-each select="n1:MethodParametersCollection">																			<xsl:for-each select="n1:MethodParameterDetails">																				<tr>																					<td class="td">																						<xsl:for-each select="n1:ParameterName">																							<xsl:apply-templates/>																						</xsl:for-each>																					</td>																					<td class="td">																						<xsl:for-each select="n1:ParameterType">																							<xsl:apply-templates/>																						</xsl:for-each>																					</td>																				</tr>																			</xsl:for-each>																		</xsl:for-each>																	</tbody>																</table>															</xsl:if>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:TablesCollection )">									<p/>									<span class="t_cap">										<xsl:text>Used In Tables</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_8" select="."/>										<thead>											<tr>												<th class="td_h_h w_8">													<span>														<xsl:text>Model Name</xsl:text>													</span>												</th>												<th class="td_h_h w_8p5">													<span>														<xsl:text>Table Name</xsl:text>													</span>												</th>												<th class="td_h_h w_8p5">													<span>														<xsl:text>Column Name</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:TablesCollection">												<xsl:for-each select="n1:TableDetails">													<tr>														<td class="td">															<xsl:for-each select="n1:ModelName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:TableName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:ColumnName">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:EntitiesCollection)">									<p/>									<span class="t_cap">										<xsl:text>Used In Entities</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_9" select="."/>										<thead>											<tr>												<th class="td_h_h w_12p5">													<span>														<xsl:text>Entity Name</xsl:text>													</span>												</th>												<th class="td_h_h w_12p5">													<span>														<xsl:text>Attribute Name</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:EntitiesCollection">												<xsl:for-each select="n1:EntityDetails">													<tr>														<td class="td">															<xsl:for-each select="n1:EntityName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeName">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>								<xsl:if test="count( n1:STCollection )">									<p/>									<span class="t_cap">										<xsl:text>Used In Structured Types</xsl:text>									</span>									<table class="w_25">										<xsl:variable name="altova:CurrContextGrid_10" select="."/>										<thead>											<tr>												<th class="td_h_h w_12p5">													<span>														<xsl:text>Structured Type Name</xsl:text>													</span>												</th>												<th class="td_h_h w_12p5">													<span>														<xsl:text>Attribute Name</xsl:text>													</span>												</th>											</tr>										</thead>										<tbody>											<xsl:for-each select="n1:STCollection">												<xsl:for-each select="n1:STDetails">													<tr>														<td class="td">															<xsl:for-each select="n1:STName">																<xsl:apply-templates/>															</xsl:for-each>														</td>														<td class="td">															<xsl:for-each select="n1:AttributeName">																<xsl:apply-templates/>															</xsl:for-each>														</td>													</tr>												</xsl:for-each>											</xsl:for-each>										</tbody>									</table>								</xsl:if>							</xsl:for-each>						</xsl:for-each>					</xsl:for-each>				</xsl:for-each>			</body>		</html>	</xsl:template></xsl:stylesheet>