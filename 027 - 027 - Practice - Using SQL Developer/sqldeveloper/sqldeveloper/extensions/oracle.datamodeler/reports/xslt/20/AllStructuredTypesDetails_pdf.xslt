<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/structuredtypes" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>	<xsl:param name="altova:bGeneratingFromPxf" select="false()"/>	<xsl:param name="SV_OutputFormat" select="'PDF'"/>	<xsl:param name="SV_BaseOutputFileName" as="xs:string?">		<xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>	</xsl:param>	<xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;AllStructuredTypesDetails&apos;" as="xs:string?"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="fo:layout-master-set">		<fo:layout-master-set>			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:page-sequence-master master-name="page-master-0">				<fo:repeatable-page-master-alternatives>					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>				</fo:repeatable-page-master-alternatives>			</fo:page-sequence-master>			<fo:simple-page-master master-name="page-master-1-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:page-sequence-master master-name="page-master-1">				<fo:repeatable-page-master-alternatives>					<fo:conditional-page-master-reference master-reference="page-master-1-even-first" odd-or-even="even" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd-first" odd-or-even="odd" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-1-even-last" odd-or-even="even" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd-last" odd-or-even="odd" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-1-even" odd-or-even="even"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd" odd-or-even="odd"/>				</fo:repeatable-page-master-alternatives>			</fo:page-sequence-master>		</fo:layout-master-set>	</xsl:variable>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:variable name="altova:CssImages" select="()"/>	<xsl:variable name="altova:bDoFirstSectionBreak" as="xs:boolean" select="true()"/>	<xsl:variable name="altova:sCssSwitch" as="xs:string" select="''"/>	<xsl:variable name="altova:nodeCssClasses">		<Class sFile="css/osddm_main.css" sSelector="caption">			<Styles display="block" font-size="medium" text-align="center"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="footer">			<Styles font-family="Tahoma" font-size="8pt"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="footer_l">			<Styles font-family="Tahoma" font-size="6pt" font-weight="normal" text-align="left" white-space="pre-wrap" word-wrap="break-word"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="footer_r">			<Styles font-family="Tahoma" font-size="6pt" font-weight="normal" text-align="right"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="obj_name">			<Styles background-color="rgb(217,245,255)" font-size="10pt" padding="1px"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="obj_name>a">			<Styles font-size="small"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="t_cap">			<Styles font-size="xx-small" font-style="italic"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="t_item">			<Styles margin-left="5px"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="table">			<Styles border="0.01cm solid black" border-collapse="collapse" border-spacing="0px" display="block" font-size="xx-small" table-layout="fixed" width="100%"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td">			<Styles border="0.01cm solid black" padding="3px" text-align="left" vertical-align="top" white-space="pre-wrap" word-wrap="break-word"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td_c">			<Styles border="0.01cm solid black" padding="3px" text-align="center" vertical-align="top"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td_h_h">			<Styles background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" text-align="center" vertical-align="center"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td_h_h_s1">			<Styles background-color="rgb(247,255,253)" border="0.01cm solid black" padding="3px" text-align="center" vertical-align="center"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td_h_v">			<Styles background-color="rgb(231,249,255)" border="0.01cm solid black" padding="3px" text-align="left" vertical-align="top"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="td_r">			<Styles border="0.01cm solid black" padding="3px" text-align="right" vertical-align="top"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_0p8">			<Styles width="0.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_1">			<Styles width="1cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_11">			<Styles width="11cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_11p5">			<Styles width="11.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_12">			<Styles width="12cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_12p5">			<Styles width="12.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_12p8">			<Styles width="12.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_13">			<Styles width="13cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_14">			<Styles width="14cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_14p6">			<Styles width="14.6cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_15">			<Styles width="15cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_15p5">			<Styles width="15.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_15p8">			<Styles width="15.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_16">			<Styles width="16cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_17">			<Styles width="17cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_17p5">			<Styles width="17.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_18p8">			<Styles width="18.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_19">			<Styles width="19cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_19p5">			<Styles width="19.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_1p5">			<Styles width="1.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_1p8">			<Styles width="1.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_1p9">			<Styles width="1.9cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_2">			<Styles width="2cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_20">			<Styles width="20cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_21p8">			<Styles width="21.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_22">			<Styles width="22cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_24p5">			<Styles width="24.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_25">			<Styles width="25cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_2p5">			<Styles width="2.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_2p9">			<Styles width="2.9cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_3">			<Styles width="3cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_3p8">			<Styles width="3.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_3p9">			<Styles width="3.9cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_4">			<Styles width="4cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_5">			<Styles width="5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_5p1">			<Styles width="5.1cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_5p38">			<Styles width="5.38cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_5p5">			<Styles width="5.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_5p9">			<Styles width="5.9cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_6">			<Styles width="6cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_6p52">			<Styles width="6.52cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_7">			<Styles width="7cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_7p5">			<Styles width="7.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_8">			<Styles width="8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_8p5">			<Styles width="8.5cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_8p8">			<Styles width="8.8cm"/>		</Class>		<Class sFile="css/osddm_main.css" sSelector="w_9">			<Styles width="9cm"/>		</Class>	</xsl:variable>	<xsl:variable name="altova:design-xslt-tree-view">		<altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.fo') else ''}">			<fo:root>				<xsl:copy-of select="$fo:layout-master-set"/>				<fo:declarations>					<x:xmpmeta xmlns:x="adobe:ns:meta/">						<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">							<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">								<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)</xmp:CreatorTool>							</rdf:Description>						</rdf:RDF>					</x:xmpmeta>				</fo:declarations>				<altova:pdf-bookmark-tree generate-from-toc="false">					<xsl:for-each select="$XML">						<xsl:for-each select="n1:StructuredTypes">							<xsl:for-each select="n1:STCollection">								<xsl:for-each select="n1:STDetails">									<xsl:for-each select="n1:STName">										<altova:pdf-bookmark>											<altova:hyperlink href="{concat(&apos;#&apos;,../n1:EncodedSTName)}" font-size="xx-small">												<altova:inline-container-substitute font-size="xx-small">													<xsl:apply-templates/>												</altova:inline-container-substitute>											</altova:hyperlink>										</altova:pdf-bookmark>									</xsl:for-each>								</xsl:for-each>							</xsl:for-each>						</xsl:for-each>						<altova:line-break/>					</xsl:for-each>				</altova:pdf-bookmark-tree>				<fo:page-sequence master-reference="page-master-0" initial-page-number="auto" format="1" altova:DocumentEndsOn="">					<fo:static-content flow-name="odd-page-footer">						<fo:block-container height="1.30cm" overflow="hidden" display-align="after">							<fo:block font-family="Tahoma" font-size="xx-small">								<xsl:variable name="altova:table">									<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">										<fo:table-column column-width="19cm"/>										<fo:table-column column-width="3cm"/>										<fo:table-column column-width="3cm"/>										<xsl:variable name="altova:CurrContextGrid_2" select="."/>										<xsl:variable name="altova:ColumnData"/>										<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">											<fo:table-row font-family="Tahoma" font-size="8pt">												<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="$XML">																<xsl:for-each select="n1:StructuredTypes">																	<xsl:for-each select="n1:CompanyName">																		<altova:inline-container-substitute font-family="Tahoma" font-size="8pt">																			<xsl:apply-templates/>																		</altova:inline-container-substitute>																	</xsl:for-each>																</xsl:for-each>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="right">															<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt" space-before="1.12em" space-after="1.12em">																<fo:inline>																	<xsl:text>Oracle Data Modeler&#160; |</xsl:text>																</fo:inline>															</fo:block>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt" space-before="1.12em" space-after="1.12em">																<fo:inline>																	<xsl:text>Page: </xsl:text>																</fo:inline>																<fo:page-number/>																<fo:inline>																	<xsl:text> / </xsl:text>																</fo:inline>																<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>															</fo:block>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>										</fo:table-body>									</fo:table>								</xsl:variable>								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>							</fo:block>						</fo:block-container>					</fo:static-content>					<fo:static-content flow-name="even-page-footer">						<fo:block-container height="1.30cm" overflow="hidden" display-align="after">							<fo:block font-family="Tahoma" font-size="xx-small">								<xsl:variable name="altova:table">									<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">										<fo:table-column column-width="19cm"/>										<fo:table-column column-width="3cm"/>										<fo:table-column column-width="3cm"/>										<xsl:variable name="altova:CurrContextGrid_2" select="."/>										<xsl:variable name="altova:ColumnData"/>										<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">											<fo:table-row font-family="Tahoma" font-size="8pt">												<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="$XML">																<xsl:for-each select="n1:StructuredTypes">																	<xsl:for-each select="n1:CompanyName">																		<altova:inline-container-substitute font-family="Tahoma" font-size="8pt">																			<xsl:apply-templates/>																		</altova:inline-container-substitute>																	</xsl:for-each>																</xsl:for-each>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="right">															<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt" space-before="1.12em" space-after="1.12em">																<fo:inline>																	<xsl:text>Oracle Data Modeler&#160; |</xsl:text>																</fo:inline>															</fo:block>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt" space-before="1.12em" space-after="1.12em">																<fo:inline>																	<xsl:text>Page: </xsl:text>																</fo:inline>																<fo:page-number/>																<fo:inline>																	<xsl:text> / </xsl:text>																</fo:inline>																<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>															</fo:block>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>										</fo:table-body>									</fo:table>								</xsl:variable>								<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>							</fo:block>						</fo:block-container>					</fo:static-content>					<fo:flow flow-name="xsl-region-body">						<fo:block font-family="Tahoma" font-size="xx-small">							<xsl:for-each select="$XML">								<xsl:for-each select="n1:StructuredTypes">									<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">										<xsl:for-each select="n1:ReportCaption">											<altova:inline-container-substitute font-size="medium" text-align="center">												<xsl:apply-templates/>											</altova:inline-container-substitute>										</xsl:for-each>									</fo:block>									<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>									<xsl:variable name="altova:table">										<fo:table border-collapse="collapse" empty-cells="show" width="20cm" table-layout="fixed">											<fo:table-column column-width="4cm"/>											<fo:table-column column-width="16cm"/>											<xsl:variable name="altova:CurrContextGrid_3" select="."/>											<xsl:variable name="altova:ColumnData"/>											<fo:table-body start-indent="0pt">												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Design Name</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:DesignName">																	<altova:inline-container-substitute>																		<xsl:apply-templates/>																	</altova:inline-container-substitute>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Version Date</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:VersionDate">																	<altova:inline-container-substitute>																		<xsl:apply-templates/>																	</altova:inline-container-substitute>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Version Comment</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:VersionComment">																	<altova:inline-container-substitute>																		<xsl:apply-templates/>																	</altova:inline-container-substitute>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Model Name</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:ModelName">																	<altova:inline-container-substitute>																		<xsl:apply-templates/>																	</altova:inline-container-substitute>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>											</fo:table-body>										</fo:table>									</xsl:variable>									<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>									<altova:line-break/>									<xsl:for-each select="n1:STCollection">										<xsl:for-each select="n1:STDetails">											<xsl:variable name="v_ShortObjectID" select="n1:EncodedSTName"/>											<xsl:variable name="v_ObjectName" select="n1:STName"/>											<xsl:variable name="v_DiagramSuffix" select="n1:DiagramSuffix"/>											<xsl:if test="../../n1:UsePageBreaks = &apos;true&apos;">												<altova:document-section master-reference="page-master-1" altova:section-starts-on="next" initial-page-number="auto" format="1">													<fo:static-content flow-name="odd-page-footer">														<fo:block-container height="1.30cm" overflow="hidden" display-align="after">															<fo:block font-family="Tahoma" font-size="xx-small">																<xsl:variable name="altova:table">																	<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">																		<fo:table-column column-width="19cm"/>																		<fo:table-column column-width="3cm"/>																		<fo:table-column column-width="3cm"/>																		<xsl:variable name="altova:CurrContextGrid_4" select="."/>																		<xsl:variable name="altova:ColumnData"/>																		<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">																			<fo:table-row font-family="Tahoma" font-size="8pt">																				<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="$XML">																								<xsl:for-each select="n1:StructuredTypes">																									<xsl:for-each select="n1:CompanyName">																										<altova:inline-container-substitute font-family="Tahoma" font-size="8pt">																											<xsl:apply-templates/>																										</altova:inline-container-substitute>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="right">																							<fo:inline>																								<xsl:text>Oracle Data Modeler&#160; |</xsl:text>																							</fo:inline>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<fo:inline>																								<xsl:text>Page: </xsl:text>																							</fo:inline>																							<fo:page-number/>																							<fo:inline>																								<xsl:text> / </xsl:text>																							</fo:inline>																							<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																			</fo:table-row>																		</fo:table-body>																	</fo:table>																</xsl:variable>																<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>															</fo:block>														</fo:block-container>													</fo:static-content>													<fo:static-content flow-name="even-page-footer">														<fo:block-container height="1.30cm" overflow="hidden" display-align="after">															<fo:block font-family="Tahoma" font-size="xx-small">																<xsl:variable name="altova:table">																	<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">																		<fo:table-column column-width="19cm"/>																		<fo:table-column column-width="3cm"/>																		<fo:table-column column-width="3cm"/>																		<xsl:variable name="altova:CurrContextGrid_4" select="."/>																		<xsl:variable name="altova:ColumnData"/>																		<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">																			<fo:table-row font-family="Tahoma" font-size="8pt">																				<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="$XML">																								<xsl:for-each select="n1:StructuredTypes">																									<xsl:for-each select="n1:CompanyName">																										<altova:inline-container-substitute font-family="Tahoma" font-size="8pt">																											<xsl:apply-templates/>																										</altova:inline-container-substitute>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="right">																							<fo:inline>																								<xsl:text>Oracle Data Modeler&#160; |</xsl:text>																							</fo:inline>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<fo:inline>																								<xsl:text>Page: </xsl:text>																							</fo:inline>																							<fo:page-number/>																							<fo:inline>																								<xsl:text> / </xsl:text>																							</fo:inline>																							<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																			</fo:table-row>																		</fo:table-body>																	</fo:table>																</xsl:variable>																<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>															</fo:block>														</fo:block-container>													</fo:static-content>												</altova:document-section>											</xsl:if>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em">												<fo:inline>													<xsl:text>&#160;</xsl:text>												</fo:inline>											</fo:block>											<xsl:variable name="altova:table">												<fo:table border-collapse="collapse" empty-cells="show" width="16cm" table-layout="fixed">													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="12cm"/>													<xsl:variable name="altova:CurrContextGrid_5" select="."/>													<xsl:variable name="altova:ColumnData"/>													<fo:table-body start-indent="0pt">														<fo:table-row>															<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																<fo:block-container overflow="hidden">																	<fo:block text-align="left">																		<fo:inline>																			<xsl:text>Structured Type Name</xsl:text>																		</fo:inline>																	</fo:block>																</fo:block-container>															</fo:table-cell>															<fo:table-cell background-color="rgb(217,245,255)" border="0.01cm solid black" font-size="10pt" padding="0.01in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																<fo:block-container overflow="hidden">																	<fo:block text-align="left">																		<xsl:choose>																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																				<xsl:choose>																					<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																						<xsl:element name="a">																							<xsl:attribute name="href">																								<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_DiagramSuffix)"/>																							</xsl:attribute>																							<xsl:attribute name="id">																								<xsl:value-of select="$v_ShortObjectID"/>																							</xsl:attribute>																							<xsl:value-of select="$v_ObjectName"/>																						</xsl:element>																					</xsl:when>																					<xsl:otherwise>																						<xsl:element name="a">																							<xsl:attribute name="id">																								<xsl:value-of select="$v_ShortObjectID"/>																							</xsl:attribute>																							<xsl:value-of select="$v_ObjectName"/>																						</xsl:element>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:when>																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																				<altova:bookmark name="{$v_ShortObjectID}">																					<xsl:choose>																						<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																							<altova:hyperlink href="{concat($v_ShortObjectID,$v_DiagramSuffix)}" text-decoration="underline" color="blue">																								<xsl:value-of select="$v_ObjectName"/>																							</altova:hyperlink>																						</xsl:when>																						<xsl:otherwise>																							<xsl:value-of select="$v_ObjectName"/>																						</xsl:otherwise>																					</xsl:choose>																				</altova:bookmark>																			</xsl:when>																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																				<fo:block margin-right="100% - 100%" font-size="1.17em" font-weight="bold" space-before="0.83em" space-after="0.83em" margin="0pt">																					<xsl:value-of select="$v_ObjectName"/>																				</fo:block>																			</xsl:when>																		</xsl:choose>																	</fo:block>																</fo:block-container>															</fo:table-cell>														</fo:table-row>														<fo:table-row>															<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																<fo:block-container overflow="hidden">																	<fo:block text-align="left">																		<fo:inline>																			<xsl:text>Super Type</xsl:text>																		</fo:inline>																	</fo:block>																</fo:block-container>															</fo:table-cell>															<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																<fo:block-container overflow="hidden">																	<fo:block text-align="left">																		<xsl:for-each select="n1:STSuperType">																			<altova:inline-container-substitute>																				<xsl:apply-templates/>																			</altova:inline-container-substitute>																		</xsl:for-each>																	</fo:block>																</fo:block-container>															</fo:table-cell>														</fo:table-row>													</fo:table-body>												</fo:table>											</xsl:variable>											<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											<xsl:if test="count( n1:DescriptionNotes )">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<xsl:for-each select="n1:DescriptionNotes">													<xsl:variable name="altova:table">														<fo:table border-collapse="collapse" empty-cells="show" width="16cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="12cm"/>															<xsl:variable name="altova:CurrContextGrid_6" select="."/>															<xsl:variable name="altova:ColumnData"/>															<fo:table-body start-indent="0pt">																<fo:table-row>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																		<fo:block-container overflow="hidden">																			<fo:block text-align="left">																				<fo:inline>																					<xsl:text>Description</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																		<fo:block-container overflow="hidden">																			<fo:block text-align="left">																				<xsl:for-each select="n1:Description">																					<altova:inline-container-substitute>																						<xsl:apply-templates/>																					</altova:inline-container-substitute>																				</xsl:for-each>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																</fo:table-row>																<fo:table-row>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																		<fo:block-container overflow="hidden">																			<fo:block text-align="left">																				<fo:inline>																					<xsl:text>Notes</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																		<fo:block-container overflow="hidden">																			<fo:block text-align="left">																				<xsl:for-each select="n1:Notes">																					<altova:inline-container-substitute>																						<xsl:apply-templates/>																					</altova:inline-container-substitute>																				</xsl:for-each>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																</fo:table-row>															</fo:table-body>														</fo:table>													</xsl:variable>													<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>												</xsl:for-each>											</xsl:if>											<xsl:if test="count( n1:DiagramsCollection)">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Used In Diagrams</xsl:text>												</fo:inline>												<altova:line-break/>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="8cm" table-layout="fixed">														<fo:table-column column-width="8cm"/>														<xsl:variable name="altova:CurrContextGrid_7" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-body start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Diagram Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>															<xsl:for-each select="n1:DiagramsCollection">																<xsl:variable name="tName" select="../n1:STName"/>																<xsl:variable name="vEncodedSTName" select="../n1:EncodedSTName"/>																<xsl:for-each select="n1:Diagram">																	<xsl:variable name="dSuffix" select="n1:Suffix"/>																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:choose>																						<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																							<xsl:choose>																								<xsl:when test="n1:Suffix != &apos;&apos;">																									<xsl:for-each select="n1:Name">																										<xsl:element name="a">																											<xsl:attribute name="href">																												<xsl:value-of select="concat('#' , $vEncodedSTName , $dSuffix)"/>																											</xsl:attribute>																											<xsl:attribute name="name">																												<xsl:value-of select="$tName"/>																											</xsl:attribute>																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</xsl:element>																									</xsl:for-each>																								</xsl:when>																								<xsl:otherwise>																									<xsl:for-each select="n1:Name">																										<altova:hyperlink href="{../n1:Link}" text-decoration="underline" color="blue">																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</altova:hyperlink>																									</xsl:for-each>																								</xsl:otherwise>																							</xsl:choose>																						</xsl:when>																						<xsl:otherwise>																							<xsl:choose>																								<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																									<xsl:for-each select="n1:Name">																										<altova:hyperlink href="{concat(&apos;./&apos;,../n1:Link)}" text-decoration="underline" color="blue">																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</altova:hyperlink>																									</xsl:for-each>																								</xsl:when>																								<xsl:otherwise>																									<xsl:for-each select="n1:Name">																										<altova:hyperlink href="{concat(&apos;#&apos;, ../../../n1:EncodedTableName, ../n1:Suffix)}" text-decoration="underline" color="blue">																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</altova:hyperlink>																									</xsl:for-each>																								</xsl:otherwise>																							</xsl:choose>																						</xsl:otherwise>																					</xsl:choose>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:AttributesCollection)">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Attributes</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="15cm"/>														<fo:table-column column-width="0.800cm"/>														<fo:table-column column-width="4cm"/>														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="2.900cm"/>														<xsl:variable name="altova:CurrContextGrid_8" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>No</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Attribute Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>M</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Data Type</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>DT </xsl:text>																			</fo:inline>																			<altova:line-break/>																			<fo:inline>																				<xsl:text>kind</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Domain Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:AttributesCollection">																<xsl:for-each select="n1:AttributeDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="right">																					<xsl:for-each select="n1:Sequence">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:M">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:DataType">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:DataTypeKind">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:DomainName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:AttributesCommentsCollection )">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Attributes Comments</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="6cm"/>														<fo:table-column column-width="9cm"/>														<fo:table-column column-width="9cm"/>														<xsl:variable name="altova:CurrContextGrid_9" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>No</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Attribute Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Description</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Notes</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:AttributesCommentsCollection">																<xsl:for-each select="n1:AttributeCommentsDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="right">																					<xsl:for-each select="n1:AttributeCommentsSequence">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeCommentsName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeDescription">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeNotes">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																						<altova:line-break/>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:MethodsCollection )">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Methods</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="5cm"/>														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="1cm"/>														<fo:table-column column-width="5cm"/>														<fo:table-column column-width="5cm"/>														<fo:table-column column-width="7cm"/>														<xsl:variable name="altova:CurrContextGrid_10" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>No</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Method Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>C</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>O</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Overriden Method</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Return Value</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Parameters</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:MethodsCollection">																<xsl:for-each select="n1:MethodDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="right">																					<xsl:for-each select="n1:MethodSequence">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:MethodName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:MethodConstructor">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:MethodOverriding">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:MethodOverridenMethod">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:MethodReturnValue">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:if test="count( n1:MethodParametersCollection ) != 0">																						<xsl:variable name="altova:table">																							<fo:table border-collapse="collapse" empty-cells="show" table-layout="fixed" width="100%">																								<fo:table-column column-width="3.500cm"/>																								<fo:table-column column-width="3cm"/>																								<xsl:variable name="altova:CurrContextGrid_11" select="."/>																								<xsl:variable name="altova:ColumnData"/>																								<fo:table-header start-indent="0pt">																									<fo:table-row>																										<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																											<fo:block-container overflow="hidden">																												<fo:block text-align="center">																													<fo:inline>																														<xsl:text>Name</xsl:text>																													</fo:inline>																												</fo:block>																											</fo:block-container>																										</fo:table-cell>																										<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																											<fo:block-container overflow="hidden">																												<fo:block text-align="center">																													<fo:inline>																														<xsl:text>Type</xsl:text>																													</fo:inline>																												</fo:block>																											</fo:block-container>																										</fo:table-cell>																									</fo:table-row>																								</fo:table-header>																								<fo:table-body start-indent="0pt">																									<xsl:for-each select="n1:MethodParametersCollection">																										<xsl:for-each select="n1:MethodParameterDetails">																											<fo:table-row>																												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																													<fo:block-container overflow="hidden">																														<fo:block text-align="left">																															<xsl:for-each select="n1:ParameterName">																																<altova:inline-container-substitute>																																	<xsl:apply-templates/>																																</altova:inline-container-substitute>																															</xsl:for-each>																														</fo:block>																													</fo:block-container>																												</fo:table-cell>																												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																													<fo:block-container overflow="hidden">																														<fo:block text-align="left">																															<xsl:for-each select="n1:ParameterType">																																<altova:inline-container-substitute>																																	<xsl:apply-templates/>																																</altova:inline-container-substitute>																															</xsl:for-each>																														</fo:block>																													</fo:block-container>																												</fo:table-cell>																											</fo:table-row>																										</xsl:for-each>																									</xsl:for-each>																								</fo:table-body>																							</fo:table>																						</xsl:variable>																						<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>																					</xsl:if>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:TablesCollection )">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Used In Tables</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="8cm"/>														<fo:table-column column-width="8.500cm"/>														<fo:table-column column-width="8.500cm"/>														<xsl:variable name="altova:CurrContextGrid_12" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Model Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Table Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Column Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:TablesCollection">																<xsl:for-each select="n1:TableDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ModelName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:TableName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ColumnName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:EntitiesCollection)">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Used In Entities</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="12.500cm"/>														<fo:table-column column-width="12.500cm"/>														<xsl:variable name="altova:CurrContextGrid_13" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Entity Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Attribute Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:EntitiesCollection">																<xsl:for-each select="n1:EntityDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:EntityName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>											<xsl:if test="count( n1:STCollection )">												<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt" space-before="1.12em" space-after="1.12em"/>												<fo:inline font-size="xx-small" font-style="italic">													<xsl:text>Used In Structured Types</xsl:text>												</fo:inline>												<xsl:variable name="altova:table">													<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">														<fo:table-column column-width="12.500cm"/>														<fo:table-column column-width="12.500cm"/>														<xsl:variable name="altova:CurrContextGrid_14" select="."/>														<xsl:variable name="altova:ColumnData"/>														<fo:table-header start-indent="0pt">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Structured Type Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Attribute Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:for-each select="n1:STCollection">																<xsl:for-each select="n1:STDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:STName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:AttributeName">																						<altova:inline-container-substitute>																							<xsl:apply-templates/>																						</altova:inline-container-substitute>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</fo:table-body>													</fo:table>												</xsl:variable>												<xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>											</xsl:if>										</xsl:for-each>									</xsl:for-each>								</xsl:for-each>							</xsl:for-each>						</fo:block>						<fo:block id="SV_RefID_PageTotal"/>					</fo:flow>				</fo:page-sequence>			</fo:root>		</altova:main-document>	</xsl:variable>	<xsl:template name="altova:double-backslash">		<xsl:param name="text"/>		<xsl:param name="text-length"/>		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>		<xsl:choose>			<xsl:when test="$text-after-bs-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '\'">						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>					</xsl:when>					<xsl:otherwise>						<xsl:value-of select="$text"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>				<xsl:call-template name="altova:double-backslash">					<xsl:with-param name="text" select="$text-after-bs"/>					<xsl:with-param name="text-length" select="$text-after-bs-length"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:MakeValueAbsoluteIfPixels">		<xsl:param name="sValue"/>		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>		<xsl:choose>			<xsl:when test="$sBeforePx">				<xsl:variable name="nLengthOfInteger">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="$sBeforePx"/>					</xsl:call-template>				</xsl:variable>				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>				<xsl:variable name="sRest">					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$sValue"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">		<xsl:param name="sText"/>		<xsl:variable name="sLen" select="string-length($sText)"/>		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>		<xsl:choose>			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">				<xsl:variable name="nResultOfRest">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="$nResultOfRest + 1"/>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="@* | node()" mode="altova:copy-table">		<xsl:copy>			<xsl:apply-templates select="@* | node()" mode="#current"/>		</xsl:copy>	</xsl:template>	<xsl:template match="fo:table" mode="altova:copy-table">		<xsl:choose>			<xsl:when test="(empty(fo:table-body/fo:table-row) and empty(fo:table-header/fo:table-row) and empty(fo:table-footer/fo:table-row)) or empty(.//fo:table-cell)">				</xsl:when>			<xsl:otherwise>				<xsl:copy>					<xsl:apply-templates select="@* | node()" mode="#current"/>				</xsl:copy>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="fo:table-header | fo:table-footer" mode="altova:copy-table">		<xsl:choose>			<xsl:when test="empty(fo:table-row)">				</xsl:when>			<xsl:otherwise>				<xsl:copy-of select="."/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="fo:table-body" mode="altova:copy-table">		<xsl:choose>			<xsl:when test="empty(fo:table-row)">				<xsl:copy>					<xsl:apply-templates select="@* | node()" mode="#current"/>					<fo:table-row>						<fo:table-cell>							<fo:block/>						</fo:table-cell>					</fo:table-row>				</xsl:copy>			</xsl:when>			<xsl:otherwise>				<xsl:copy-of select="."/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="fo:list-item[empty(@break-before)]" mode="second-step">		<xsl:copy>			<xsl:choose>				<xsl:when test=".//altova:page-break">					<xsl:attribute name="break-before" select="'page'"/>				</xsl:when>				<xsl:when test=".//altova:column-break">					<xsl:attribute name="break-before" select="'column'"/>				</xsl:when>			</xsl:choose>			<xsl:apply-templates select="@* | node()" mode="#current"/>		</xsl:copy>	</xsl:template>	<xsl:template match="altova:pdf-bookmark-tree[@generate-from-toc = false()]" mode="second-step">		<xsl:variable name="altova:pdf-bookmarks">			<xsl:apply-templates mode="altova:filter-pdf-bookmark-tree"/>		</xsl:variable>		<xsl:if test="exists($altova:pdf-bookmarks/fo:bookmark)">			<fo:bookmark-tree>				<xsl:copy-of select="$altova:pdf-bookmarks"/>			</fo:bookmark-tree>		</xsl:if>	</xsl:template>	<xsl:template match="node()" mode="altova:filter-pdf-bookmark-tree">		<xsl:apply-templates mode="#current"/>	</xsl:template>	<xsl:template match="altova:pdf-bookmark" mode="altova:filter-pdf-bookmark-tree">		<fo:bookmark>			<xsl:sequence select="@starting-state"/>			<xsl:variable name="altova:hyperlink" select="altova:hyperlink[1]"/>			<xsl:choose>				<xsl:when test="not(exists($altova:hyperlink))">					<xsl:message select="'Error: Found PDF bookmark without a corresponding hyperlink!'" terminate="yes"/>					<xsl:attribute name="internal-destination" select="'undefined'"/>					<fo:bookmark-title/>				</xsl:when>				<xsl:when test="not(starts-with($altova:hyperlink/@href,'#'))">					<xsl:message select="concat('Error: External bookmark destinations (',$altova:hyperlink/@href,') are not supported by FOP 0.93/1.0!')" terminate="yes"/>					<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>					<fo:bookmark-title>						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>						<xsl:value-of select="string($altova:hyperlink)"/>					</fo:bookmark-title>				</xsl:when>				<xsl:otherwise>					<xsl:variable name="altova:bookmark-name" select="substring($altova:hyperlink/@href,2)"/>					<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>					<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>					<xsl:choose>						<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">							<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>						</xsl:when>						<xsl:otherwise>							<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>							<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>							<xsl:message select="concat('Warning: External bookmark destinations (',$altova:url,') are not supported by FOP 0.93/1.0!')"/>							<xsl:attribute name="internal-destination" select="'external-destination-not-supported'"/>						</xsl:otherwise>					</xsl:choose>					<fo:bookmark-title>						<xsl:sequence select="$altova:hyperlink//@color[1] | $altova:hyperlink//@font-style[.='normal' or .='italic'][1] | $altova:hyperlink//@font-weight[.='normal' or .='bold'][1]"/>						<xsl:value-of select="string($altova:hyperlink)"/>					</fo:bookmark-title>				</xsl:otherwise>			</xsl:choose>			<xsl:if test="count(altova:hyperlink) gt 1">				<xsl:message select="concat('Error: Found PDF bookmark (',$altova:hyperlink/@href,') with more than one corresponding hyperlinks!')" terminate="yes"/>			</xsl:if>			<xsl:apply-templates mode="#current"/>		</fo:bookmark>	</xsl:template>	<xsl:template match="fo:basic-link" mode="second-step">		<xsl:choose>			<xsl:when test="count(node()) eq 1 and fo:block">				<fo:block>					<xsl:apply-templates select="fo:block[1]/@*" mode="#current"/>					<fo:basic-link>						<xsl:apply-templates select="@*" mode="#current"/>						<xsl:apply-templates select="fo:block[1]/node()" mode="#current"/>					</fo:basic-link>				</fo:block>			</xsl:when>			<xsl:otherwise>				<xsl:copy>					<xsl:apply-templates select="@* | node()" mode="#current"/>				</xsl:copy>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:function name="altova:is-node-empty" as="xs:boolean">		<xsl:param name="altova:node" as="element()"/>		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::altova:inline-container-substitute ) or boolean( $altova:child/self::fo:inline ) or boolean( $altova:child/self::fo:inline-container ) or boolean( $altova:child/self::fo:block-container ) or boolean( $altova:child/self::fo:block ) or boolean( $altova:child/self::fo:basic-link ) ) and altova:is-node-empty( $altova:child ) ) )"/>	</xsl:function>	<xsl:template match="/">		<xsl:variable name="altova:design-xslt-tree-output-without-document-sections">			<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>		</xsl:variable>		<xsl:apply-templates select="$altova:design-xslt-tree-output-without-document-sections" mode="altova:generate-document-sections"/>		<xsl:for-each select="$altova:design-xslt-tree-output-without-document-sections//altova:result-document">			<xsl:result-document href="{@url}">				<xsl:apply-templates mode="altova:generate-document-sections"/>			</xsl:result-document>		</xsl:for-each>		<xsl:for-each select="$altova:design-xslt-tree-output-without-document-sections//fo:external-graphic[exists(@altova:ImageDataBase64)]">			<xsl:result-document href="{@altova:target-url}" method="text" encoding="x-base64tobinary">				<xsl:value-of select="@altova:ImageDataBase64"/>			</xsl:result-document>		</xsl:for-each>		<xsl:if test="$altova:bGeneratingFromPxf">			<xsl:for-each select="distinct-values(for $i in $altova:design-xslt-tree-output-without-document-sections//fo:external-graphic[not(@altova:ImageDataBase64)]/@src return lower-case($i))">				<xsl:variable name="altova:sSrcUrl" select="if (starts-with(., 'url(') and ends-with(., ')')) then substring(., 5, string-length(.) - 5) else ."/>				<xsl:if test="not(starts-with($altova:sSrcUrl, 'http://') or starts-with($altova:sSrcUrl, 'ftp://'))">					<xsl:if test="unparsed-text-available($altova:sSrcUrl, 'x-binarytobase64')">						<xsl:result-document href="{$altova:sSrcUrl}" method="text" encoding="x-base64tobinary">							<xsl:value-of select="unparsed-text($altova:sSrcUrl, 'x-binarytobase64')"/>						</xsl:result-document>					</xsl:if>				</xsl:if>			</xsl:for-each>			<xsl:for-each select="distinct-values(for $i in $altova:CssImages/altova:CssImage/@altova:sUrl return lower-case($i))">				<xsl:if test="not(starts-with(., 'http://') or starts-with(., 'ftp://'))">					<xsl:if test="unparsed-text-available(., 'x-binarytobase64')">						<xsl:result-document href="{.}" method="text" encoding="x-base64tobinary">							<xsl:value-of select="unparsed-text(., 'x-binarytobase64')"/>						</xsl:result-document>					</xsl:if>				</xsl:if>			</xsl:for-each>		</xsl:if>	</xsl:template>	<xsl:template match="@* | node()" mode="altova:generate-document-sections altova:generate-document-section-copy">		<xsl:copy copy-namespaces="no">			<xsl:apply-templates select="@* | node()" mode="#current"/>		</xsl:copy>	</xsl:template>	<xsl:template match="altova:document-section" mode="altova:generate-document-section-copy">			</xsl:template>	<xsl:template match="fo:page-sequence" mode="altova:generate-document-sections">		<xsl:variable name="altova:page-sequence" select="."/>		<!-- All secondary document sections -->		<xsl:variable name="altova:document-sections" select="$altova:page-sequence//altova:document-section except $altova:page-sequence//altova:result-document//altova:document-section"/>		<xsl:variable name="nodeFirstPageSeq" select="."/>		<!-- If the first section break is requested -->		<xsl:if test="$altova:bDoFirstSectionBreak">			<!-- Place the contents of the first section in a separate page sequence -->			<xsl:copy copy-namespaces="no">				<xsl:apply-templates select="(@* except @altova:*)" mode="#current"/>				<!--						The initial document section has an even or odd number of pages depending on where the first secondary one starts						(there is at least one secondary document section, or we wouldn't be in this template						-->				<xsl:choose>					<xsl:when test="$altova:document-sections[1]/@altova:section-starts-on = 'even'">						<xsl:attribute name="force-page-count" select="'end-on-odd'"/>					</xsl:when>					<xsl:when test="$altova:document-sections[1]/@altova:section-starts-on = 'odd'">						<xsl:attribute name="force-page-count" select="'end-on-even'"/>					</xsl:when>					<xsl:otherwise>						<xsl:attribute name="force-page-count" select="'no-force'"/>					</xsl:otherwise>				</xsl:choose>				<xsl:apply-templates select="(node() except fo:flow[@flow-name='xsl-region-body'])" mode="#current"/>				<xsl:apply-templates select="fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section-default">					<xsl:with-param name="altova:document-section-path" select="$altova:document-sections[ 1 ]/ancestor-or-self::node()"/>				</xsl:apply-templates>			</xsl:copy>		</xsl:if>		<!-- Generate a page sequence for each secondary document section -->		<xsl:for-each select="$altova:document-sections">			<xsl:variable name="altova:document-section-index" select="position()"/>			<fo:page-sequence>				<xsl:apply-templates select="(@* except @altova:*)" mode="#current"/>				<xsl:choose>					<!-- If it's the last document section -->					<xsl:when test="position() = last()">						<!-- The secondary document section has even or odd number of pages depending on the document-wide setting -->						<xsl:choose>							<xsl:when test="$altova:page-sequence/@altova:DocumentEndsOn = 'even'">								<xsl:attribute name="force-page-count" select="'end-on-even'"/>							</xsl:when>							<xsl:when test="$altova:page-sequence/@altova:DocumentEndsOn = 'odd'">								<xsl:attribute name="force-page-count" select="'end-on-odd'"/>							</xsl:when>							<xsl:otherwise>								<xsl:attribute name="force-page-count" select="'no-force'"/>							</xsl:otherwise>						</xsl:choose>					</xsl:when>					<xsl:otherwise>						<!-- The secondary document section has an even or odd number of pages depending on where the next one starts -->						<xsl:choose>							<xsl:when test="$altova:document-sections[$altova:document-section-index + 1]/@altova:section-starts-on = 'even'">								<xsl:attribute name="force-page-count" select="'end-on-odd'"/>							</xsl:when>							<xsl:when test="$altova:document-sections[$altova:document-section-index + 1]/@altova:section-starts-on = 'odd'">								<xsl:attribute name="force-page-count" select="'end-on-even'"/>							</xsl:when>							<xsl:otherwise>								<xsl:attribute name="force-page-count" select="'no-force'"/>							</xsl:otherwise>						</xsl:choose>					</xsl:otherwise>				</xsl:choose>				<xsl:apply-templates select="node()" mode="#current"/>				<xsl:choose>					<!-- If the first section break is suppressed and this is the second section -->					<xsl:when test="not($altova:bDoFirstSectionBreak) and position() eq 1">						<!-- The fo:flow is created outside of the apply-templates because it needs to contain the initial document section and the first secondary one -->						<fo:flow>							<xsl:copy-of select="$altova:page-sequence/fo:flow[@flow-name='xsl-region-body']/@*"/>							<!-- Render the contents of the initial document section -->							<xsl:for-each select="$nodeFirstPageSeq">								<!--<xsl:apply-templates select="(node() except fo:flow[@flow-name='xsl-region-body'])" mode="#current"/>-->								<xsl:apply-templates select="fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section-default">									<xsl:with-param name="altova:document-section-path" select="$altova:document-sections[ 1 ]/ancestor-or-self::node()"/>									<xsl:with-param name="altova:bCopySelfAndAttributes" select="false()"/>								</xsl:apply-templates>							</xsl:for-each>							<!-- Do the same as for a regular secondary document section, but without creating an fo:flow element -->							<xsl:choose>								<xsl:when test="position()=last()">									<xsl:apply-templates select="$altova:page-sequence/fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section-last">										<xsl:with-param name="altova:document-section-path" select="current()/ancestor-or-self::node()"/>										<xsl:with-param name="altova:bCopySelfAndAttributes" select="false()"/>									</xsl:apply-templates>								</xsl:when>								<xsl:otherwise>									<xsl:variable name="altova:document-section-position" select="position()"/>									<xsl:apply-templates select="$altova:page-sequence/fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section">										<xsl:with-param name="altova:document-section-path" select="current()/ancestor-or-self::node()"/>										<xsl:with-param name="altova:next-document-section-path" select="$altova:document-sections[$altova:document-section-position+1]/ancestor-or-self::node()"/>										<xsl:with-param name="altova:bCopySelfAndAttributes" select="false()"/>									</xsl:apply-templates>								</xsl:otherwise>							</xsl:choose>						</fo:flow>					</xsl:when>					<xsl:otherwise>						<xsl:choose>							<xsl:when test="position()=last()">								<xsl:apply-templates select="$altova:page-sequence/fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section-last">									<xsl:with-param name="altova:document-section-path" select="current()/ancestor-or-self::node()"/>								</xsl:apply-templates>							</xsl:when>							<xsl:otherwise>								<xsl:variable name="altova:document-section-position" select="position()"/>								<xsl:apply-templates select="$altova:page-sequence/fo:flow[@flow-name='xsl-region-body']" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="current()/ancestor-or-self::node()"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:document-sections[$altova:document-section-position+1]/ancestor-or-self::node()"/>								</xsl:apply-templates>							</xsl:otherwise>						</xsl:choose>					</xsl:otherwise>				</xsl:choose>			</fo:page-sequence>		</xsl:for-each>	</xsl:template>	<xsl:template match="@* | node()" mode="altova:generate-document-section">		<xsl:param name="altova:document-section-path"/>		<xsl:param name="altova:next-document-section-path"/>		<xsl:param name="altova:bCopySelfAndAttributes" select="true()"/>		<xsl:choose>			<xsl:when test="$altova:bCopySelfAndAttributes">				<xsl:copy copy-namespaces="no">					<xsl:apply-templates select="@*" mode="altova:generate-document-section-copy"/>					<xsl:variable name="altova:first-node" select="node() intersect $altova:document-section-path"/>					<xsl:variable name="altova:last-node" select="node() intersect $altova:next-document-section-path"/>					<xsl:choose>						<xsl:when test="$altova:first-node and ( $altova:first-node is $altova:last-node )">							<xsl:if test="not($altova:first-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>								</xsl:apply-templates>							</xsl:if>						</xsl:when>						<xsl:when test="$altova:first-node and $altova:last-node">							<xsl:if test="not($altova:first-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>								</xsl:apply-templates>							</xsl:if>							<xsl:apply-templates select="$altova:first-node/following-sibling::node()[ . &lt;&lt; $altova:last-node ]" mode="altova:generate-document-section-copy"/>							<xsl:if test="not($altova:last-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>								</xsl:apply-templates>							</xsl:if>						</xsl:when>						<xsl:when test="$altova:first-node">							<xsl:if test="not($altova:first-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>								</xsl:apply-templates>							</xsl:if>							<xsl:apply-templates select="$altova:first-node/following-sibling::node()" mode="altova:generate-document-section-copy"/>						</xsl:when>						<xsl:when test="$altova:last-node">							<xsl:apply-templates select="$altova:last-node/preceding-sibling::node()" mode="altova:generate-document-section-copy"/>							<xsl:if test="not($altova:last-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>									<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>								</xsl:apply-templates>							</xsl:if>						</xsl:when>						<xsl:otherwise>							<xsl:apply-templates select="node()" mode="altova:generate-document-section-copy"/>						</xsl:otherwise>					</xsl:choose>				</xsl:copy>			</xsl:when>			<xsl:otherwise>				<xsl:variable name="altova:first-node" select="node() intersect $altova:document-section-path"/>				<xsl:variable name="altova:last-node" select="node() intersect $altova:next-document-section-path"/>				<xsl:choose>					<xsl:when test="$altova:first-node and ( $altova:first-node is $altova:last-node )">						<xsl:if test="not($altova:first-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>							</xsl:apply-templates>						</xsl:if>					</xsl:when>					<xsl:when test="$altova:first-node and $altova:last-node">						<xsl:if test="not($altova:first-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>							</xsl:apply-templates>						</xsl:if>						<xsl:apply-templates select="$altova:first-node/following-sibling::node()[ . &lt;&lt; $altova:last-node ]" mode="altova:generate-document-section-copy"/>						<xsl:if test="not($altova:last-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>							</xsl:apply-templates>						</xsl:if>					</xsl:when>					<xsl:when test="$altova:first-node">						<xsl:if test="not($altova:first-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>							</xsl:apply-templates>						</xsl:if>						<xsl:apply-templates select="$altova:first-node/following-sibling::node()" mode="altova:generate-document-section-copy"/>					</xsl:when>					<xsl:when test="$altova:last-node">						<xsl:apply-templates select="$altova:last-node/preceding-sibling::node()" mode="altova:generate-document-section-copy"/>						<xsl:if test="not($altova:last-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>							</xsl:apply-templates>						</xsl:if>					</xsl:when>					<xsl:otherwise>						<xsl:apply-templates select="node()" mode="altova:generate-document-section-copy"/>					</xsl:otherwise>				</xsl:choose>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="fo:table" mode="altova:generate-document-section">		<xsl:param name="altova:document-section-path"/>		<xsl:param name="altova:next-document-section-path"/>		<xsl:copy copy-namespaces="no">			<xsl:apply-templates select="@*" mode="altova:generate-document-section-copy"/>			<xsl:if test="exists( $altova:next-document-section-path intersect current() )">				<xsl:apply-templates select="fo:table-column" mode="altova:generate-document-sections"/>			</xsl:if>			<xsl:apply-templates select="(node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) and empty( preceding-sibling::node() intersect $altova:next-document-section-path ) ]" mode="#current">				<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>				<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>			</xsl:apply-templates>		</xsl:copy>	</xsl:template>	<xsl:template match="fo:table-row" mode="altova:generate-document-section">		<xsl:param name="altova:document-section-path"/>		<xsl:param name="altova:next-document-section-path"/>		<xsl:if test="empty( $altova:next-document-section-path intersect current() )">			<xsl:copy copy-namespaces="no">				<xsl:choose>					<xsl:when test="exists( $altova:document-section-path intersect current() )">						<xsl:apply-templates select="@* | node()" mode="#current">							<xsl:with-param name="altova:document-section-path" select="()"/>							<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>						</xsl:apply-templates>					</xsl:when>					<xsl:otherwise>						<xsl:apply-templates select="(node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) and empty( preceding-sibling::node() intersect $altova:next-document-section-path ) ]" mode="#current">							<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>							<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>						</xsl:apply-templates>					</xsl:otherwise>				</xsl:choose>			</xsl:copy>		</xsl:if>	</xsl:template>	<xsl:template match="fo:list-item" mode="altova:generate-document-section">		<xsl:param name="altova:document-section-path"/>		<xsl:param name="altova:next-document-section-path"/>		<xsl:if test="empty( $altova:next-document-section-path intersect current() )">			<xsl:copy copy-namespaces="no">				<xsl:choose>					<xsl:when test="exists( $altova:document-section-path intersect current() )">						<xsl:apply-templates select="@* | node()" mode="#current">							<xsl:with-param name="altova:document-section-path" select="()"/>							<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>						</xsl:apply-templates>					</xsl:when>					<xsl:otherwise>						<xsl:apply-templates select="(node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) and empty( preceding-sibling::node() intersect $altova:next-document-section-path ) ]" mode="#current">							<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>							<xsl:with-param name="altova:next-document-section-path" select="$altova:next-document-section-path"/>						</xsl:apply-templates>					</xsl:otherwise>				</xsl:choose>			</xsl:copy>		</xsl:if>	</xsl:template>	<xsl:template match="@* | node()" mode="altova:generate-document-section-default">		<xsl:param name="altova:document-section-path"/>		<xsl:param name="altova:bCopySelfAndAttributes" select="true()"/>		<xsl:choose>			<xsl:when test="$altova:bCopySelfAndAttributes">				<xsl:copy copy-namespaces="no">					<xsl:apply-templates select="@*" mode="altova:generate-document-section-copy"/>					<xsl:variable name="altova:last-node" select="node() intersect $altova:document-section-path"/>					<xsl:choose>						<xsl:when test="$altova:last-node">							<xsl:apply-templates select="$altova:last-node/preceding-sibling::node()" mode="altova:generate-document-section-copy"/>							<xsl:if test="not($altova:last-node/self::altova:document-section)">								<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section-default">									<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>								</xsl:apply-templates>							</xsl:if>						</xsl:when>						<xsl:otherwise>							<xsl:apply-templates select="node()" mode="altova:generate-document-section-copy"/>						</xsl:otherwise>					</xsl:choose>				</xsl:copy>			</xsl:when>			<xsl:otherwise>				<xsl:variable name="altova:last-node" select="node() intersect $altova:document-section-path"/>				<xsl:choose>					<xsl:when test="$altova:last-node">						<xsl:apply-templates select="$altova:last-node/preceding-sibling::node()" mode="altova:generate-document-section-copy"/>						<xsl:if test="not($altova:last-node/self::altova:document-section)">							<xsl:apply-templates select="$altova:last-node" mode="altova:generate-document-section-default">								<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>							</xsl:apply-templates>						</xsl:if>					</xsl:when>					<xsl:otherwise>						<xsl:apply-templates select="node()" mode="altova:generate-document-section-copy"/>					</xsl:otherwise>				</xsl:choose>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="fo:table-row" mode="altova:generate-document-section-default">		<xsl:param name="altova:document-section-path"/>		<xsl:if test="empty( $altova:document-section-path intersect current() )">			<xsl:copy copy-namespaces="no">				<xsl:apply-templates select="@* | ( node() except altova:document-section )" mode="altova:generate-document-section-copy"/>			</xsl:copy>		</xsl:if>	</xsl:template>	<xsl:template match="fo:list-item" mode="altova:generate-document-section-default">		<xsl:param name="altova:document-section-path"/>		<xsl:if test="empty( $altova:document-section-path intersect current() )">			<xsl:copy copy-namespaces="no">				<xsl:apply-templates select="@* | ( node() except altova:document-section )" mode="altova:generate-document-section-copy"/>			</xsl:copy>		</xsl:if>	</xsl:template>	<xsl:template match="@* | node()" mode="altova:generate-document-section-last">		<xsl:param name="altova:document-section-path"/>		<xsl:copy copy-namespaces="no">			<xsl:apply-templates select="@*" mode="altova:generate-document-section-copy"/>			<xsl:variable name="altova:first-node" select="node() intersect $altova:document-section-path"/>			<xsl:choose>				<xsl:when test="$altova:first-node">					<xsl:if test="not($altova:first-node/self::altova:document-section)">						<xsl:apply-templates select="$altova:first-node" mode="altova:generate-document-section-last">							<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>						</xsl:apply-templates>					</xsl:if>					<xsl:apply-templates select="$altova:first-node/following-sibling::node()" mode="altova:generate-document-section-copy"/>				</xsl:when>				<xsl:otherwise>					<xsl:apply-templates select="node()" mode="altova:generate-document-section-copy"/>				</xsl:otherwise>			</xsl:choose>		</xsl:copy>	</xsl:template>	<xsl:template match="fo:table" mode="altova:generate-document-section-last">		<xsl:param name="altova:document-section-path"/>		<xsl:copy copy-namespaces="no">			<xsl:apply-templates select="@*" mode="altova:generate-document-section-copy"/>			<xsl:if test="exists( $altova:document-section-path intersect current() )">				<xsl:apply-templates select="fo:table-column" mode="altova:generate-document-sections"/>			</xsl:if>			<xsl:apply-templates select="(node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) ]" mode="#current">				<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>			</xsl:apply-templates>		</xsl:copy>	</xsl:template>	<xsl:template match="fo:table-row" mode="altova:generate-document-section-last">		<xsl:param name="altova:document-section-path"/>		<xsl:copy copy-namespaces="no">			<xsl:choose>				<xsl:when test="exists( $altova:document-section-path intersect current() )">					<xsl:apply-templates select="@* | node()" mode="#current">						<xsl:with-param name="altova:document-section-path" select="()"/>					</xsl:apply-templates>				</xsl:when>				<xsl:otherwise>					<xsl:apply-templates select="@* | (node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) ]" mode="#current">						<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>					</xsl:apply-templates>				</xsl:otherwise>			</xsl:choose>		</xsl:copy>	</xsl:template>	<xsl:template match="fo:list-item" mode="altova:generate-document-section-last">		<xsl:param name="altova:document-section-path"/>		<xsl:copy copy-namespaces="no">			<xsl:choose>				<xsl:when test="exists( $altova:document-section-path intersect current() )">					<xsl:apply-templates select="@* | node()" mode="#current">						<xsl:with-param name="altova:document-section-path" select="()"/>					</xsl:apply-templates>				</xsl:when>				<xsl:otherwise>					<xsl:apply-templates select="@* | (node() except altova:document-section)[ empty( following-sibling::node() intersect $altova:document-section-path ) ]" mode="#current">						<xsl:with-param name="altova:document-section-path" select="$altova:document-section-path"/>					</xsl:apply-templates>				</xsl:otherwise>			</xsl:choose>		</xsl:copy>	</xsl:template>	<xsl:template match="altova:result-document" mode="altova:generate-document-section altova:generate-document-section-copy altova:generate-document-section-default altova:generate-document-section-last">			</xsl:template>	<xsl:template match="altova:bookmark" mode="second-step">		<xsl:variable name="bookmark-content">			<altova:bookmark>				<xsl:apply-templates select="node()" mode="#current"/>			</altova:bookmark>		</xsl:variable>		<xsl:choose>			<xsl:when test="altova:is-node-empty($bookmark-content/altova:bookmark)">				<fo:block>					<xsl:apply-templates select="@*" mode="#current"/>					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>				</fo:block>			</xsl:when>			<xsl:otherwise>				<fo:inline>					<xsl:apply-templates select="@*" mode="#current"/>					<xsl:copy-of select="$bookmark-content/altova:bookmark/node()"/>				</fo:inline>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:key name="altova:bookmark-key" match="altova:bookmark" use="@name"/>	<xsl:template match="altova:bookmark/@name" mode="second-step">		<xsl:attribute name="id" select="."/>	</xsl:template>	<xsl:template match="altova:hyperlink" mode="second-step">		<fo:basic-link>			<xsl:apply-templates select="@* | node()" mode="#current"/>		</fo:basic-link>	</xsl:template>	<xsl:template match="altova:hyperlink/@href" mode="second-step">		<xsl:choose>			<xsl:when test="not(string(.))">				<xsl:attribute name="external-destination" select="'url()'"/>			</xsl:when>			<xsl:when test="starts-with(.,'#')">				<xsl:variable name="altova:bookmark-name" select="substring(.,2)"/>				<xsl:variable name="altova:source-document" select="ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>				<xsl:variable name="altova:target-document" select="key('altova:bookmark-key',$altova:bookmark-name,$altova:design-xslt-tree-view)[1]/ancestor::*[self::altova:result-document | self::altova:main-document][1]"/>				<xsl:choose>					<xsl:when test="empty($altova:target-document) or $altova:source-document is $altova:target-document">						<xsl:attribute name="internal-destination" select="$altova:bookmark-name"/>					</xsl:when>					<xsl:otherwise>						<xsl:variable name="altova:relative-path" select="altova:calc-relative-path($altova:source-document/@url,$altova:target-document/@url)"/>						<xsl:variable name="altova:url" select="concat(substring($altova:relative-path,1,string-length($altova:relative-path) - 3),'.pdf#dest=',$altova:bookmark-name)"/>						<xsl:variable name="altova:escaped-url">							<xsl:call-template name="altova:double-backslash">								<xsl:with-param name="text" select="$altova:url"/>								<xsl:with-param name="text-length" select="string-length($altova:url)"/>							</xsl:call-template>						</xsl:variable>						<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:variable name="altova:escaped-url">					<xsl:choose>						<xsl:when test="starts-with(.,'\\') or substring(.,2,1)=':'">							<xsl:value-of select="iri-to-uri(concat('file:///',translate(.,'\','/')))"/>						</xsl:when>						<xsl:otherwise>							<xsl:value-of select="iri-to-uri(.)"/>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:attribute name="external-destination" select="concat('url(',$altova:escaped-url,')')"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="altova:inline-container-substitute" mode="second-step">		<xsl:choose>			<xsl:when test="altova:IsInline(.)">				<fo:inline>					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>					<xsl:apply-templates mode="second-step"/>				</fo:inline>			</xsl:when>			<xsl:otherwise>				<fo:block>					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>					<xsl:apply-templates mode="second-step"/>				</fo:block>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:function name="altova:IsInline" as="xs:boolean">		<xsl:param name="nodePassed" as="node()"/>		<xsl:choose>			<xsl:when test="(empty(for $i in $nodePassed/child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) and (every $i in $nodePassed/altova:inline-container-substitute satisfies altova:IsInline($i))) or name($nodePassed/../..) eq 'fo:list-item-body'">				<xsl:sequence select="true()"/>			</xsl:when>			<xsl:otherwise>				<xsl:sequence select="false()"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:template match="altova:main-document" mode="second-step">		<xsl:apply-templates mode="#current"/>	</xsl:template>	<xsl:template match="altova:basic-link-container" mode="second-step">		<fo:block text-align-last="justify">			<xsl:apply-templates mode="second-step"/>		</fo:block>	</xsl:template>	<xsl:template match="altova:page-break" mode="second-step">		<xsl:if test="empty(ancestor::fo:list-item)">			<fo:block break-after="page"/>		</xsl:if>	</xsl:template>	<xsl:template match="altova:line-break" mode="second-step">		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:line-break' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:line-break'">			<fo:block>				<xsl:if test="($name-preceding-sibling != 'altova:inline-container-substitute' and $name-preceding-sibling != 'fo:inline' and $name-preceding-sibling != 'fo:basic-link' and $name-preceding-sibling != 'altova:bookmark' and $name-preceding-sibling != 'altova:hyperlink') or ($name-following-sibling != 'altova:inline-container-substitute' and $name-following-sibling != 'fo:inline' and $name-following-sibling != 'fo:basic-link' and $name-following-sibling != 'altova:bookmark' and $name-following-sibling != 'altova:hyperlink')">					<fo:leader leader-pattern="space"/>				</xsl:if>			</fo:block>		</xsl:if>	</xsl:template>	<xsl:template match="altova:column-break" mode="second-step">		<xsl:if test="empty(ancestor::fo:list-item)">			<fo:block break-after="column"/>		</xsl:if>	</xsl:template>	<xsl:function name="altova:calc-relative-path" as="xs:string">		<xsl:param name="altova:source-path"/>		<xsl:param name="altova:target-path"/>		<xsl:choose>			<xsl:when test="$altova:source-path = $altova:target-path">				<xsl:sequence select="''"/>			</xsl:when>			<xsl:when test="starts-with($altova:target-path,'http:') or starts-with($altova:target-path,'ftp:') or starts-with($altova:target-path,'file:')">				<xsl:sequence select="$altova:target-path"/>			</xsl:when>			<xsl:otherwise>				<xsl:variable name="altova:source-parts" select="tokenize($altova:source-path,'[/\\]')"/>				<xsl:variable name="altova:target-parts" select="tokenize($altova:target-path,'[/\\]')"/>				<xsl:variable name="altova:common-part-count" select="sum(for $i in (1 to count($altova:source-parts) - 1) return if( subsequence($altova:source-parts,1,$i) = subsequence($altova:target-parts,1,$i) ) then 1 else 0)"/>				<xsl:sequence select="string-join((for $i in ($altova:common-part-count + 1 to count($altova:source-parts) - 1) return '..',for $i in ($altova:common-part-count + 1 to count($altova:target-parts)) return $altova:target-parts[$i]),'/')"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:map-preview-filepath" as="xs:string">		<xsl:param name="filepath"/>		<xsl:sequence select="altovaext:create-temp-file-mapping($filepath)" use-when="function-available('altovaext:create-temp-file-mapping',1)"/>		<xsl:sequence select="$filepath" use-when="not(function-available('altovaext:create-temp-file-mapping',1))"/>	</xsl:function>	<xsl:template match="*|@*|comment()|processing-instruction()" mode="second-step">		<xsl:copy>			<xsl:apply-templates select="node()|@* except @altova-DisableOutputEscaping" mode="second-step"/>		</xsl:copy>	</xsl:template>	<xsl:template match="text()" mode="second-step">		<xsl:choose>			<xsl:when test="../@altova-DisableOutputEscaping">				<xsl:value-of select="." disable-output-escaping="yes"/>			</xsl:when>			<xsl:otherwise>				<xsl:copy/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="altova:number" mode="second-step">		<xsl:number level="single" count="altova:dummy-list-item | fo:list-item" format="{@format}" from="fo:list-block"/>	</xsl:template>	<xsl:template match="altova:dummy-list-item" mode="second-step">		</xsl:template>	<xsl:function name="altova:AddCompositeStyles">		<xsl:param name="altova:sStyleList" as="xs:string?"/>		<xsl:variable name="altova:seqStyles" select="tokenize($altova:sStyleList, ';')" as="xs:string*"/>		<xsl:for-each select="$altova:seqStyles">			<xsl:variable name="altova:sStyleName" select="normalize-space(substring-before(., ':'))" as="xs:string?"/>			<xsl:variable name="altova:sStyleValue" as="xs:string?">				<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">					<xsl:with-param name="sValue" select="normalize-space(substring-after(., ':'))"/>				</xsl:call-template>			</xsl:variable>			<xsl:if test="$altova:sStyleName and $altova:sStyleValue">				<xsl:attribute name="{$altova:sStyleName}" select="$altova:sStyleValue"/>			</xsl:if>		</xsl:for-each>	</xsl:function>	<xsl:function name="altova:AddDynamicClassStyles">		<xsl:param name="altova:sClassName" as="xs:string?"/>		<xsl:variable name="nodeRule" select="$altova:nodeCssClasses/Class[@sSelector eq $altova:sClassName and ($altova:sCssSwitch eq '' or @sFile eq $altova:sCssSwitch)]" as="node()*"/>		<xsl:if test="$nodeRule">			<xsl:copy-of select="$nodeRule/Styles/@*"/>		</xsl:if>	</xsl:function>	<xsl:function name="altova:GetChartYValuesForSingleSeries">		<xsl:param name="seqCategoryLeafPos" as="node()*"/>		<xsl:param name="nodeSeriesLeafPos" as="node()"/>		<xsl:param name="bValuesInCategory" as="xs:boolean"/>		<xsl:for-each select="$seqCategoryLeafPos">			<xsl:element name="altova:Value">				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>			</xsl:element>		</xsl:for-each>	</xsl:function>	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">		<xsl:param name="nodeSeriesLeafPos" as="node()"/>		<xsl:param name="nodeCategoryLeafPos" as="node()"/>		<xsl:param name="bValuesInCategory" as="xs:boolean"/>		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>		<xsl:choose>			<xsl:when test="count($altova:sCommonContextId) gt 1">				<xsl:message select="concat('Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>			</xsl:when>			<xsl:when test="count($altova:sCommonContextId) lt 1">				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>				<xsl:sequence select="'altova:no-value'"/>			</xsl:when>			<xsl:when test="$bValuesInCategory">				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>			</xsl:when>			<xsl:otherwise>				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">		<xsl:param name="nodeParam" as="node()"/>		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>	</xsl:function>	<xsl:function name="altova:convert-length-to-pixel" as="xs:decimal">		<xsl:param name="altova:length"/>		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>		<xsl:choose>			<xsl:when test="ends-with($normLength, 'px')">				<xsl:value-of select="substring-before($normLength, 'px')"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'in')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * $altova:nPxPerIn"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'cm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * $altova:nPxPerIn div 2.54"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'mm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'mm')) * $altova:nPxPerIn div 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pt')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * $altova:nPxPerIn div 72.0"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pc')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * $altova:nPxPerIn div 6.0"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$normLength"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:convert-length-to-mm" as="xs:decimal">		<xsl:param name="altova:length"/>		<xsl:variable name="normLength" select="normalize-space($altova:length)"/>		<xsl:choose>			<xsl:when test="ends-with($normLength, 'px')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'px')) div $altova:nPxPerIn * 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'in')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'in')) * 25.4"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'cm')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'cm')) * 10"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'mm')">				<xsl:value-of select="substring-before($normLength, 'mm') "/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pt')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pt')) * 25.4 div 72.0"/>			</xsl:when>			<xsl:when test="ends-with($normLength, 'pc')">				<xsl:value-of select="xs:decimal(substring-before($normLength, 'pc')) * 25.4 div 6.0"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="number($normLength) div $altova:nPxPerIn * 25.4"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:variable name="altova:nDefaultFontSizePt" as="xs:integer" select="12"/>	<xsl:variable name="altova:nCmPerIn" as="xs:double" select="2.54"/>	<xsl:variable name="altova:nPercentPerEm" as="xs:integer" select="100"/>	<xsl:variable name="altova:nPercentPerEx" as="xs:integer" select="50"/>	<xsl:variable name="altova:nPtPerPc" as="xs:integer" select="12"/>	<xsl:variable name="altova:nPtPerIn" as="xs:integer" select="72"/>	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded" as="xs:double">		<xsl:param name="sLength" as="xs:string"/>		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), true())"/>	</xsl:function>	<xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded_AbsentOk" as="xs:double">		<xsl:param name="sLength" as="xs:string?"/>		<xsl:choose>			<xsl:when test="not($sLength)">0</xsl:when>			<xsl:otherwise>				<xsl:value-of select="altova:MapLengthUnitEmExPercentToPointsUnrounded($sLength)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded" as="xs:double">		<xsl:param name="sLength" as="xs:string"/>		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), false())"/>	</xsl:function>	<xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded_AbsentOk" as="xs:double">		<xsl:param name="sLength" as="xs:string?"/>		<xsl:choose>			<xsl:when test="not($sLength)">0</xsl:when>			<xsl:otherwise>				<xsl:value-of select="altova:MapLengthUnitEmExToPointsUnrounded($sLength)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded" as="xs:double">		<xsl:param name="sLength" as="xs:string"/>		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), true())"/>	</xsl:function>	<xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded_AbsentOk" as="xs:double">		<xsl:param name="sLength" as="xs:string?"/>		<xsl:choose>			<xsl:when test="not($sLength)">0</xsl:when>			<xsl:otherwise>				<xsl:value-of select="altova:MapLengthUnitPercentToPointsUnrounded($sLength)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapLengthUnitToPointsUnrounded" as="xs:double">		<xsl:param name="sLength" as="xs:string"/>		<xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>	</xsl:function>	<xsl:function name="altova:MapLengthUnitToPointsUnrounded_AbsentOk" as="xs:double">		<xsl:param name="sLength" as="xs:string?"/>		<xsl:choose>			<xsl:when test="not($sLength)">0</xsl:when>			<xsl:otherwise>				<xsl:value-of select="altova:MapLengthUnitToPointsUnrounded($sLength)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapLengthUnitToPointsUnroundedCore" as="xs:double">		<xsl:param name="sLength" as="xs:string"/>		<xsl:param name="bAcceptEmEx" as="xs:boolean"/>		<xsl:param name="bAcceptPercent" as="xs:boolean"/>		<xsl:variable name="sLengthNormalized" as="xs:string" select="normalize-space($sLength)"/>		<xsl:choose>			<xsl:when test="matches($sLengthNormalized, '^\d+(\.\d+)?[a-zA-Z%]+$')">				<xsl:variable name="nValue" select="number(replace($sLengthNormalized, '([a-zA-Z%])+', ''))"/>				<xsl:variable name="sUnit" select="replace($sLengthNormalized, '(\d+(\.\d+)?)', '')"/>				<xsl:choose>					<xsl:when test="$sUnit = 'cm'">						<xsl:value-of select="altova:MapUnitCmToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'in'">						<xsl:value-of select="altova:MapUnitInToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'mm'">						<xsl:value-of select="altova:MapUnitMmToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'pc'">						<xsl:value-of select="altova:MapUnitPcToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'pt'">						<xsl:value-of select="$nValue"/>					</xsl:when>					<xsl:when test="$sUnit = 'px'">						<xsl:value-of select="altova:MapUnitPxToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'em' and $bAcceptEmEx = true()">						<xsl:value-of select="altova:MapUnitEmToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = 'ex' and $bAcceptEmEx = true()">						<xsl:value-of select="altova:MapUnitExToPt($nValue)"/>					</xsl:when>					<xsl:when test="$sUnit = '%' and $bAcceptPercent = true()">						<xsl:value-of select="altova:MapUnitPercentToPt($nValue)"/>					</xsl:when>					<xsl:otherwise>						<xsl:value-of select="-1"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="-1"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapLengthUnitToPointsWithUnit" as="xs:string">		<xsl:param name="sLength" as="xs:string"/>		<xsl:variable name="dPoints" as="xs:double" select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>		<xsl:sequence select="concat(xs:string(round($dPoints * 100) div 100), 'pt')"/>	</xsl:function>	<xsl:function name="altova:MapLengthUnitToPointsWithUnit_AbsentOk" as="xs:string">		<xsl:param name="sLength" as="xs:string?"/>		<xsl:choose>			<xsl:when test="not($sLength)">0</xsl:when>			<xsl:otherwise>				<xsl:value-of select="altova:MapLengthUnitToPointsWithUnit($sLength)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function>	<xsl:function name="altova:MapUnitCmToPt" as="xs:double">		<xsl:param name="dCm" as="xs:double"/>		<xsl:sequence select="altova:MapUnitInToPt($dCm div $altova:nCmPerIn)"/>	</xsl:function>	<xsl:function name="altova:MapUnitEmToPt" as="xs:double">		<xsl:param name="dEm" as="xs:double"/>		<xsl:sequence select="altova:MapUnitPercentToPt($dEm * $altova:nPercentPerEm)"/>	</xsl:function>	<xsl:function name="altova:MapUnitExToPt" as="xs:double">		<xsl:param name="dEx" as="xs:double"/>		<xsl:sequence select="altova:MapUnitPercentToPt($dEx * $altova:nPercentPerEx)"/>	</xsl:function>	<xsl:function name="altova:MapUnitInToPt" as="xs:double">		<xsl:param name="dIn" as="xs:double"/>		<xsl:sequence select="$dIn * $altova:nPtPerIn"/>	</xsl:function>	<xsl:function name="altova:MapUnitMmToPt" as="xs:double">		<xsl:param name="dMm" as="xs:double"/>		<xsl:sequence select="altova:MapUnitCmToPt($dMm div 10)"/>	</xsl:function>	<xsl:function name="altova:MapUnitPcToPt" as="xs:double">		<xsl:param name="dPc" as="xs:double"/>		<xsl:sequence select="$dPc * $altova:nPtPerPc"/>	</xsl:function>	<xsl:function name="altova:MapUnitPercentToPt" as="xs:double">		<xsl:param name="dPercent" as="xs:double"/>		<xsl:sequence select="$dPercent div 100 * $altova:nDefaultFontSizePt"/>	</xsl:function>	<xsl:function name="altova:MapUnitPxToPt" as="xs:double">		<xsl:param name="dPx" as="xs:double"/>		<xsl:sequence select="$dPx div $altova:nPxPerIn * $altova:nPtPerIn"/>	</xsl:function>	<xsl:function name="altova:Sqrt" as="xs:double">		<xsl:param name="nValue" as="xs:double"/>		<xsl:sequence select="altova:SqrtRecursive($nValue, $nValue)"/>	</xsl:function>	<xsl:function name="altova:SqrtRecursive" as="xs:double">		<xsl:param name="nValue" as="xs:double"/>		<xsl:param name="nApprox" as="xs:double"/>		<xsl:choose>			<xsl:when test="abs($nApprox * $nApprox - $nValue) lt 0.01">				<xsl:sequence select="$nApprox"/>			</xsl:when>			<xsl:otherwise>				<xsl:sequence select="altova:SqrtRecursive($nValue, ($nValue div $nApprox + $nApprox) div 2)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:function></xsl:stylesheet>