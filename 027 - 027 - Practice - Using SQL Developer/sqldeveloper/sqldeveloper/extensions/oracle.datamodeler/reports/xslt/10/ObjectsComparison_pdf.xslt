<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/objectscomparison" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>	<xsl:param name="SV_OutputFormat" select="'PDF'"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="fo:layout-master-set">		<fo:layout-master-set>			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="29.70cm" page-width="21cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:page-sequence-master master-name="page-master-0">				<fo:repeatable-page-master-alternatives>					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>				</fo:repeatable-page-master-alternatives>			</fo:page-sequence-master>		</fo:layout-master-set>	</xsl:variable>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:template match="/">		<fo:root>			<xsl:copy-of select="$fo:layout-master-set"/>			<fo:declarations>				<x:xmpmeta xmlns:x="adobe:ns:meta/">					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)</xmp:CreatorTool>						</rdf:Description>					</rdf:RDF>				</x:xmpmeta>			</fo:declarations>			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">				<fo:static-content flow-name="odd-page-footer">					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">						<fo:block font-family="Tahoma" font-size="xx-small">							<fo:inline-container>								<fo:block>									<xsl:text>&#x200B;</xsl:text>								</fo:block>							</fo:inline-container>							<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">								<fo:table-column column-width="19cm"/>								<fo:table-column column-width="3cm"/>								<fo:table-column column-width="3cm"/>								<xsl:variable name="altova:CurrContextGrid_1" select="."/>								<fo:table-body start-indent="0pt">									<xsl:variable name="altova:tablerows">										<fo:table-row>											<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<xsl:for-each select="$XML">															<xsl:for-each select="n1:Objects">																<xsl:for-each select="n1:CompanyName">																	<xsl:variable name="value-of-template_2">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_2),'&#x200B;')">																			<fo:block>																				<xsl:copy-of select="$value-of-template_2"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline>																				<xsl:copy-of select="$value-of-template_2"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</xsl:for-each>														</xsl:for-each>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="right">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Oracle Data Modeler&#160; |</xsl:text>															</fo:inline>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Page: </xsl:text>															</fo:inline>															<fo:page-number/>															<fo:inline>																<xsl:text> / </xsl:text>															</fo:inline>															<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>										</fo:table-row>									</xsl:variable>									<xsl:choose>										<xsl:when test="string($altova:tablerows)">											<xsl:copy-of select="$altova:tablerows"/>										</xsl:when>										<xsl:otherwise>											<fo:table-row>												<fo:table-cell>													<fo:block/>												</fo:table-cell>											</fo:table-row>										</xsl:otherwise>									</xsl:choose>								</fo:table-body>							</fo:table>						</fo:block>					</fo:block-container>				</fo:static-content>				<fo:static-content flow-name="even-page-footer">					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">						<fo:block font-family="Tahoma" font-size="xx-small">							<fo:inline-container>								<fo:block>									<xsl:text>&#x200B;</xsl:text>								</fo:block>							</fo:inline-container>							<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">								<fo:table-column column-width="19cm"/>								<fo:table-column column-width="3cm"/>								<fo:table-column column-width="3cm"/>								<xsl:variable name="altova:CurrContextGrid_1" select="."/>								<fo:table-body start-indent="0pt">									<xsl:variable name="altova:tablerows">										<fo:table-row>											<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<xsl:for-each select="$XML">															<xsl:for-each select="n1:Objects">																<xsl:for-each select="n1:CompanyName">																	<xsl:variable name="value-of-template_2">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_2),'&#x200B;')">																			<fo:block>																				<xsl:copy-of select="$value-of-template_2"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline>																				<xsl:copy-of select="$value-of-template_2"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</xsl:for-each>														</xsl:for-each>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="right">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Oracle Data Modeler&#160; |</xsl:text>															</fo:inline>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Page: </xsl:text>															</fo:inline>															<fo:page-number/>															<fo:inline>																<xsl:text> / </xsl:text>															</fo:inline>															<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>										</fo:table-row>									</xsl:variable>									<xsl:choose>										<xsl:when test="string($altova:tablerows)">											<xsl:copy-of select="$altova:tablerows"/>										</xsl:when>										<xsl:otherwise>											<fo:table-row>												<fo:table-cell>													<fo:block/>												</fo:table-cell>											</fo:table-row>										</xsl:otherwise>									</xsl:choose>								</fo:table-body>							</fo:table>						</fo:block>					</fo:block-container>				</fo:static-content>				<fo:flow flow-name="xsl-region-body">					<fo:block font-family="Tahoma" font-size="xx-small">						<xsl:for-each select="$XML">							<xsl:for-each select="n1:Objects">								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:block margin-right="100% - 100%" text-align="center" space-before="0" space-after="0" margin="0pt">									<xsl:for-each select="n1:ReportCaption">										<xsl:variable name="value-of-template_3">											<xsl:apply-templates/>										</xsl:variable>										<xsl:choose>											<xsl:when test="contains(string($value-of-template_3),'&#x200B;')">												<fo:block font-size="medium" text-align="center">													<xsl:copy-of select="$value-of-template_3"/>												</fo:block>											</xsl:when>											<xsl:otherwise>												<fo:inline font-size="medium" text-align="center">													<xsl:copy-of select="$value-of-template_3"/>												</fo:inline>											</xsl:otherwise>										</xsl:choose>									</xsl:for-each>								</fo:block>								<fo:block>									<fo:leader leader-pattern="space"/>								</fo:block>								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>								<xsl:if test="string-length(n1:DesignName) &gt; 0">									<fo:block>										<fo:leader leader-pattern="space"/>									</fo:block>									<fo:inline-container>										<fo:block>											<xsl:text>&#x200B;</xsl:text>										</fo:block>									</fo:inline-container>									<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">										<fo:table-column column-width="4cm"/>										<fo:table-column column-width="13cm"/>										<xsl:variable name="altova:CurrContextGrid_4" select="."/>										<fo:table-body start-indent="0pt">											<xsl:variable name="altova:tablerows">												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Design Name</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:DesignName">																	<xsl:variable name="value-of-template_5">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_5),'&#x200B;')">																			<fo:block>																				<xsl:copy-of select="$value-of-template_5"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline>																				<xsl:copy-of select="$value-of-template_5"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Source Model</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:SourceModelName">																	<xsl:variable name="value-of-template_6">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_6),'&#x200B;')">																			<fo:block>																				<xsl:copy-of select="$value-of-template_6"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline>																				<xsl:copy-of select="$value-of-template_6"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>												<fo:table-row>													<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<fo:inline>																	<xsl:text>Target Model</xsl:text>																</fo:inline>															</fo:block>														</fo:block-container>													</fo:table-cell>													<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">														<fo:block-container overflow="hidden">															<fo:block text-align="left">																<xsl:for-each select="n1:TargetModelName">																	<xsl:variable name="value-of-template_7">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">																			<fo:block>																				<xsl:copy-of select="$value-of-template_7"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline>																				<xsl:copy-of select="$value-of-template_7"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</fo:block>														</fo:block-container>													</fo:table-cell>												</fo:table-row>											</xsl:variable>											<xsl:choose>												<xsl:when test="string($altova:tablerows)">													<xsl:copy-of select="$altova:tablerows"/>												</xsl:when>												<xsl:otherwise>													<fo:table-row>														<fo:table-cell>															<fo:block/>														</fo:table-cell>													</fo:table-row>												</xsl:otherwise>											</xsl:choose>										</fo:table-body>									</fo:table>								</xsl:if>								<fo:block>									<fo:leader leader-pattern="space"/>								</fo:block>								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>								<xsl:choose>									<xsl:when test="n1:SeparateObjByStatus = &apos;Y&apos;">										<xsl:choose>											<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">												<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>Modified objects</xsl:text>													</fo:inline>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_8" select="."/>															<fo:table-header white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Model Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@DMDImpModelName">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																								<fo:block/>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell background-color="#ecfefa" border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																				<xsl:for-each select="n1:PropertiesCollection">																					<xsl:choose>																						<xsl:when test="count( n1:PropertyDetails ) &gt;0">																							<fo:table-row>																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																									<fo:block-container overflow="hidden">																										<fo:block text-align="left"/>																									</fo:block-container>																								</fo:table-cell>																								<fo:table-cell number-columns-spanned="4" padding="2pt" display-align="center">																									<fo:block-container overflow="hidden">																										<fo:block text-align="left">																											<fo:inline-container>																												<fo:block>																													<xsl:text>&#x200B;</xsl:text>																												</fo:block>																											</fo:inline-container>																											<fo:table border-collapse="collapse" empty-cells="show" width="12.8cm" table-layout="fixed">																												<fo:table-column column-width="1cm"/>																												<fo:table-column column-width="12cm"/>																												<xsl:variable name="altova:CurrContextGrid_14" select="."/>																												<fo:table-body start-indent="0pt">																													<xsl:variable name="altova:tablerows">																														<fo:table-row>																															<fo:table-cell padding="2pt" display-align="center">																																<fo:block-container overflow="hidden">																																	<fo:block text-align="left"/>																																</fo:block-container>																															</fo:table-cell>																															<fo:table-cell padding="2pt" display-align="center">																																<fo:block-container overflow="hidden">																																	<fo:block text-align="left">																																		<fo:inline-container>																																			<fo:block>																																				<xsl:text>&#x200B;</xsl:text>																																			</fo:block>																																		</fo:inline-container>																																		<xsl:if test="n1:PropertyDetails">																																			<fo:table border="0.01cm solid black" border-collapse="collapse" border-spacing="0.00in" empty-cells="show" font-size="xx-small" table-layout="fixed" width="100%">																																				<fo:table-column column-width="3.900cm"/>																																				<fo:table-column column-width="3.900cm"/>																																				<fo:table-column column-width="3.900cm"/>																																				<xsl:variable name="altova:CurrContextGrid_15" select="."/>																																				<fo:table-body start-indent="0pt">																																					<xsl:variable name="altova:tablerows">																																						<xsl:for-each select="n1:PropertyDetails">																																							<fo:table-row>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyName">																																												<xsl:variable name="value-of-template_16">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_16"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_16"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyOldValue">																																												<xsl:variable name="value-of-template_17">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_17"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_17"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyNewValue">																																												<xsl:variable name="value-of-template_18">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_18),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_18"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_18"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																							</fo:table-row>																																						</xsl:for-each>																																					</xsl:variable>																																					<xsl:choose>																																						<xsl:when test="string($altova:tablerows)">																																							<xsl:copy-of select="$altova:tablerows"/>																																						</xsl:when>																																						<xsl:otherwise>																																							<fo:table-row>																																								<fo:table-cell>																																									<fo:block/>																																								</fo:table-cell>																																							</fo:table-row>																																						</xsl:otherwise>																																					</xsl:choose>																																				</fo:table-body>																																			</fo:table>																																		</xsl:if>																																	</fo:block>																																</fo:block-container>																															</fo:table-cell>																														</fo:table-row>																													</xsl:variable>																													<xsl:choose>																														<xsl:when test="string($altova:tablerows)">																															<xsl:copy-of select="$altova:tablerows"/>																														</xsl:when>																														<xsl:otherwise>																															<fo:table-row>																																<fo:table-cell>																																	<fo:block/>																																</fo:table-cell>																															</fo:table-row>																														</xsl:otherwise>																													</xsl:choose>																												</fo:table-body>																											</fo:table>																										</fo:block>																									</fo:block-container>																								</fo:table-cell>																							</fo:table-row>																						</xsl:when>																						<xsl:otherwise/>																					</xsl:choose>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>												<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">													<fo:block>														<fo:leader leader-pattern="space"/>													</fo:block>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>New objects</xsl:text>													</fo:inline>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_19" select="."/>															<fo:table-header start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Model Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@DMDImpModelName">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																								<fo:block/>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>												<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">													<fo:block>														<fo:leader leader-pattern="space"/>													</fo:block>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>Deleted objects</xsl:text>													</fo:inline>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_25" select="."/>															<fo:table-header start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Model Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@DMDImpModelName">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																								<fo:block/>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>											</xsl:when>											<xsl:otherwise>												<xsl:if test="count(//n1:Object[@Status=&apos;Modified&apos;]) &gt; 0">													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>Modified objects</xsl:text>													</fo:inline>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="6cm"/>															<fo:table-column column-width="6cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_31" select="."/>															<fo:table-header start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;Modified&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																				<xsl:for-each select="n1:PropertiesCollection">																					<xsl:choose>																						<xsl:when test="count( n1:PropertyDetails ) &gt;0">																							<fo:table-row>																								<fo:table-cell number-columns-spanned="4" padding="2pt" display-align="center">																									<fo:block-container overflow="hidden">																										<fo:block text-align="left">																											<fo:inline-container>																												<fo:block>																													<xsl:text>&#x200B;</xsl:text>																												</fo:block>																											</fo:inline-container>																											<fo:table border-collapse="collapse" empty-cells="show" table-layout="fixed" width="100%">																												<fo:table-column column-width="1cm"/>																												<fo:table-column column-width="16cm"/>																												<xsl:variable name="altova:CurrContextGrid_36" select="."/>																												<fo:table-body start-indent="0pt">																													<xsl:variable name="altova:tablerows">																														<fo:table-row height="0.15in">																															<fo:table-cell padding="2pt" display-align="center">																																<fo:block-container overflow="hidden">																																	<fo:block text-align="left"/>																																</fo:block-container>																															</fo:table-cell>																															<fo:table-cell padding="2pt" display-align="center">																																<fo:block-container overflow="hidden">																																	<fo:block text-align="left">																																		<fo:inline-container>																																			<fo:block>																																				<xsl:text>&#x200B;</xsl:text>																																			</fo:block>																																		</fo:inline-container>																																		<xsl:if test="n1:PropertyDetails">																																			<fo:table border="0.01cm solid black" border-collapse="collapse" border-spacing="0.00in" empty-cells="show" font-size="xx-small" table-layout="fixed" width="100%">																																				<fo:table-column column-width="3.900cm"/>																																				<fo:table-column column-width="3.900cm"/>																																				<fo:table-column column-width="3.900cm"/>																																				<xsl:variable name="altova:CurrContextGrid_37" select="."/>																																				<fo:table-body start-indent="0pt">																																					<xsl:variable name="altova:tablerows">																																						<xsl:for-each select="n1:PropertyDetails">																																							<fo:table-row>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyName">																																												<xsl:variable name="value-of-template_38">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_38),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_38"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_38"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyOldValue">																																												<xsl:variable name="value-of-template_39">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_39),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_39"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_39"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																								<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																									<fo:block-container overflow="hidden">																																										<fo:block text-align="left">																																											<xsl:for-each select="n1:PropertyNewValue">																																												<xsl:variable name="value-of-template_40">																																													<xsl:apply-templates/>																																												</xsl:variable>																																												<xsl:choose>																																													<xsl:when test="contains(string($value-of-template_40),'&#x200B;')">																																														<fo:block>																																															<xsl:copy-of select="$value-of-template_40"/>																																														</fo:block>																																													</xsl:when>																																													<xsl:otherwise>																																														<fo:inline>																																															<xsl:copy-of select="$value-of-template_40"/>																																														</fo:inline>																																													</xsl:otherwise>																																												</xsl:choose>																																												<fo:block/>																																											</xsl:for-each>																																										</fo:block>																																									</fo:block-container>																																								</fo:table-cell>																																							</fo:table-row>																																						</xsl:for-each>																																					</xsl:variable>																																					<xsl:choose>																																						<xsl:when test="string($altova:tablerows)">																																							<xsl:copy-of select="$altova:tablerows"/>																																						</xsl:when>																																						<xsl:otherwise>																																							<fo:table-row>																																								<fo:table-cell>																																									<fo:block/>																																								</fo:table-cell>																																							</fo:table-row>																																						</xsl:otherwise>																																					</xsl:choose>																																				</fo:table-body>																																			</fo:table>																																		</xsl:if>																																	</fo:block>																																</fo:block-container>																															</fo:table-cell>																														</fo:table-row>																													</xsl:variable>																													<xsl:choose>																														<xsl:when test="string($altova:tablerows)">																															<xsl:copy-of select="$altova:tablerows"/>																														</xsl:when>																														<xsl:otherwise>																															<fo:table-row>																																<fo:table-cell>																																	<fo:block/>																																</fo:table-cell>																															</fo:table-row>																														</xsl:otherwise>																													</xsl:choose>																												</fo:table-body>																											</fo:table>																										</fo:block>																									</fo:block-container>																								</fo:table-cell>																							</fo:table-row>																						</xsl:when>																						<xsl:otherwise/>																					</xsl:choose>																				</xsl:for-each>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>												<xsl:if test="count(//n1:Object[@Status=&apos;New&apos;]) &gt; 0">													<fo:block>														<fo:leader leader-pattern="space"/>													</fo:block>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>New objects</xsl:text>													</fo:inline>													<fo:block/>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_41" select="."/>															<fo:table-header start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Model Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;New&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@DMDImpModelName">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																								<fo:block/>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>												<xsl:if test="count(//n1:Object[@Status=&apos;Deleted&apos;]) &gt; 0">													<fo:block>														<fo:leader leader-pattern="space"/>													</fo:block>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>													<fo:inline font-size="xx-small" font-style="italic">														<xsl:text>Deleted objects</xsl:text>													</fo:inline>													<fo:block/>													<fo:inline-container>														<fo:block>															<xsl:text>&#x200B;</xsl:text>														</fo:block>													</fo:inline-container>													<xsl:if test="n1:ObjectsCollection">														<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="4cm"/>															<fo:table-column column-width="3cm"/>															<fo:table-column column-width="2cm"/>															<xsl:variable name="altova:CurrContextGrid_47" select="."/>															<fo:table-header start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<fo:table-row>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Model Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Source Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Target Name</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Type</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<fo:inline>																						<xsl:text>Status</xsl:text>																					</fo:inline>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-header>															<fo:table-body start-indent="0pt">																<xsl:variable name="altova:tablerows">																	<xsl:for-each select="n1:ObjectsCollection">																		<xsl:for-each select="n1:ObjectDetails">																			<xsl:for-each select="n1:Object[@Status = &apos;Deleted&apos;]">																				<fo:table-row>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@DMDImpModelName">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																								<fo:block/>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@SourceValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@TargetValue">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Type">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																					<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																						<fo:block-container overflow="hidden">																							<fo:block text-align="left">																								<xsl:for-each select="@Status">																									<fo:inline>																										<xsl:value-of select="string(.)"/>																									</fo:inline>																								</xsl:for-each>																							</fo:block>																						</fo:block-container>																					</fo:table-cell>																				</fo:table-row>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:variable>																<xsl:choose>																	<xsl:when test="string($altova:tablerows)">																		<xsl:copy-of select="$altova:tablerows"/>																	</xsl:when>																	<xsl:otherwise>																		<fo:table-row>																			<fo:table-cell>																				<fo:block/>																			</fo:table-cell>																		</fo:table-row>																	</xsl:otherwise>																</xsl:choose>															</fo:table-body>														</fo:table>													</xsl:if>												</xsl:if>											</xsl:otherwise>										</xsl:choose>									</xsl:when>									<xsl:otherwise>										<fo:inline font-size="xx-small" font-style="italic">											<xsl:text>Objects</xsl:text>										</fo:inline>										<xsl:choose>											<xsl:when test="n1:IsDMDImport = &apos;Y&apos;">												<fo:inline-container>													<fo:block>														<xsl:text>&#x200B;</xsl:text>													</fo:block>												</fo:inline-container>												<xsl:if test="n1:ObjectsCollection">													<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">														<fo:table-column column-width="4cm"/>														<fo:table-column column-width="4cm"/>														<fo:table-column column-width="4cm"/>														<fo:table-column column-width="3cm"/>														<fo:table-column column-width="2cm"/>														<xsl:variable name="altova:CurrContextGrid_53" select="."/>														<fo:table-header white-space-collapse="true" linefeed-treatment="treat-as-space" wrap-option="no-wrap" white-space-treatment="ignore-if-surrounding-linefeed" start-indent="0pt">															<xsl:variable name="altova:tablerows">																<fo:table-row>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Model Name</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Source Name</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Target Name</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Type</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Status</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																</fo:table-row>															</xsl:variable>															<xsl:choose>																<xsl:when test="string($altova:tablerows)">																	<xsl:copy-of select="$altova:tablerows"/>																</xsl:when>																<xsl:otherwise>																	<fo:table-row>																		<fo:table-cell>																			<fo:block/>																		</fo:table-cell>																	</fo:table-row>																</xsl:otherwise>															</xsl:choose>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:variable name="altova:tablerows">																<xsl:for-each select="n1:ObjectsCollection">																	<xsl:for-each select="n1:ObjectDetails">																		<xsl:for-each select="n1:Object">																			<fo:table-row>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@DMDImpModelName">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																							<fo:block/>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell background-color="#ecfefa" border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@SourceValue">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@TargetValue">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@Type">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@Status">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																			</fo:table-row>																			<xsl:for-each select="n1:PropertiesCollection">																				<xsl:choose>																					<xsl:when test="count( n1:PropertyDetails ) &gt;0">																						<fo:table-row>																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																								<fo:block-container overflow="hidden">																									<fo:block text-align="left"/>																								</fo:block-container>																							</fo:table-cell>																							<fo:table-cell number-columns-spanned="4" border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																								<fo:block-container overflow="hidden">																									<fo:block text-align="left">																										<fo:inline-container>																											<fo:block>																												<xsl:text>&#x200B;</xsl:text>																											</fo:block>																										</fo:inline-container>																										<fo:table border-collapse="collapse" empty-cells="show" width="12.8cm" table-layout="fixed">																											<fo:table-column column-width="1cm"/>																											<fo:table-column column-width="12cm"/>																											<xsl:variable name="altova:CurrContextGrid_59" select="."/>																											<fo:table-body start-indent="0pt">																												<xsl:variable name="altova:tablerows">																													<fo:table-row>																														<fo:table-cell padding="2pt" display-align="center">																															<fo:block-container overflow="hidden">																																<fo:block text-align="left"/>																															</fo:block-container>																														</fo:table-cell>																														<fo:table-cell padding="2pt" display-align="center">																															<fo:block-container overflow="hidden">																																<fo:block text-align="left">																																	<fo:inline-container>																																		<fo:block>																																			<xsl:text>&#x200B;</xsl:text>																																		</fo:block>																																	</fo:inline-container>																																	<xsl:if test="n1:PropertyDetails">																																		<fo:table border="0.01cm solid black" border-collapse="collapse" border-spacing="0.00in" empty-cells="show" font-size="xx-small" table-layout="fixed" width="100%">																																			<fo:table-column column-width="3.900cm"/>																																			<fo:table-column column-width="3.900cm"/>																																			<fo:table-column column-width="3.900cm"/>																																			<xsl:variable name="altova:CurrContextGrid_60" select="."/>																																			<fo:table-body start-indent="0pt">																																				<xsl:variable name="altova:tablerows">																																					<xsl:for-each select="n1:PropertyDetails">																																						<fo:table-row>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyName">																																											<xsl:variable name="value-of-template_61">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_61),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_61"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_61"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyOldValue">																																											<xsl:variable name="value-of-template_62">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_62),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_62"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_62"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyNewValue">																																											<xsl:variable name="value-of-template_63">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_63),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_63"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_63"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																						</fo:table-row>																																					</xsl:for-each>																																				</xsl:variable>																																				<xsl:choose>																																					<xsl:when test="string($altova:tablerows)">																																						<xsl:copy-of select="$altova:tablerows"/>																																					</xsl:when>																																					<xsl:otherwise>																																						<fo:table-row>																																							<fo:table-cell>																																								<fo:block/>																																							</fo:table-cell>																																						</fo:table-row>																																					</xsl:otherwise>																																				</xsl:choose>																																			</fo:table-body>																																		</fo:table>																																	</xsl:if>																																</fo:block>																															</fo:block-container>																														</fo:table-cell>																													</fo:table-row>																												</xsl:variable>																												<xsl:choose>																													<xsl:when test="string($altova:tablerows)">																														<xsl:copy-of select="$altova:tablerows"/>																													</xsl:when>																													<xsl:otherwise>																														<fo:table-row>																															<fo:table-cell>																																<fo:block/>																															</fo:table-cell>																														</fo:table-row>																													</xsl:otherwise>																												</xsl:choose>																											</fo:table-body>																										</fo:table>																									</fo:block>																								</fo:block-container>																							</fo:table-cell>																						</fo:table-row>																					</xsl:when>																					<xsl:otherwise/>																				</xsl:choose>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:for-each>															</xsl:variable>															<xsl:choose>																<xsl:when test="string($altova:tablerows)">																	<xsl:copy-of select="$altova:tablerows"/>																</xsl:when>																<xsl:otherwise>																	<fo:table-row>																		<fo:table-cell>																			<fo:block/>																		</fo:table-cell>																	</fo:table-row>																</xsl:otherwise>															</xsl:choose>														</fo:table-body>													</fo:table>												</xsl:if>											</xsl:when>											<xsl:otherwise>												<fo:inline-container>													<fo:block>														<xsl:text>&#x200B;</xsl:text>													</fo:block>												</fo:inline-container>												<xsl:if test="n1:ObjectsCollection">													<fo:table border-collapse="collapse" empty-cells="show" width="17cm" table-layout="fixed">														<fo:table-column column-width="6cm"/>														<fo:table-column column-width="6cm"/>														<fo:table-column column-width="3cm"/>														<fo:table-column column-width="2cm"/>														<xsl:variable name="altova:CurrContextGrid_64" select="."/>														<fo:table-header start-indent="0pt">															<xsl:variable name="altova:tablerows">																<fo:table-row>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Source Name</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Target Name</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Type</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																	<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																		<fo:block-container overflow="hidden">																			<fo:block text-align="center">																				<fo:inline>																					<xsl:text>Status</xsl:text>																				</fo:inline>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																</fo:table-row>															</xsl:variable>															<xsl:choose>																<xsl:when test="string($altova:tablerows)">																	<xsl:copy-of select="$altova:tablerows"/>																</xsl:when>																<xsl:otherwise>																	<fo:table-row>																		<fo:table-cell>																			<fo:block/>																		</fo:table-cell>																	</fo:table-row>																</xsl:otherwise>															</xsl:choose>														</fo:table-header>														<fo:table-body start-indent="0pt">															<xsl:variable name="altova:tablerows">																<xsl:for-each select="n1:ObjectsCollection">																	<xsl:for-each select="n1:ObjectDetails">																		<xsl:for-each select="n1:Object">																			<fo:table-row>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@SourceValue">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@TargetValue">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@Type">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																				<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																					<fo:block-container overflow="hidden">																						<fo:block text-align="left">																							<xsl:for-each select="@Status">																								<fo:inline>																									<xsl:value-of select="string(.)"/>																								</fo:inline>																							</xsl:for-each>																						</fo:block>																					</fo:block-container>																				</fo:table-cell>																			</fo:table-row>																			<xsl:for-each select="n1:PropertiesCollection">																				<xsl:choose>																					<xsl:when test="count( n1:PropertyDetails ) &gt;0">																						<fo:table-row>																							<fo:table-cell number-columns-spanned="4" padding="2pt" display-align="center">																								<fo:block-container overflow="hidden">																									<fo:block text-align="left">																										<fo:inline-container>																											<fo:block>																												<xsl:text>&#x200B;</xsl:text>																											</fo:block>																										</fo:inline-container>																										<fo:table border-collapse="collapse" empty-cells="show" width="16cm" table-layout="fixed">																											<fo:table-column column-width="1cm"/>																											<fo:table-column column-width="13cm"/>																											<xsl:variable name="altova:CurrContextGrid_69" select="."/>																											<fo:table-body start-indent="0pt">																												<xsl:variable name="altova:tablerows">																													<fo:table-row>																														<fo:table-cell padding="2pt" display-align="center">																															<fo:block-container overflow="hidden">																																<fo:block text-align="left"/>																															</fo:block-container>																														</fo:table-cell>																														<fo:table-cell padding="2pt" display-align="center">																															<fo:block-container overflow="hidden">																																<fo:block text-align="left">																																	<fo:inline-container>																																		<fo:block>																																			<xsl:text>&#x200B;</xsl:text>																																		</fo:block>																																	</fo:inline-container>																																	<xsl:if test="n1:PropertyDetails">																																		<fo:table border="0.01cm solid black" border-collapse="collapse" border-spacing="0.00in" empty-cells="show" font-size="xx-small" table-layout="fixed" width="12cm">																																			<fo:table-column column-width="3.900cm"/>																																			<fo:table-column column-width="3.900cm"/>																																			<fo:table-column column-width="3.900cm"/>																																			<xsl:variable name="altova:CurrContextGrid_70" select="."/>																																			<fo:table-body start-indent="0pt">																																				<xsl:variable name="altova:tablerows">																																					<xsl:for-each select="n1:PropertyDetails">																																						<fo:table-row>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyName">																																											<xsl:variable name="value-of-template_71">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_71),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_71"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_71"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyOldValue">																																											<xsl:variable name="value-of-template_72">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_72),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_72"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_72"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																							<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																																								<fo:block-container overflow="hidden">																																									<fo:block text-align="left">																																										<xsl:for-each select="n1:PropertyNewValue">																																											<xsl:variable name="value-of-template_73">																																												<xsl:apply-templates/>																																											</xsl:variable>																																											<xsl:choose>																																												<xsl:when test="contains(string($value-of-template_73),'&#x200B;')">																																													<fo:block>																																														<xsl:copy-of select="$value-of-template_73"/>																																													</fo:block>																																												</xsl:when>																																												<xsl:otherwise>																																													<fo:inline>																																														<xsl:copy-of select="$value-of-template_73"/>																																													</fo:inline>																																												</xsl:otherwise>																																											</xsl:choose>																																											<fo:block/>																																										</xsl:for-each>																																									</fo:block>																																								</fo:block-container>																																							</fo:table-cell>																																						</fo:table-row>																																					</xsl:for-each>																																				</xsl:variable>																																				<xsl:choose>																																					<xsl:when test="string($altova:tablerows)">																																						<xsl:copy-of select="$altova:tablerows"/>																																					</xsl:when>																																					<xsl:otherwise>																																						<fo:table-row>																																							<fo:table-cell>																																								<fo:block/>																																							</fo:table-cell>																																						</fo:table-row>																																					</xsl:otherwise>																																				</xsl:choose>																																			</fo:table-body>																																		</fo:table>																																	</xsl:if>																																</fo:block>																															</fo:block-container>																														</fo:table-cell>																													</fo:table-row>																												</xsl:variable>																												<xsl:choose>																													<xsl:when test="string($altova:tablerows)">																														<xsl:copy-of select="$altova:tablerows"/>																													</xsl:when>																													<xsl:otherwise>																														<fo:table-row>																															<fo:table-cell>																																<fo:block/>																															</fo:table-cell>																														</fo:table-row>																													</xsl:otherwise>																												</xsl:choose>																											</fo:table-body>																										</fo:table>																									</fo:block>																								</fo:block-container>																							</fo:table-cell>																						</fo:table-row>																					</xsl:when>																					<xsl:otherwise/>																				</xsl:choose>																			</xsl:for-each>																		</xsl:for-each>																	</xsl:for-each>																</xsl:for-each>															</xsl:variable>															<xsl:choose>																<xsl:when test="string($altova:tablerows)">																	<xsl:copy-of select="$altova:tablerows"/>																</xsl:when>																<xsl:otherwise>																	<fo:table-row>																		<fo:table-cell>																			<fo:block/>																		</fo:table-cell>																	</fo:table-row>																</xsl:otherwise>															</xsl:choose>														</fo:table-body>													</fo:table>												</xsl:if>											</xsl:otherwise>										</xsl:choose>									</xsl:otherwise>								</xsl:choose>							</xsl:for-each>						</xsl:for-each>						<fo:block/>					</fo:block>					<fo:block id="SV_RefID_PageTotal"/>				</fo:flow>			</fo:page-sequence>		</fo:root>	</xsl:template>	<xsl:template name="altova:double-backslash">		<xsl:param name="text"/>		<xsl:param name="text-length"/>		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>		<xsl:choose>			<xsl:when test="$text-after-bs-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '\'">						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>					</xsl:when>					<xsl:otherwise>						<xsl:value-of select="$text"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>				<xsl:call-template name="altova:double-backslash">					<xsl:with-param name="text" select="$text-after-bs"/>					<xsl:with-param name="text-length" select="$text-after-bs-length"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:MakeValueAbsoluteIfPixels">		<xsl:param name="sValue"/>		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>		<xsl:choose>			<xsl:when test="$sBeforePx">				<xsl:variable name="nLengthOfInteger">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="$sBeforePx"/>					</xsl:call-template>				</xsl:variable>				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>				<xsl:variable name="sRest">					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$sValue"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">		<xsl:param name="sText"/>		<xsl:variable name="sLen" select="string-length($sText)"/>		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>		<xsl:choose>			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">				<xsl:variable name="nResultOfRest">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="$nResultOfRest + 1"/>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template></xsl:stylesheet>