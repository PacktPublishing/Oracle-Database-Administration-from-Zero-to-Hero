<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/tablesviews" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>	<xsl:param name="SV_OutputFormat" select="'PDF'"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="fo:layout-master-set">		<fo:layout-master-set>			<fo:simple-page-master master-name="page-master-0-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-0-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:page-sequence-master master-name="page-master-0">				<fo:repeatable-page-master-alternatives>					<fo:conditional-page-master-reference master-reference="page-master-0-even-first" odd-or-even="even" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-first" odd-or-even="odd" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even-last" odd-or-even="even" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd-last" odd-or-even="odd" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>					<fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>				</fo:repeatable-page-master-alternatives>			</fo:page-sequence-master>			<fo:simple-page-master master-name="page-master-1-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:simple-page-master master-name="page-master-1-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.7cm" margin-top="0.7cm" margin-bottom="0.7cm">				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>			</fo:simple-page-master>			<fo:page-sequence-master master-name="page-master-1">				<fo:repeatable-page-master-alternatives>					<fo:conditional-page-master-reference master-reference="page-master-1-even-first" odd-or-even="even" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd-first" odd-or-even="odd" page-position="first"/>					<fo:conditional-page-master-reference master-reference="page-master-1-even-last" odd-or-even="even" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd-last" odd-or-even="odd" page-position="last"/>					<fo:conditional-page-master-reference master-reference="page-master-1-even" odd-or-even="even"/>					<fo:conditional-page-master-reference master-reference="page-master-1-odd" odd-or-even="odd"/>				</fo:repeatable-page-master-alternatives>			</fo:page-sequence-master>		</fo:layout-master-set>	</xsl:variable>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:template match="/">		<fo:root>			<xsl:copy-of select="$fo:layout-master-set"/>			<fo:declarations>				<x:xmpmeta xmlns:x="adobe:ns:meta/">					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2014 (x64) (http://www.altova.com)</xmp:CreatorTool>						</rdf:Description>					</rdf:RDF>				</x:xmpmeta>			</fo:declarations>			<fo:bookmark-tree>				<xsl:for-each select="$XML">					<xsl:for-each select="n1:TablesViews">						<xsl:for-each select="n1:TablesViewsCollection">							<xsl:for-each select="n1:TableViewDetails">								<xsl:for-each select="n1:ViewName">									<fo:bookmark>										<xsl:choose>											<xsl:when test="starts-with(string(concat(&apos;#&apos;,../n1:EncodedViewName)),'#')">												<xsl:attribute name="internal-destination">													<xsl:value-of select="substring(string(concat(&apos;#&apos;,../n1:EncodedViewName)),2)"/>												</xsl:attribute>											</xsl:when>											<xsl:otherwise>												<xsl:message terminate="yes">													<xsl:value-of select="concat('Error: External bookmark destinations (',string(concat(&apos;#&apos;,../n1:EncodedViewName)),') are not supported by FOP 0.93/1.0!')"/>												</xsl:message>												<xsl:attribute name="external-destination">													<xsl:value-of select="string(concat(&apos;#&apos;,../n1:EncodedViewName))"/>												</xsl:attribute>											</xsl:otherwise>										</xsl:choose>										<fo:bookmark-title>											<xsl:variable name="altova:bookmark-title">												<xsl:variable name="value-of-template_2">													<xsl:apply-templates/>												</xsl:variable>												<xsl:choose>													<xsl:when test="contains(string($value-of-template_2),'&#x200B;')">														<fo:block>															<xsl:copy-of select="$value-of-template_2"/>														</fo:block>													</xsl:when>													<xsl:otherwise>														<fo:inline>															<xsl:copy-of select="$value-of-template_2"/>														</fo:inline>													</xsl:otherwise>												</xsl:choose>											</xsl:variable>											<xsl:value-of select="string($altova:bookmark-title)"/>										</fo:bookmark-title>									</fo:bookmark>								</xsl:for-each>							</xsl:for-each>						</xsl:for-each>					</xsl:for-each>				</xsl:for-each>			</fo:bookmark-tree>			<fo:page-sequence force-page-count="no-force" master-reference="page-master-0" initial-page-number="auto" format="1">				<fo:static-content flow-name="odd-page-footer">					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">						<fo:block font-family="Tahoma" font-size="xx-small">							<fo:inline-container>								<fo:block>									<xsl:text>&#x200B;</xsl:text>								</fo:block>							</fo:inline-container>							<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">								<fo:table-column column-width="19cm"/>								<fo:table-column column-width="3cm"/>								<fo:table-column column-width="3cm"/>								<xsl:variable name="altova:CurrContextGrid_3" select="."/>								<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">									<xsl:variable name="altova:tablerows">										<fo:table-row font-family="Tahoma" font-size="8pt">											<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<xsl:for-each select="$XML">															<xsl:for-each select="n1:TablesViews">																<xsl:for-each select="n1:CompanyName">																	<xsl:variable name="value-of-template_4">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">																			<fo:block font-family="Tahoma" font-size="8pt">																				<xsl:copy-of select="$value-of-template_4"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline font-family="Tahoma" font-size="8pt">																				<xsl:copy-of select="$value-of-template_4"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</xsl:for-each>														</xsl:for-each>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="right">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Oracle Data Modeler&#160; |</xsl:text>															</fo:inline>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Page: </xsl:text>															</fo:inline>															<fo:page-number/>															<fo:inline>																<xsl:text> / </xsl:text>															</fo:inline>															<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>										</fo:table-row>									</xsl:variable>									<xsl:choose>										<xsl:when test="string($altova:tablerows)">											<xsl:copy-of select="$altova:tablerows"/>										</xsl:when>										<xsl:otherwise>											<fo:table-row>												<fo:table-cell>													<fo:block/>												</fo:table-cell>											</fo:table-row>										</xsl:otherwise>									</xsl:choose>								</fo:table-body>							</fo:table>						</fo:block>					</fo:block-container>				</fo:static-content>				<fo:static-content flow-name="even-page-footer">					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">						<fo:block font-family="Tahoma" font-size="xx-small">							<fo:inline-container>								<fo:block>									<xsl:text>&#x200B;</xsl:text>								</fo:block>							</fo:inline-container>							<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">								<fo:table-column column-width="19cm"/>								<fo:table-column column-width="3cm"/>								<fo:table-column column-width="3cm"/>								<xsl:variable name="altova:CurrContextGrid_3" select="."/>								<fo:table-body font-family="Tahoma" font-size="8pt" start-indent="0pt">									<xsl:variable name="altova:tablerows">										<fo:table-row font-family="Tahoma" font-size="8pt">											<fo:table-cell font-family="Tahoma" font-size="8pt" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<xsl:for-each select="$XML">															<xsl:for-each select="n1:TablesViews">																<xsl:for-each select="n1:CompanyName">																	<xsl:variable name="value-of-template_4">																		<xsl:apply-templates/>																	</xsl:variable>																	<xsl:choose>																		<xsl:when test="contains(string($value-of-template_4),'&#x200B;')">																			<fo:block font-family="Tahoma" font-size="8pt">																				<xsl:copy-of select="$value-of-template_4"/>																			</fo:block>																		</xsl:when>																		<xsl:otherwise>																			<fo:inline font-family="Tahoma" font-size="8pt">																				<xsl:copy-of select="$value-of-template_4"/>																			</fo:inline>																		</xsl:otherwise>																	</xsl:choose>																</xsl:for-each>															</xsl:for-each>														</xsl:for-each>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="right">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Oracle Data Modeler&#160; |</xsl:text>															</fo:inline>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>											<fo:table-cell font-family="Tahoma" font-size="6pt" font-weight="normal" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" padding="2pt" display-align="center">												<fo:block-container overflow="hidden">													<fo:block text-align="left">														<fo:inline-container>															<fo:block>																<xsl:text>&#x200B;</xsl:text>															</fo:block>														</fo:inline-container>														<fo:block margin-right="100% - 100%" white-space="pre" white-space-collapse="false" margin="0pt">															<fo:inline>																<xsl:text>Page: </xsl:text>															</fo:inline>															<fo:page-number/>															<fo:inline>																<xsl:text> / </xsl:text>															</fo:inline>															<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>														</fo:block>													</fo:block>												</fo:block-container>											</fo:table-cell>										</fo:table-row>									</xsl:variable>									<xsl:choose>										<xsl:when test="string($altova:tablerows)">											<xsl:copy-of select="$altova:tablerows"/>										</xsl:when>										<xsl:otherwise>											<fo:table-row>												<fo:table-cell>													<fo:block/>												</fo:table-cell>											</fo:table-row>										</xsl:otherwise>									</xsl:choose>								</fo:table-body>							</fo:table>						</fo:block>					</fo:block-container>				</fo:static-content>				<fo:flow flow-name="xsl-region-body">					<fo:block font-family="Tahoma" font-size="xx-small">						<xsl:for-each select="$XML">							<xsl:for-each select="n1:TablesViews">								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:block text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">									<xsl:for-each select="n1:ReportCaption">										<xsl:variable name="value-of-template_5">											<xsl:apply-templates/>										</xsl:variable>										<xsl:choose>											<xsl:when test="contains(string($value-of-template_5),'&#x200B;')">												<fo:block font-size="medium" text-align="center">													<xsl:copy-of select="$value-of-template_5"/>												</fo:block>											</xsl:when>											<xsl:otherwise>												<fo:inline font-size="medium" text-align="center">													<xsl:copy-of select="$value-of-template_5"/>												</fo:inline>											</xsl:otherwise>										</xsl:choose>									</xsl:for-each>								</fo:block>								<fo:block>									<fo:leader leader-pattern="space"/>								</fo:block>								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>								<fo:inline-container>									<fo:block>										<xsl:text>&#x200B;</xsl:text>									</fo:block>								</fo:inline-container>								<fo:table border-collapse="collapse" empty-cells="show" width="20cm" table-layout="fixed">									<fo:table-column column-width="4cm"/>									<fo:table-column column-width="16cm"/>									<xsl:variable name="altova:CurrContextGrid_6" select="."/>									<fo:table-body start-indent="0pt">										<xsl:variable name="altova:tablerows">											<fo:table-row>												<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:inline>																<xsl:text>Design Name</xsl:text>															</fo:inline>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="n1:DesignName">																<xsl:variable name="value-of-template_7">																	<xsl:apply-templates/>																</xsl:variable>																<xsl:choose>																	<xsl:when test="contains(string($value-of-template_7),'&#x200B;')">																		<fo:block>																			<xsl:copy-of select="$value-of-template_7"/>																		</fo:block>																	</xsl:when>																	<xsl:otherwise>																		<fo:inline>																			<xsl:copy-of select="$value-of-template_7"/>																		</fo:inline>																	</xsl:otherwise>																</xsl:choose>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>											<fo:table-row>												<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:inline>																<xsl:text>Version Date</xsl:text>															</fo:inline>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="n1:VersionDate">																<xsl:variable name="value-of-template_8">																	<xsl:apply-templates/>																</xsl:variable>																<xsl:choose>																	<xsl:when test="contains(string($value-of-template_8),'&#x200B;')">																		<fo:block>																			<xsl:copy-of select="$value-of-template_8"/>																		</fo:block>																	</xsl:when>																	<xsl:otherwise>																		<fo:inline>																			<xsl:copy-of select="$value-of-template_8"/>																		</fo:inline>																	</xsl:otherwise>																</xsl:choose>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>											<fo:table-row>												<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:inline>																<xsl:text>Version Comment</xsl:text>															</fo:inline>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="n1:VersionComment">																<xsl:variable name="value-of-template_9">																	<xsl:apply-templates/>																</xsl:variable>																<xsl:choose>																	<xsl:when test="contains(string($value-of-template_9),'&#x200B;')">																		<fo:block>																			<xsl:copy-of select="$value-of-template_9"/>																		</fo:block>																	</xsl:when>																	<xsl:otherwise>																		<fo:inline>																			<xsl:copy-of select="$value-of-template_9"/>																		</fo:inline>																	</xsl:otherwise>																</xsl:choose>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>											<fo:table-row>												<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<fo:inline>																<xsl:text>Model Name</xsl:text>															</fo:inline>														</fo:block>													</fo:block-container>												</fo:table-cell>												<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">													<fo:block-container overflow="hidden">														<fo:block text-align="left">															<xsl:for-each select="n1:ModelName">																<xsl:variable name="value-of-template_10">																	<xsl:apply-templates/>																</xsl:variable>																<xsl:choose>																	<xsl:when test="contains(string($value-of-template_10),'&#x200B;')">																		<fo:block>																			<xsl:copy-of select="$value-of-template_10"/>																		</fo:block>																	</xsl:when>																	<xsl:otherwise>																		<fo:inline>																			<xsl:copy-of select="$value-of-template_10"/>																		</fo:inline>																	</xsl:otherwise>																</xsl:choose>															</xsl:for-each>														</fo:block>													</fo:block-container>												</fo:table-cell>											</fo:table-row>										</xsl:variable>										<xsl:choose>											<xsl:when test="string($altova:tablerows)">												<xsl:copy-of select="$altova:tablerows"/>											</xsl:when>											<xsl:otherwise>												<fo:table-row>													<fo:table-cell>														<fo:block/>													</fo:table-cell>												</fo:table-row>											</xsl:otherwise>										</xsl:choose>									</fo:table-body>								</fo:table>								<xsl:if test="count(n1:SubViewsCollection)">									<fo:block>										<fo:leader leader-pattern="space"/>									</fo:block>									<fo:inline-container>										<fo:block>											<xsl:text>&#x200B;</xsl:text>										</fo:block>									</fo:inline-container>									<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>									<fo:inline font-size="xx-small" font-style="italic">										<xsl:text>SubViews</xsl:text>									</fo:inline>									<fo:block/>									<fo:inline-container>										<fo:block>											<xsl:text>&#x200B;</xsl:text>										</fo:block>									</fo:inline-container>									<xsl:if test="n1:SubViewsCollection">										<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">											<fo:table-column column-width="4cm"/>											<fo:table-column column-width="7.500cm"/>											<fo:table-column column-width="7.500cm"/>											<fo:table-column column-width="6cm"/>											<xsl:variable name="altova:CurrContextGrid_11" select="."/>											<fo:table-header start-indent="0pt">												<xsl:variable name="altova:tablerows">													<fo:table-row>														<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">															<fo:block-container overflow="hidden">																<fo:block text-align="center">																	<fo:inline>																		<xsl:text>SubView</xsl:text>																	</fo:inline>																</fo:block>															</fo:block-container>														</fo:table-cell>														<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">															<fo:block-container overflow="hidden">																<fo:block text-align="center">																	<fo:inline>																		<xsl:text>Description</xsl:text>																	</fo:inline>																</fo:block>															</fo:block-container>														</fo:table-cell>														<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">															<fo:block-container overflow="hidden">																<fo:block text-align="center">																	<fo:inline>																		<xsl:text>Notes</xsl:text>																	</fo:inline>																</fo:block>															</fo:block-container>														</fo:table-cell>														<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">															<fo:block-container overflow="hidden">																<fo:block text-align="center">																	<fo:inline>																		<xsl:text>Object</xsl:text>																	</fo:inline>																</fo:block>															</fo:block-container>														</fo:table-cell>													</fo:table-row>												</xsl:variable>												<xsl:choose>													<xsl:when test="string($altova:tablerows)">														<xsl:copy-of select="$altova:tablerows"/>													</xsl:when>													<xsl:otherwise>														<fo:table-row>															<fo:table-cell>																<fo:block/>															</fo:table-cell>														</fo:table-row>													</xsl:otherwise>												</xsl:choose>											</fo:table-header>											<fo:table-body start-indent="0pt">												<xsl:variable name="altova:tablerows">													<xsl:for-each select="n1:SubViewsCollection">														<xsl:for-each select="n1:SubViewsDetails">															<xsl:variable name="v_SWDiagramLink" select="n1:SWDiagramLink"/>															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:choose>																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																					<xsl:choose>																						<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																							<xsl:for-each select="n1:SWName">																								<fo:basic-link text-decoration="underline" color="blue">																									<xsl:variable name="altova:url" select="string(.)"/>																									<xsl:choose>																										<xsl:when test="not($altova:url)">																											<xsl:attribute name="external-destination">																												<xsl:text>url()</xsl:text>																											</xsl:attribute>																										</xsl:when>																										<xsl:when test="substring($altova:url, 1, 1) = '#'">																											<xsl:attribute name="internal-destination">																												<xsl:value-of select="substring($altova:url, 2)"/>																											</xsl:attribute>																										</xsl:when>																										<xsl:otherwise>																											<xsl:attribute name="external-destination">																												<xsl:text>url(</xsl:text>																												<xsl:choose>																													<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																														<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																													</xsl:when>																													<xsl:otherwise>																														<xsl:call-template name="altova:double-backslash">																															<xsl:with-param name="text">																																<xsl:value-of select="$altova:url"/>																															</xsl:with-param>																															<xsl:with-param name="text-length">																																<xsl:value-of select="string-length($altova:url)"/>																															</xsl:with-param>																														</xsl:call-template>																													</xsl:otherwise>																												</xsl:choose>																												<xsl:text>)</xsl:text>																											</xsl:attribute>																										</xsl:otherwise>																									</xsl:choose>																									<fo:inline>																										<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																									</fo:inline>																								</fo:basic-link>																							</xsl:for-each>																						</xsl:when>																						<xsl:otherwise>																							<xsl:for-each select="n1:SWName">																								<fo:basic-link text-decoration="underline" color="blue">																									<xsl:variable name="altova:url" select="string(concat(&apos;#&apos;,../n1:SWDiagramLink))"/>																									<xsl:choose>																										<xsl:when test="not($altova:url)">																											<xsl:attribute name="external-destination">																												<xsl:text>url()</xsl:text>																											</xsl:attribute>																										</xsl:when>																										<xsl:when test="substring($altova:url, 1, 1) = '#'">																											<xsl:attribute name="internal-destination">																												<xsl:value-of select="substring($altova:url, 2)"/>																											</xsl:attribute>																										</xsl:when>																										<xsl:otherwise>																											<xsl:attribute name="external-destination">																												<xsl:text>url(</xsl:text>																												<xsl:choose>																													<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																														<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																													</xsl:when>																													<xsl:otherwise>																														<xsl:call-template name="altova:double-backslash">																															<xsl:with-param name="text">																																<xsl:value-of select="$altova:url"/>																															</xsl:with-param>																															<xsl:with-param name="text-length">																																<xsl:value-of select="string-length($altova:url)"/>																															</xsl:with-param>																														</xsl:call-template>																													</xsl:otherwise>																												</xsl:choose>																												<xsl:text>)</xsl:text>																											</xsl:attribute>																										</xsl:otherwise>																									</xsl:choose>																									<xsl:variable name="value-of-template_12">																										<xsl:apply-templates/>																									</xsl:variable>																									<xsl:choose>																										<xsl:when test="contains(string($value-of-template_12),'&#x200B;')">																											<fo:block>																												<xsl:copy-of select="$value-of-template_12"/>																											</fo:block>																										</xsl:when>																										<xsl:otherwise>																											<fo:inline>																												<xsl:copy-of select="$value-of-template_12"/>																											</fo:inline>																										</xsl:otherwise>																									</xsl:choose>																								</fo:basic-link>																								<fo:block/>																							</xsl:for-each>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:when>																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																					<xsl:choose>																						<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																							<xsl:for-each select="n1:SWName">																								<fo:basic-link text-decoration="underline" color="blue">																									<xsl:variable name="altova:url" select="string(../n1:SWDiagramLink)"/>																									<xsl:choose>																										<xsl:when test="not($altova:url)">																											<xsl:attribute name="external-destination">																												<xsl:text>url()</xsl:text>																											</xsl:attribute>																										</xsl:when>																										<xsl:when test="substring($altova:url, 1, 1) = '#'">																											<xsl:attribute name="internal-destination">																												<xsl:value-of select="substring($altova:url, 2)"/>																											</xsl:attribute>																										</xsl:when>																										<xsl:otherwise>																											<xsl:attribute name="external-destination">																												<xsl:text>url(</xsl:text>																												<xsl:choose>																													<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																														<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																													</xsl:when>																													<xsl:otherwise>																														<xsl:call-template name="altova:double-backslash">																															<xsl:with-param name="text">																																<xsl:value-of select="$altova:url"/>																															</xsl:with-param>																															<xsl:with-param name="text-length">																																<xsl:value-of select="string-length($altova:url)"/>																															</xsl:with-param>																														</xsl:call-template>																													</xsl:otherwise>																												</xsl:choose>																												<xsl:text>)</xsl:text>																											</xsl:attribute>																										</xsl:otherwise>																									</xsl:choose>																									<fo:inline>																										<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																									</fo:inline>																								</fo:basic-link>																							</xsl:for-each>																						</xsl:when>																						<xsl:otherwise>																							<xsl:for-each select="n1:SWName">																								<fo:basic-link text-decoration="underline" color="blue">																									<xsl:variable name="altova:url" select="string($v_SWDiagramLink)"/>																									<xsl:choose>																										<xsl:when test="not($altova:url)">																											<xsl:attribute name="external-destination">																												<xsl:text>url()</xsl:text>																											</xsl:attribute>																										</xsl:when>																										<xsl:when test="substring($altova:url, 1, 1) = '#'">																											<xsl:attribute name="internal-destination">																												<xsl:value-of select="substring($altova:url, 2)"/>																											</xsl:attribute>																										</xsl:when>																										<xsl:otherwise>																											<xsl:attribute name="external-destination">																												<xsl:text>url(</xsl:text>																												<xsl:choose>																													<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																														<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																													</xsl:when>																													<xsl:otherwise>																														<xsl:call-template name="altova:double-backslash">																															<xsl:with-param name="text">																																<xsl:value-of select="$altova:url"/>																															</xsl:with-param>																															<xsl:with-param name="text-length">																																<xsl:value-of select="string-length($altova:url)"/>																															</xsl:with-param>																														</xsl:call-template>																													</xsl:otherwise>																												</xsl:choose>																												<xsl:text>)</xsl:text>																											</xsl:attribute>																										</xsl:otherwise>																									</xsl:choose>																									<xsl:variable name="value-of-template_13">																										<xsl:apply-templates/>																									</xsl:variable>																									<xsl:choose>																										<xsl:when test="contains(string($value-of-template_13),'&#x200B;')">																											<fo:block>																												<xsl:copy-of select="$value-of-template_13"/>																											</fo:block>																										</xsl:when>																										<xsl:otherwise>																											<fo:inline>																												<xsl:copy-of select="$value-of-template_13"/>																											</fo:inline>																										</xsl:otherwise>																									</xsl:choose>																								</fo:basic-link>																							</xsl:for-each>																							<fo:inline>																								<xsl:text>&#160;</xsl:text>																							</fo:inline>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:when>																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																					<xsl:choose>																						<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																							<xsl:for-each select="n1:SWName">																								<fo:inline>																									<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																								</fo:inline>																							</xsl:for-each>																						</xsl:when>																						<xsl:otherwise>																							<xsl:for-each select="n1:SWName">																								<xsl:variable name="value-of-template_14">																									<xsl:apply-templates/>																								</xsl:variable>																								<xsl:choose>																									<xsl:when test="contains(string($value-of-template_14),'&#x200B;')">																										<fo:block>																											<xsl:copy-of select="$value-of-template_14"/>																										</fo:block>																									</xsl:when>																									<xsl:otherwise>																										<fo:inline>																											<xsl:copy-of select="$value-of-template_14"/>																										</fo:inline>																									</xsl:otherwise>																								</xsl:choose>																								<fo:block/>																							</xsl:for-each>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:when>																			</xsl:choose>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:SWDescriptionNotes">																				<xsl:for-each select="n1:SWDescription">																					<xsl:variable name="value-of-template_15">																						<xsl:apply-templates/>																					</xsl:variable>																					<xsl:choose>																						<xsl:when test="contains(string($value-of-template_15),'&#x200B;')">																							<fo:block>																								<xsl:copy-of select="$value-of-template_15"/>																							</fo:block>																						</xsl:when>																						<xsl:otherwise>																							<fo:inline>																								<xsl:copy-of select="$value-of-template_15"/>																							</fo:inline>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:for-each>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:SWDescriptionNotes">																				<xsl:for-each select="n1:SWNotes">																					<xsl:variable name="value-of-template_16">																						<xsl:apply-templates/>																					</xsl:variable>																					<xsl:choose>																						<xsl:when test="contains(string($value-of-template_16),'&#x200B;')">																							<fo:block>																								<xsl:copy-of select="$value-of-template_16"/>																							</fo:block>																						</xsl:when>																						<xsl:otherwise>																							<fo:inline>																								<xsl:copy-of select="$value-of-template_16"/>																							</fo:inline>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:for-each>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:choose>																				<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																					<xsl:choose>																						<xsl:when test="contains( n1:SWName , &apos;.pdf&apos; )">																							<xsl:for-each select="n1:SWObjects">																								<xsl:for-each select="n1:SWObject">																									<xsl:for-each select="n1:SWObjectName">																										<fo:basic-link text-decoration="underline" color="blue">																											<xsl:variable name="altova:url" select="string(../../../n1:SWDiagramLink)"/>																											<xsl:choose>																												<xsl:when test="not($altova:url)">																													<xsl:attribute name="external-destination">																														<xsl:text>url()</xsl:text>																													</xsl:attribute>																												</xsl:when>																												<xsl:when test="substring($altova:url, 1, 1) = '#'">																													<xsl:attribute name="internal-destination">																														<xsl:value-of select="substring($altova:url, 2)"/>																													</xsl:attribute>																												</xsl:when>																												<xsl:otherwise>																													<xsl:attribute name="external-destination">																														<xsl:text>url(</xsl:text>																														<xsl:choose>																															<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																																<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																															</xsl:when>																															<xsl:otherwise>																																<xsl:call-template name="altova:double-backslash">																																	<xsl:with-param name="text">																																		<xsl:value-of select="$altova:url"/>																																	</xsl:with-param>																																	<xsl:with-param name="text-length">																																		<xsl:value-of select="string-length($altova:url)"/>																																	</xsl:with-param>																																</xsl:call-template>																															</xsl:otherwise>																														</xsl:choose>																														<xsl:text>)</xsl:text>																													</xsl:attribute>																												</xsl:otherwise>																											</xsl:choose>																											<xsl:variable name="value-of-template_17">																												<xsl:apply-templates/>																											</xsl:variable>																											<xsl:choose>																												<xsl:when test="contains(string($value-of-template_17),'&#x200B;')">																													<fo:block>																														<xsl:copy-of select="$value-of-template_17"/>																													</fo:block>																												</xsl:when>																												<xsl:otherwise>																													<fo:inline>																														<xsl:copy-of select="$value-of-template_17"/>																													</fo:inline>																												</xsl:otherwise>																											</xsl:choose>																										</fo:basic-link>																										<fo:block/>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</xsl:when>																						<xsl:otherwise>																							<xsl:for-each select="n1:SWObjects">																								<xsl:for-each select="n1:SWObject">																									<xsl:for-each select="n1:SWObjectName">																										<fo:basic-link text-decoration="underline" color="blue">																											<xsl:variable name="altova:url" select="string(concat(&apos;#&apos;,../n1:SWObjectLink))"/>																											<xsl:choose>																												<xsl:when test="not($altova:url)">																													<xsl:attribute name="external-destination">																														<xsl:text>url()</xsl:text>																													</xsl:attribute>																												</xsl:when>																												<xsl:when test="substring($altova:url, 1, 1) = '#'">																													<xsl:attribute name="internal-destination">																														<xsl:value-of select="substring($altova:url, 2)"/>																													</xsl:attribute>																												</xsl:when>																												<xsl:otherwise>																													<xsl:attribute name="external-destination">																														<xsl:text>url(</xsl:text>																														<xsl:choose>																															<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																																<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																															</xsl:when>																															<xsl:otherwise>																																<xsl:call-template name="altova:double-backslash">																																	<xsl:with-param name="text">																																		<xsl:value-of select="$altova:url"/>																																	</xsl:with-param>																																	<xsl:with-param name="text-length">																																		<xsl:value-of select="string-length($altova:url)"/>																																	</xsl:with-param>																																</xsl:call-template>																															</xsl:otherwise>																														</xsl:choose>																														<xsl:text>)</xsl:text>																													</xsl:attribute>																												</xsl:otherwise>																											</xsl:choose>																											<xsl:variable name="value-of-template_18">																												<xsl:apply-templates/>																											</xsl:variable>																											<xsl:choose>																												<xsl:when test="contains(string($value-of-template_18),'&#x200B;')">																													<fo:block>																														<xsl:copy-of select="$value-of-template_18"/>																													</fo:block>																												</xsl:when>																												<xsl:otherwise>																													<fo:inline>																														<xsl:copy-of select="$value-of-template_18"/>																													</fo:inline>																												</xsl:otherwise>																											</xsl:choose>																										</fo:basic-link>																										<fo:block/>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:when>																				<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																					<xsl:choose>																						<xsl:when test="contains( n1:SWName , &apos;.pdf&apos; )">																							<xsl:for-each select="n1:SWObjects">																								<xsl:for-each select="n1:SWObject">																									<xsl:for-each select="n1:SWObjectName">																										<xsl:variable name="v_SWObjectLink" select="../n1:SWObjectLink"/>																										<fo:basic-link text-decoration="underline" color="blue">																											<xsl:variable name="altova:url" select="string(../../../n1:SWDiagramLink)"/>																											<xsl:choose>																												<xsl:when test="not($altova:url)">																													<xsl:attribute name="external-destination">																														<xsl:text>url()</xsl:text>																													</xsl:attribute>																												</xsl:when>																												<xsl:when test="substring($altova:url, 1, 1) = '#'">																													<xsl:attribute name="internal-destination">																														<xsl:value-of select="substring($altova:url, 2)"/>																													</xsl:attribute>																												</xsl:when>																												<xsl:otherwise>																													<xsl:attribute name="external-destination">																														<xsl:text>url(</xsl:text>																														<xsl:choose>																															<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																																<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																															</xsl:when>																															<xsl:otherwise>																																<xsl:call-template name="altova:double-backslash">																																	<xsl:with-param name="text">																																		<xsl:value-of select="$altova:url"/>																																	</xsl:with-param>																																	<xsl:with-param name="text-length">																																		<xsl:value-of select="string-length($altova:url)"/>																																	</xsl:with-param>																																</xsl:call-template>																															</xsl:otherwise>																														</xsl:choose>																														<xsl:text>)</xsl:text>																													</xsl:attribute>																												</xsl:otherwise>																											</xsl:choose>																											<xsl:variable name="value-of-template_19">																												<xsl:apply-templates/>																											</xsl:variable>																											<xsl:choose>																												<xsl:when test="contains(string($value-of-template_19),'&#x200B;')">																													<fo:block>																														<xsl:copy-of select="$value-of-template_19"/>																													</fo:block>																												</xsl:when>																												<xsl:otherwise>																													<fo:inline>																														<xsl:copy-of select="$value-of-template_19"/>																													</fo:inline>																												</xsl:otherwise>																											</xsl:choose>																										</fo:basic-link>																										<fo:block/>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</xsl:when>																						<xsl:otherwise>																							<xsl:for-each select="n1:SWObjects">																								<xsl:for-each select="n1:SWObject">																									<xsl:for-each select="n1:SWObjectName">																										<xsl:variable name="v_SWObjectLink" select="../n1:SWObjectLink"/>																										<fo:basic-link text-decoration="underline" color="blue">																											<xsl:variable name="altova:url" select="string($v_SWObjectLink)"/>																											<xsl:choose>																												<xsl:when test="not($altova:url)">																													<xsl:attribute name="external-destination">																														<xsl:text>url()</xsl:text>																													</xsl:attribute>																												</xsl:when>																												<xsl:when test="substring($altova:url, 1, 1) = '#'">																													<xsl:attribute name="internal-destination">																														<xsl:value-of select="substring($altova:url, 2)"/>																													</xsl:attribute>																												</xsl:when>																												<xsl:otherwise>																													<xsl:attribute name="external-destination">																														<xsl:text>url(</xsl:text>																														<xsl:choose>																															<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																																<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																															</xsl:when>																															<xsl:otherwise>																																<xsl:call-template name="altova:double-backslash">																																	<xsl:with-param name="text">																																		<xsl:value-of select="$altova:url"/>																																	</xsl:with-param>																																	<xsl:with-param name="text-length">																																		<xsl:value-of select="string-length($altova:url)"/>																																	</xsl:with-param>																																</xsl:call-template>																															</xsl:otherwise>																														</xsl:choose>																														<xsl:text>)</xsl:text>																													</xsl:attribute>																												</xsl:otherwise>																											</xsl:choose>																											<xsl:variable name="value-of-template_20">																												<xsl:apply-templates/>																											</xsl:variable>																											<xsl:choose>																												<xsl:when test="contains(string($value-of-template_20),'&#x200B;')">																													<fo:block>																														<xsl:copy-of select="$value-of-template_20"/>																													</fo:block>																												</xsl:when>																												<xsl:otherwise>																													<fo:inline>																														<xsl:copy-of select="$value-of-template_20"/>																													</fo:inline>																												</xsl:otherwise>																											</xsl:choose>																										</fo:basic-link>																										<fo:block/>																									</xsl:for-each>																								</xsl:for-each>																							</xsl:for-each>																						</xsl:otherwise>																					</xsl:choose>																				</xsl:when>																				<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																					<xsl:for-each select="n1:SWObjects">																						<xsl:for-each select="n1:SWObject">																							<xsl:for-each select="n1:SWObjectName">																								<xsl:variable name="value-of-template_21">																									<xsl:apply-templates/>																								</xsl:variable>																								<xsl:choose>																									<xsl:when test="contains(string($value-of-template_21),'&#x200B;')">																										<fo:block>																											<xsl:copy-of select="$value-of-template_21"/>																										</fo:block>																									</xsl:when>																									<xsl:otherwise>																										<fo:inline>																											<xsl:copy-of select="$value-of-template_21"/>																										</fo:inline>																									</xsl:otherwise>																								</xsl:choose>																							</xsl:for-each>																							<fo:block/>																						</xsl:for-each>																					</xsl:for-each>																				</xsl:when>																			</xsl:choose>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:for-each>													</xsl:for-each>												</xsl:variable>												<xsl:choose>													<xsl:when test="string($altova:tablerows)">														<xsl:copy-of select="$altova:tablerows"/>													</xsl:when>													<xsl:otherwise>														<fo:table-row>															<fo:table-cell>																<fo:block/>															</fo:table-cell>														</fo:table-row>													</xsl:otherwise>												</xsl:choose>											</fo:table-body>										</fo:table>									</xsl:if>								</xsl:if>								<xsl:for-each select="n1:TablesViewsCollection">									<xsl:for-each select="n1:TableViewDetails">										<xsl:variable name="v_ShortObjectID" select="n1:EncodedViewName"/>										<xsl:variable name="v_ObjectName" select="n1:ViewName"/>										<xsl:variable name="v_DiagramSuffix" select="n1:DiagramSuffix"/>										<xsl:if test="../../n1:UsePageBreaks = &apos;true&apos;">											<fo:block break-after="page">												<fo:leader leader-pattern="space"/>											</fo:block>										</xsl:if>										<fo:block>											<fo:leader leader-pattern="space"/>										</fo:block>										<fo:inline-container>											<fo:block>												<xsl:text>&#x200B;</xsl:text>											</fo:block>										</fo:inline-container>										<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt">											<fo:inline>												<xsl:text>&#160;</xsl:text>											</fo:inline>										</fo:block>										<fo:inline-container>											<fo:block>												<xsl:text>&#x200B;</xsl:text>											</fo:block>										</fo:inline-container>										<fo:table border-collapse="collapse" empty-cells="show" width="16cm" table-layout="fixed">											<fo:table-column column-width="4cm"/>											<fo:table-column column-width="12cm"/>											<xsl:variable name="altova:CurrContextGrid_22" select="."/>											<fo:table-body start-indent="0pt">												<xsl:variable name="altova:tablerows">													<fo:table-row>														<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">															<fo:block-container overflow="hidden">																<fo:block text-align="left">																	<fo:inline>																		<xsl:text>View Name</xsl:text>																	</fo:inline>																</fo:block>															</fo:block-container>														</fo:table-cell>														<fo:table-cell background-color="rgb(217,245,255)" border="0.01cm solid black" font-size="10pt" padding="0.01in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">															<fo:block-container overflow="hidden">																<fo:block text-align="left">																	<xsl:choose>																		<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																			<xsl:choose>																				<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																					<xsl:element name="a">																						<xsl:attribute name="href">																							<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_DiagramSuffix)"/>																						</xsl:attribute>																						<xsl:attribute name="id">																							<xsl:value-of select="$v_ShortObjectID"/>																						</xsl:attribute>																						<fo:inline>																							<xsl:value-of select="$v_ObjectName"/>																						</fo:inline>																					</xsl:element>																				</xsl:when>																				<xsl:otherwise>																					<xsl:element name="a">																						<xsl:attribute name="id">																							<xsl:value-of select="$v_ShortObjectID"/>																						</xsl:attribute>																						<fo:inline>																							<xsl:value-of select="$v_ObjectName"/>																						</fo:inline>																					</xsl:element>																				</xsl:otherwise>																			</xsl:choose>																		</xsl:when>																		<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																			<fo:block>																				<xsl:attribute name="id">																					<xsl:value-of select="$v_ShortObjectID"/>																				</xsl:attribute>																				<xsl:choose>																					<xsl:when test="n1:DiagramSuffix != &apos;&apos;">																						<fo:basic-link text-decoration="underline" color="blue">																							<xsl:variable name="altova:url" select="string(concat($v_ShortObjectID,$v_DiagramSuffix))"/>																							<xsl:choose>																								<xsl:when test="not($altova:url)">																									<xsl:attribute name="external-destination">																										<xsl:text>url()</xsl:text>																									</xsl:attribute>																								</xsl:when>																								<xsl:when test="substring($altova:url, 1, 1) = '#'">																									<xsl:attribute name="internal-destination">																										<xsl:value-of select="substring($altova:url, 2)"/>																									</xsl:attribute>																								</xsl:when>																								<xsl:otherwise>																									<xsl:attribute name="external-destination">																										<xsl:text>url(</xsl:text>																										<xsl:choose>																											<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																												<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																											</xsl:when>																											<xsl:otherwise>																												<xsl:call-template name="altova:double-backslash">																													<xsl:with-param name="text">																														<xsl:value-of select="$altova:url"/>																													</xsl:with-param>																													<xsl:with-param name="text-length">																														<xsl:value-of select="string-length($altova:url)"/>																													</xsl:with-param>																												</xsl:call-template>																											</xsl:otherwise>																										</xsl:choose>																										<xsl:text>)</xsl:text>																									</xsl:attribute>																								</xsl:otherwise>																							</xsl:choose>																							<fo:inline>																								<xsl:value-of select="$v_ObjectName"/>																							</fo:inline>																						</fo:basic-link>																					</xsl:when>																					<xsl:otherwise>																						<fo:inline>																							<xsl:value-of select="$v_ObjectName"/>																						</fo:inline>																					</xsl:otherwise>																				</xsl:choose>																			</fo:block>																		</xsl:when>																		<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																			<fo:inline-container>																				<fo:block>																					<xsl:text>&#x200B;</xsl:text>																				</fo:block>																			</fo:inline-container>																			<fo:block margin-right="100% - 100%" font-size="1.17em" font-weight="bold" space-before="0.83em" space-after="0.83em" margin="0pt">																				<fo:inline>																					<xsl:value-of select="$v_ObjectName"/>																				</fo:inline>																			</fo:block>																		</xsl:when>																	</xsl:choose>																</fo:block>															</fo:block-container>														</fo:table-cell>													</fo:table-row>													<xsl:choose>														<xsl:when test="n1:StructuredTypeName != &apos;&apos;">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<fo:inline>																				<xsl:text>Structured Type</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:StructuredTypeName">																				<xsl:variable name="value-of-template_23">																					<xsl:apply-templates/>																				</xsl:variable>																				<xsl:choose>																					<xsl:when test="contains(string($value-of-template_23),'&#x200B;')">																						<fo:block>																							<xsl:copy-of select="$value-of-template_23"/>																						</fo:block>																					</xsl:when>																					<xsl:otherwise>																						<fo:inline>																							<xsl:copy-of select="$value-of-template_23"/>																						</fo:inline>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:when>														<xsl:otherwise/>													</xsl:choose>													<xsl:choose>														<xsl:when test="n1:SelectStatement != &apos;&apos;">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<fo:inline>																				<xsl:text>Select Statement</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:SelectStatement">																				<xsl:variable name="value-of-template_24">																					<xsl:apply-templates/>																				</xsl:variable>																				<xsl:choose>																					<xsl:when test="contains(string($value-of-template_24),'&#x200B;')">																						<fo:block>																							<xsl:copy-of select="$value-of-template_24"/>																						</fo:block>																					</xsl:when>																					<xsl:otherwise>																						<fo:inline>																							<xsl:copy-of select="$value-of-template_24"/>																						</fo:inline>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:when>														<xsl:otherwise/>													</xsl:choose>												</xsl:variable>												<xsl:choose>													<xsl:when test="string($altova:tablerows)">														<xsl:copy-of select="$altova:tablerows"/>													</xsl:when>													<xsl:otherwise>														<fo:table-row>															<fo:table-cell>																<fo:block/>															</fo:table-cell>														</fo:table-row>													</xsl:otherwise>												</xsl:choose>											</fo:table-body>										</fo:table>										<xsl:if test="count( n1:DescriptionNotes )">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<xsl:for-each select="n1:DescriptionNotes">												<fo:inline-container>													<fo:block>														<xsl:text>&#x200B;</xsl:text>													</fo:block>												</fo:inline-container>												<fo:table border-collapse="collapse" empty-cells="show" width="16cm" table-layout="fixed">													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="11.500cm"/>													<xsl:variable name="altova:CurrContextGrid_25" select="."/>													<fo:table-body start-indent="0pt">														<xsl:variable name="altova:tablerows">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<fo:inline>																				<xsl:text>Description</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:Description">																				<xsl:variable name="value-of-template_26">																					<xsl:apply-templates/>																				</xsl:variable>																				<xsl:choose>																					<xsl:when test="contains(string($value-of-template_26),'&#x200B;')">																						<fo:block>																							<xsl:copy-of select="$value-of-template_26"/>																						</fo:block>																					</xsl:when>																					<xsl:otherwise>																						<fo:inline>																							<xsl:copy-of select="$value-of-template_26"/>																						</fo:inline>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0.03in" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<fo:inline>																				<xsl:text>Notes</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																	<fo:block-container overflow="hidden">																		<fo:block text-align="left">																			<xsl:for-each select="n1:Notes">																				<xsl:variable name="value-of-template_27">																					<xsl:apply-templates/>																				</xsl:variable>																				<xsl:choose>																					<xsl:when test="contains(string($value-of-template_27),'&#x200B;')">																						<fo:block>																							<xsl:copy-of select="$value-of-template_27"/>																						</fo:block>																					</xsl:when>																					<xsl:otherwise>																						<fo:inline>																							<xsl:copy-of select="$value-of-template_27"/>																						</fo:inline>																					</xsl:otherwise>																				</xsl:choose>																			</xsl:for-each>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-body>												</fo:table>											</xsl:for-each>										</xsl:if>										<xsl:if test="count( n1:DiagramsCollection)">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<fo:inline font-size="xx-small" font-style="italic">												<xsl:text>Used In Diagrams</xsl:text>											</fo:inline>											<fo:block/>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:table border-collapse="collapse" empty-cells="show" width="8cm" table-layout="fixed">												<fo:table-column column-width="8cm"/>												<xsl:variable name="altova:CurrContextGrid_28" select="."/>												<fo:table-body start-indent="0pt">													<xsl:variable name="altova:tablerows">														<fo:table-row>															<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																<fo:block-container overflow="hidden">																	<fo:block text-align="center">																		<fo:inline>																			<xsl:text>Diagram Name</xsl:text>																		</fo:inline>																	</fo:block>																</fo:block-container>															</fo:table-cell>														</fo:table-row>														<xsl:for-each select="n1:DiagramsCollection">															<xsl:for-each select="n1:Diagram">																<xsl:variable name="v_Suffix" select="n1:Suffix"/>																<fo:table-row>																	<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																		<fo:block-container overflow="hidden">																			<fo:block text-align="left">																				<xsl:choose>																					<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">																						<xsl:choose>																							<xsl:when test="n1:Suffix != &apos;&apos;">																								<xsl:for-each select="n1:Name">																									<xsl:element name="a">																										<xsl:attribute name="href">																											<xsl:value-of select="concat('#' , $v_ShortObjectID , $v_Suffix)"/>																										</xsl:attribute>																										<xsl:attribute name="name">																											<xsl:value-of select="$v_ObjectName"/>																										</xsl:attribute>																										<fo:inline>																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</fo:inline>																									</xsl:element>																								</xsl:for-each>																							</xsl:when>																							<xsl:otherwise>																								<xsl:for-each select="n1:Name">																									<fo:basic-link text-decoration="underline" color="blue">																										<xsl:variable name="altova:url" select="string(../n1:Link)"/>																										<xsl:choose>																											<xsl:when test="not($altova:url)">																												<xsl:attribute name="external-destination">																													<xsl:text>url()</xsl:text>																												</xsl:attribute>																											</xsl:when>																											<xsl:when test="substring($altova:url, 1, 1) = '#'">																												<xsl:attribute name="internal-destination">																													<xsl:value-of select="substring($altova:url, 2)"/>																												</xsl:attribute>																											</xsl:when>																											<xsl:otherwise>																												<xsl:attribute name="external-destination">																													<xsl:text>url(</xsl:text>																													<xsl:choose>																														<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																															<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																														</xsl:when>																														<xsl:otherwise>																															<xsl:call-template name="altova:double-backslash">																																<xsl:with-param name="text">																																	<xsl:value-of select="$altova:url"/>																																</xsl:with-param>																																<xsl:with-param name="text-length">																																	<xsl:value-of select="string-length($altova:url)"/>																																</xsl:with-param>																															</xsl:call-template>																														</xsl:otherwise>																													</xsl:choose>																													<xsl:text>)</xsl:text>																												</xsl:attribute>																											</xsl:otherwise>																										</xsl:choose>																										<fo:inline>																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</fo:inline>																									</fo:basic-link>																								</xsl:for-each>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:when>																					<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">																						<xsl:choose>																							<xsl:when test="contains( . ,  &apos;.pdf&apos; )">																								<xsl:for-each select="n1:Name">																									<fo:basic-link text-decoration="underline" color="blue">																										<xsl:variable name="altova:url" select="string(concat(&apos;./&apos;,../n1:Link))"/>																										<xsl:choose>																											<xsl:when test="not($altova:url)">																												<xsl:attribute name="external-destination">																													<xsl:text>url()</xsl:text>																												</xsl:attribute>																											</xsl:when>																											<xsl:when test="substring($altova:url, 1, 1) = '#'">																												<xsl:attribute name="internal-destination">																													<xsl:value-of select="substring($altova:url, 2)"/>																												</xsl:attribute>																											</xsl:when>																											<xsl:otherwise>																												<xsl:attribute name="external-destination">																													<xsl:text>url(</xsl:text>																													<xsl:choose>																														<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																															<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																														</xsl:when>																														<xsl:otherwise>																															<xsl:call-template name="altova:double-backslash">																																<xsl:with-param name="text">																																	<xsl:value-of select="$altova:url"/>																																</xsl:with-param>																																<xsl:with-param name="text-length">																																	<xsl:value-of select="string-length($altova:url)"/>																																</xsl:with-param>																															</xsl:call-template>																														</xsl:otherwise>																													</xsl:choose>																													<xsl:text>)</xsl:text>																												</xsl:attribute>																											</xsl:otherwise>																										</xsl:choose>																										<fo:inline>																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</fo:inline>																									</fo:basic-link>																								</xsl:for-each>																							</xsl:when>																							<xsl:otherwise>																								<xsl:for-each select="n1:Name">																									<fo:basic-link text-decoration="underline" color="blue">																										<xsl:variable name="altova:url" select="string(concat($v_ShortObjectID,$v_Suffix))"/>																										<xsl:choose>																											<xsl:when test="not($altova:url)">																												<xsl:attribute name="external-destination">																													<xsl:text>url()</xsl:text>																												</xsl:attribute>																											</xsl:when>																											<xsl:when test="substring($altova:url, 1, 1) = '#'">																												<xsl:attribute name="internal-destination">																													<xsl:value-of select="substring($altova:url, 2)"/>																												</xsl:attribute>																											</xsl:when>																											<xsl:otherwise>																												<xsl:attribute name="external-destination">																													<xsl:text>url(</xsl:text>																													<xsl:choose>																														<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">																															<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>																														</xsl:when>																														<xsl:otherwise>																															<xsl:call-template name="altova:double-backslash">																																<xsl:with-param name="text">																																	<xsl:value-of select="$altova:url"/>																																</xsl:with-param>																																<xsl:with-param name="text-length">																																	<xsl:value-of select="string-length($altova:url)"/>																																</xsl:with-param>																															</xsl:call-template>																														</xsl:otherwise>																													</xsl:choose>																													<xsl:text>)</xsl:text>																												</xsl:attribute>																											</xsl:otherwise>																										</xsl:choose>																										<fo:inline>																											<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																										</fo:inline>																									</fo:basic-link>																								</xsl:for-each>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:when>																					<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">																						<xsl:for-each select="n1:Name">																							<fo:inline>																								<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>																							</fo:inline>																						</xsl:for-each>																					</xsl:when>																				</xsl:choose>																			</fo:block>																		</fo:block-container>																	</fo:table-cell>																</fo:table-row>															</xsl:for-each>														</xsl:for-each>													</xsl:variable>													<xsl:choose>														<xsl:when test="string($altova:tablerows)">															<xsl:copy-of select="$altova:tablerows"/>														</xsl:when>														<xsl:otherwise>															<fo:table-row>																<fo:table-cell>																	<fo:block/>																</fo:table-cell>															</fo:table-row>														</xsl:otherwise>													</xsl:choose>												</fo:table-body>											</fo:table>										</xsl:if>										<xsl:if test="count( n1:ColumnsCollection )">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<fo:inline font-size="xx-small" font-style="italic">												<xsl:text>Columns</xsl:text>											</fo:inline>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<xsl:if test="n1:ColumnsCollection">												<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="14cm"/>													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="3cm"/>													<xsl:variable name="altova:CurrContextGrid_29" select="."/>													<fo:table-header start-indent="0pt">														<xsl:variable name="altova:tablerows">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>No</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Column Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>PK</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>FK</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>M</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Data Type</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Security</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-header>													<fo:table-body start-indent="0pt">														<xsl:variable name="altova:tablerows">															<xsl:for-each select="n1:ColumnsCollection">																<xsl:for-each select="n1:ColumnDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="right">																					<xsl:for-each select="n1:Sequence">																						<xsl:variable name="value-of-template_30">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_30),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_30"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_30"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ColumnName">																						<xsl:variable name="value-of-template_31">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_31),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_31"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_31"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:PK">																						<xsl:variable name="value-of-template_32">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_32),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_32"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_32"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FK">																						<xsl:variable name="value-of-template_33">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_33),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_33"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_33"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:M">																						<xsl:variable name="value-of-template_34">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_34),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_34"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_34"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:DataType">																						<xsl:variable name="value-of-template_35">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_35),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_35"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_35"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:Security">																						<xsl:variable name="value-of-template_36">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_36),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_36"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_36"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-body>												</fo:table>											</xsl:if>										</xsl:if>										<xsl:if test="count( n1:ColumnsCommentsCollection )">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<fo:inline font-size="xx-small" font-style="italic">												<xsl:text>Columns Comments</xsl:text>											</fo:inline>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<xsl:if test="n1:ColumnsCommentsCollection">												<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="6cm"/>													<fo:table-column column-width="9cm"/>													<fo:table-column column-width="9cm"/>													<xsl:variable name="altova:CurrContextGrid_37" select="."/>													<fo:table-header start-indent="0pt">														<xsl:variable name="altova:tablerows">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>No</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Column Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Description</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Notes</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-header>													<fo:table-body start-indent="0pt">														<xsl:variable name="altova:tablerows">															<xsl:for-each select="n1:ColumnsCommentsCollection">																<xsl:for-each select="n1:ColumnCommentsDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="right">																					<xsl:for-each select="n1:ColumnCommentsSequence">																						<xsl:variable name="value-of-template_38">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_38),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_38"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_38"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ColumnCommentsName">																						<xsl:variable name="value-of-template_39">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_39),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_39"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_39"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ColumnDescription">																						<xsl:variable name="value-of-template_40">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_40),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_40"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_40"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																						<fo:block/>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:ColumnNotes">																						<xsl:variable name="value-of-template_41">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_41),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_41"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_41"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																						<fo:block/>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-body>												</fo:table>											</xsl:if>										</xsl:if>										<xsl:if test="count( n1:FKRTCollection )">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<fo:inline font-size="xx-small" font-style="italic">												<xsl:text>Foreign Keys (referring to)</xsl:text>											</fo:inline>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<xsl:if test="n1:FKRTCollection">												<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">													<fo:table-column column-width="6cm"/>													<fo:table-column column-width="5cm"/>													<fo:table-column column-width="1.500cm"/>													<fo:table-column column-width="1.500cm"/>													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="2cm"/>													<xsl:variable name="altova:CurrContextGrid_42" select="."/>													<fo:table-header start-indent="0pt">														<xsl:variable name="altova:tablerows">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Refering To</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Mandatory</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Transferable</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>In Arc</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Columns</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Referred Columns</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Delete Rule</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-header>													<fo:table-body start-indent="0pt">														<xsl:variable name="altova:tablerows">															<xsl:for-each select="n1:FKRTCollection">																<xsl:for-each select="n1:FKRTDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKName">																						<xsl:variable name="value-of-template_43">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_43),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_43"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_43"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferringTo">																						<xsl:variable name="value-of-template_44">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_44),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_44"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_44"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKMandatory">																						<xsl:variable name="value-of-template_45">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_45),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_45"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_45"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKTransferable">																						<xsl:variable name="value-of-template_46">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_46),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_46"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_46"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKInArc">																						<xsl:variable name="value-of-template_47">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_47),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_47"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_47"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferringColumnName">																						<xsl:variable name="value-of-template_48">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_48),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_48"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_48"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferredColumnName">																						<xsl:variable name="value-of-template_49">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_49),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_49"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_49"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKDeleteRule">																						<xsl:variable name="value-of-template_50">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_50),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_50"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_50"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-body>												</fo:table>											</xsl:if>										</xsl:if>										<xsl:if test="count( n1:FKRFCollection )">											<fo:block>												<fo:leader leader-pattern="space"/>											</fo:block>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<fo:block margin-bottom="0.00in" margin-left="0.00in" margin-right="0.00in + 100% - 100%" margin-top="0.10in" padding="0" margin="0pt"/>											<fo:inline font-size="xx-small" font-style="italic">												<xsl:text>Foreign Keys (referred from)</xsl:text>											</fo:inline>											<fo:inline-container>												<fo:block>													<xsl:text>&#x200B;</xsl:text>												</fo:block>											</fo:inline-container>											<xsl:if test="n1:FKRFCollection">												<fo:table border-collapse="collapse" empty-cells="show" width="25cm" table-layout="fixed">													<fo:table-column column-width="6cm"/>													<fo:table-column column-width="5cm"/>													<fo:table-column column-width="1.500cm"/>													<fo:table-column column-width="1.500cm"/>													<fo:table-column column-width="1cm"/>													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="4cm"/>													<fo:table-column column-width="2cm"/>													<xsl:variable name="altova:CurrContextGrid_51" select="."/>													<fo:table-header start-indent="0pt">														<xsl:variable name="altova:tablerows">															<fo:table-row>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Name</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Referred From</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Mandatory</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Transferable</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>In Arc</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Columns</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Referred Columns</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>																<fo:table-cell background-color="rgb(231,249,255)" border="0.01cm solid black" padding="0" display-align="center">																	<fo:block-container overflow="hidden">																		<fo:block text-align="center">																			<fo:inline>																				<xsl:text>Delete Rule</xsl:text>																			</fo:inline>																		</fo:block>																	</fo:block-container>																</fo:table-cell>															</fo:table-row>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-header>													<fo:table-body start-indent="0pt">														<xsl:variable name="altova:tablerows">															<xsl:for-each select="n1:FKRFCollection">																<xsl:for-each select="n1:FKRFDetails">																	<fo:table-row>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKName">																						<xsl:variable name="value-of-template_52">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_52),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_52"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_52"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferredFrom">																						<xsl:variable name="value-of-template_53">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_53),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_53"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_53"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKMandatory">																						<xsl:variable name="value-of-template_54">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_54),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_54"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_54"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKTransferable">																						<xsl:variable name="value-of-template_55">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_55),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_55"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_55"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKInArc">																						<xsl:variable name="value-of-template_56">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_56),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_56"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_56"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferredColumnName">																						<xsl:variable name="value-of-template_57">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_57),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_57"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_57"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" white-space-treatment="ignore-if-surrounding-linefeed" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="left">																					<xsl:for-each select="n1:FKReferringColumnName">																						<xsl:variable name="value-of-template_58">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_58),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_58"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_58"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																		<fo:table-cell border="0.01cm solid black" padding="0.03in" display-align="before">																			<fo:block-container overflow="hidden">																				<fo:block text-align="center">																					<xsl:for-each select="n1:FKDeleteRule">																						<xsl:variable name="value-of-template_59">																							<xsl:apply-templates/>																						</xsl:variable>																						<xsl:choose>																							<xsl:when test="contains(string($value-of-template_59),'&#x200B;')">																								<fo:block>																									<xsl:copy-of select="$value-of-template_59"/>																								</fo:block>																							</xsl:when>																							<xsl:otherwise>																								<fo:inline>																									<xsl:copy-of select="$value-of-template_59"/>																								</fo:inline>																							</xsl:otherwise>																						</xsl:choose>																					</xsl:for-each>																				</fo:block>																			</fo:block-container>																		</fo:table-cell>																	</fo:table-row>																</xsl:for-each>															</xsl:for-each>														</xsl:variable>														<xsl:choose>															<xsl:when test="string($altova:tablerows)">																<xsl:copy-of select="$altova:tablerows"/>															</xsl:when>															<xsl:otherwise>																<fo:table-row>																	<fo:table-cell>																		<fo:block/>																	</fo:table-cell>																</fo:table-row>															</xsl:otherwise>														</xsl:choose>													</fo:table-body>												</fo:table>											</xsl:if>										</xsl:if>									</xsl:for-each>								</xsl:for-each>							</xsl:for-each>						</xsl:for-each>					</fo:block>					<fo:block id="SV_RefID_PageTotal"/>				</fo:flow>			</fo:page-sequence>		</fo:root>	</xsl:template>	<xsl:template name="altova:double-backslash">		<xsl:param name="text"/>		<xsl:param name="text-length"/>		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>		<xsl:choose>			<xsl:when test="$text-after-bs-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '\'">						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>					</xsl:when>					<xsl:otherwise>						<xsl:value-of select="$text"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>				<xsl:call-template name="altova:double-backslash">					<xsl:with-param name="text" select="$text-after-bs"/>					<xsl:with-param name="text-length" select="$text-after-bs-length"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:MakeValueAbsoluteIfPixels">		<xsl:param name="sValue"/>		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>		<xsl:choose>			<xsl:when test="$sBeforePx">				<xsl:variable name="nLengthOfInteger">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="$sBeforePx"/>					</xsl:call-template>				</xsl:variable>				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>				<xsl:variable name="sRest">					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="$sValue"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">		<xsl:param name="sText"/>		<xsl:variable name="sLen" select="string-length($sText)"/>		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>		<xsl:choose>			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">				<xsl:variable name="nResultOfRest">					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>					</xsl:call-template>				</xsl:variable>				<xsl:value-of select="$nResultOfRest + 1"/>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template></xsl:stylesheet>