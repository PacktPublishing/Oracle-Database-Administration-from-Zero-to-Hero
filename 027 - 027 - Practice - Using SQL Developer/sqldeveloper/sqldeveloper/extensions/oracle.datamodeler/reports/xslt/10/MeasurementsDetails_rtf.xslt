<?xml version="1.0" encoding="UTF-8"?><!--Designed and generated by Altova StyleVision Enterprise Edition 2014 (x64) - see http://www.altova.com/stylevision for more information.--><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://oracle.com/datamodeler/reports/measurements" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">	<xsl:output method="text" encoding="UTF-8"/>	<xsl:param name="SV_OutputFormat" select="'RTF'"/>	<xsl:param name="p1"/>	<xsl:param name="p2"/>	<xsl:variable name="XML" select="/"/>	<xsl:variable name="altova:nPxPerIn" select="96"/>	<xsl:template match="*" priority="-1.0">		<xsl:param name="altova:nMaxWidthIn" select="10.12500"/>		<xsl:param name="templatetablelevel" select="0"/>		<xsl:apply-templates>			<xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>			<xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>		</xsl:apply-templates>	</xsl:template>	<xsl:template match="/">		<xsl:variable name="altova:nMaxWidthIn" select="10.12500"/>		<xsl:variable name="templatetablelevel" select="0"/>		<xsl:text>{\rtf1\ansi\deff0</xsl:text>		<xsl:text>{\fonttbl{\f0\fnil Tahoma;}{\f1\fnil Arial;}{\f2\fnil Symbol;}{\f3\fnil Wingdings;}}</xsl:text>		<xsl:text>{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red0\green0\blue139;\red0\green0\blue205;\red0\green0\blue255;\red0\green100\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green139\blue139;\red0\green191\blue255;\red0\green206\blue209;\red0\green250\blue154;\red0\green255\blue0;\red0\green255\blue127;\red0\green255\blue255;\red0\green255\blue255;\red25\green25\blue112;\red30\green144\blue255;\red32\green178\blue170;\red34\green139\blue34;\red46\green139\blue87;\red47\green79\blue79;\red50\green205\blue50;\red60\green179\blue113;\red64\green224\blue208;\red65\green105\blue225;\red70\green130\blue180;\red72\green61\blue139;\red72\green209\blue204;\red75\green0\blue130;\red85\green107\blue47;\red95\green158\blue160;\red100\green149\blue237;\red102\green205\blue170;\red105\green105\blue105;\red106\green90\blue205;\red107\green142\blue35;\red112\green128\blue144;\red119\green136\blue153;\red123\green104\blue238;\red124\green252\blue0;\red127\green255\blue0;\red127\green255\blue212;\red128\green0\blue0;\red128\green0\blue128;\red128\green128\blue0;\red128\green128\blue128;\red135\green206\blue235;\red135\green206\blue250;\red138\green43\blue226;\red139\green0\blue0;\red139\green0\blue139;\red139\green69\blue19;\red143\green188\blue139;\red144\green238\blue144;\red147\green112\blue219;\red148\green0\blue211;\red152\green251\blue152;\red153\green50\blue204;\red154\green205\blue50;\red160\green82\blue45;\red165\green42\blue42;\red169\green169\blue169;\red173\green216\blue230;\red173\green255\blue47;\red175\green238\blue238;\red176\green196\blue222;\red176\green224\blue230;\red178\green34\blue34;\red184\green134\blue11;\red186\green85\blue211;\red188\green143\blue143;\red189\green183\blue107;\red192\green192\blue192;\red199\green21\blue133;\red205\green92\blue92;\red205\green133\blue63;\red210\green105\blue30;\red210\green180\blue140;\red211\green211\blue211;\red216\green191\blue216;\red218\green112\blue214;\red218\green165\blue32;\red219\green112\blue147;\red220\green20\blue60;\red220\green220\blue220;\red221\green160\blue221;\red222\green184\blue135;\red224\green255\blue255;\red230\green230\blue250;\red233\green150\blue122;\red238\green130\blue238;\red238\green232\blue170;\red240\green128\blue128;\red240\green230\blue140;\red240\green248\blue255;\red240\green255\blue240;\red240\green255\blue255;\red244\green164\blue96;\red245\green222\blue179;\red245\green245\blue220;\red245\green245\blue245;\red245\green255\blue250;\red248\green248\blue255;\red250\green128\blue114;\red250\green235\blue215;\red250\green240\blue230;\red250\green250\blue210;\red253\green245\blue230;\red255\green0\blue0;\red255\green0\blue255;\red255\green0\blue255;\red255\green20\blue147;\red255\green69\blue0;\red255\green99\blue71;\red255\green105\blue180;\red255\green127\blue80;\red255\green140\blue0;\red255\green160\blue122;\red255\green165\blue0;\red255\green182\blue193;\red255\green192\blue203;\red255\green215\blue0;\red255\green218\blue185;\red255\green222\blue173;\red255\green228\blue181;\red255\green228\blue196;\red255\green228\blue225;\red255\green235\blue205;\red255\green239\blue213;\red255\green240\blue245;\red255\green245\blue238;\red255\green248\blue220;\red255\green250\blue205;\red255\green250\blue240;\red255\green250\blue250;\red255\green255\blue0;\red255\green255\blue224;\red255\green255\blue240;\red255\green255\blue255;\red0\green176\blue35;\red0\green176\blue33;}</xsl:text>		<xsl:text>{\stylesheet</xsl:text>		<xsl:text>{\s0\f0\fs24\sl0\sb150\snext0 Normal;}</xsl:text>		<xsl:text>{\s1\f0\fs24\snext0 Paragraph;}</xsl:text>		<xsl:text>{\s2\f0\fs24\i\snext0 Address;}</xsl:text>		<xsl:text>{\s3\qc\f0\fs24\snext0 Center;}</xsl:text>		<xsl:text>{\s4\lin720\f0\fs24\snext0 Blockquote;}</xsl:text>		<xsl:text>{\s5\lin60\rin60\brdrs\brdrcf47\brdrw15\f0\fs24\snext0 Fieldset;}</xsl:text>		<xsl:text>{\s6\f1\fs24\snext0 Preformatted;}</xsl:text>		<xsl:text>{\s7\f1\fs24\snext0 Preformatted and wrapping;}</xsl:text>		<xsl:text>{\s8\f1\fs48\b\snext0 Heading 1;}</xsl:text>		<xsl:text>{\s9\f1\fs36\b\snext0 Heading 2;}</xsl:text>		<xsl:text>{\s10\f1\fs26\b\snext0 Heading 3;}</xsl:text>		<xsl:text>{\s11\f1\fs22\b\snext0 Heading 4;}</xsl:text>		<xsl:text>{\s12\f1\fs18\b\snext0 Heading 5;}</xsl:text>		<xsl:text>{\s13\f1\fs16\b\snext0 Heading 6;}</xsl:text>		<xsl:text>{\s16\sl0\sb150\snext0 p;}</xsl:text>		<xsl:text>{\s19\sl0\sb150\snext0 p;}</xsl:text>		<xsl:text>{\s22\sl0\sb150\snext0 p;}</xsl:text>		<xsl:text>{\*\cs15\fs26\snext0 Character caption;}</xsl:text>		<xsl:text>{\*\cs23\fs16\i\snext0 Character t_cap;}</xsl:text>		<xsl:text>{\*\cs28\f0\fs16\snext0 Character footer;}</xsl:text>		<xsl:text>{\*\cs31\f0\fs16\snext0 Character footer;}</xsl:text>		<xsl:text>{\*\ts17\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table table;}</xsl:text>		<xsl:text>{\*\ts18\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table w_20;}</xsl:text>		<xsl:text>{\*\ts20\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table table;}</xsl:text>		<xsl:text>{\*\ts21\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table w_16;}</xsl:text>		<xsl:text>{\*\ts24\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table table;}</xsl:text>		<xsl:text>{\*\ts25\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table w_25;}</xsl:text>		<xsl:text>{\*\ts26\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table table;}</xsl:text>		<xsl:text>{\*\ts27\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table w_25;}</xsl:text>		<xsl:text>{\*\ts29\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table table;}</xsl:text>		<xsl:text>{\*\ts30\tsrowd\ql\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table w_25;}</xsl:text>		<xsl:text>}</xsl:text>		<xsl:text>{\*\generator Altova StyleVision Enterprise Edition;}\viewkind1\viewzk0\viewscale100\newtblstyruls\nofeaturethrottle1 </xsl:text>		<xsl:text>\dntblnsbdb\fs24\f0 </xsl:text>		<xsl:call-template name="altova:DocumentSection_0">			<xsl:with-param name="altova:nMaxWidthIn" select="10.13"/>			<xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>		</xsl:call-template>		<xsl:text>}</xsl:text>	</xsl:template>	<xsl:template name="altova:DocumentSection_0">		<xsl:param name="altova:nMaxWidthIn"/>		<xsl:param name="templatetablelevel"/>		<xsl:text>\sectd\facingp\pgwsxn16820\pghsxn11900\lndscpsxn\margtsxn-1120\marglsxn1120\margbsxn-1120\margrsxn1120\headery380\footery380\cols1\colsx0\pgndec</xsl:text>		<xsl:text>{</xsl:text>		<xsl:text>\headerl </xsl:text>		<xsl:call-template name="EmptyHeader"/>		<xsl:text>}</xsl:text>		<xsl:text>{</xsl:text>		<xsl:text>\headerr </xsl:text>		<xsl:call-template name="EmptyHeader"/>		<xsl:text>}</xsl:text>		<xsl:text>{</xsl:text>		<xsl:text>\footerl </xsl:text>		<xsl:call-template name="altova:Section_0_FooterLeft"/>		<xsl:text>}</xsl:text>		<xsl:text>{</xsl:text>		<xsl:text>\footerr </xsl:text>		<xsl:call-template name="altova:Section_0_FooterRight"/>		<xsl:text>}</xsl:text>		<xsl:for-each select="$XML">			<xsl:for-each select="n1:Measurements">				<xsl:text>\par</xsl:text>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 0"/>				<xsl:text>\s3\qc\f0\fs24\sl0 </xsl:text>				<xsl:for-each select="n1:ReportCaption">					<xsl:text>{\cs15\fs26 </xsl:text>					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>					</xsl:apply-templates>					<xsl:text>}</xsl:text>				</xsl:for-each>				<xsl:text>\par\pard\s0\ql</xsl:text>				<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 0"/>				<xsl:text> </xsl:text>				<xsl:text>\par</xsl:text>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 0"/>				<xsl:text>\s0\f0\fs24\sl0\sb150\s16\sl0\sb150 </xsl:text>				<xsl:text>\par\pard\s0</xsl:text>				<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 0"/>				<xsl:text>\par </xsl:text>				<xsl:variable name="altova:CurrContextGrid_1" select="."/>				<xsl:variable name="altova:nTableWidthIn_0">					<xsl:choose>						<xsl:when test="7.87402 &gt; $altova:nMaxWidthIn">							<xsl:value-of select="$altova:nMaxWidthIn"/>						</xsl:when>						<xsl:otherwise>							<xsl:value-of select="7.87402"/>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:variable name="altova:nTableWidthTw_0" select="$altova:nTableWidthIn_0 * 1440"/>				<xsl:variable name="altova:SumDefaultColumnsForWideTableTw_0" select="round($altova:nTableWidthTw_0 * 0.25)"/>				<xsl:variable name="altova:nTableIndentTw_0" select="0"/>				<xsl:variable name="altova:nSumColumnWidthsTw_0" select="round(11339.58)"/>				<xsl:variable name="altova:TableWidthFactor_0">					<xsl:choose>						<xsl:when test="$altova:nSumColumnWidthsTw_0 &gt; $altova:nTableWidthTw_0">							<xsl:value-of select="$altova:nTableWidthTw_0 div $altova:nSumColumnWidthsTw_0"/>						</xsl:when>						<xsl:otherwise>							<xsl:value-of select="1"/>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:variable name="altova:nDefaultColumnWidthTw_0" select="0"/>				<xsl:variable name="altova:nColumnWidthTw_0_0" select="round(1.57 * 1440 * $altova:TableWidthFactor_0)"/>				<xsl:variable name="altova:nColumnWidthTw_0_1" select="round(6.30 * 1440 * $altova:TableWidthFactor_0)"/>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 1"/>				<xsl:variable name="tablestyle0">					<xsl:text>\trowd</xsl:text>					<xsl:text>\trautofit1</xsl:text>					<xsl:text>\trftsWidth3\trwWidth</xsl:text>					<xsl:value-of select="round($altova:nTableWidthTw_0)"/>					<xsl:text>\trleft</xsl:text>					<xsl:value-of select="$altova:nTableIndentTw_0"/>					<xsl:text>\ts17\ts18\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>				</xsl:variable>				<xsl:variable name="rowend0">					<xsl:choose>						<xsl:when test="$templatetablelevel + 1 = 1">							<xsl:text>\row\pard</xsl:text>						</xsl:when>						<xsl:otherwise>							<xsl:text>\nestrow}{\nonesttables\par}</xsl:text>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:variable name="cellend0">					<xsl:choose>						<xsl:when test="$templatetablelevel + 1 = 1">							<xsl:text>\cell</xsl:text>						</xsl:when>						<xsl:otherwise>							<xsl:text>\nestcell</xsl:text>						</xsl:otherwise>					</xsl:choose>				</xsl:variable>				<xsl:variable name="altova:RowStyle0">					<xsl:text>\trrh0</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>					<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>					<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>				</xsl:variable>				<xsl:if test="$templatetablelevel + 1 = 1">					<xsl:value-of select="$tablestyle0"/>					<xsl:value-of select="$altova:RowStyle0"/>				</xsl:if>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 1"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:call-template name="write-text">					<xsl:with-param name="text">						<xsl:text>Design Name</xsl:text>					</xsl:with-param>				</xsl:call-template>				<xsl:value-of select="$cellend0"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:for-each select="n1:DesignName">					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.03125 - 0.03125"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>				</xsl:for-each>				<xsl:value-of select="$cellend0"/>				<xsl:if test="$templatetablelevel + 1 > 1">					<xsl:text>{\*\nesttableprops</xsl:text>				</xsl:if>				<xsl:value-of select="$tablestyle0"/>				<xsl:value-of select="$altova:RowStyle0"/>				<xsl:value-of select="$rowend0"/>				<xsl:variable name="altova:RowStyle1">					<xsl:text>\trrh0</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>					<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>					<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>				</xsl:variable>				<xsl:if test="$templatetablelevel + 1 = 1">					<xsl:value-of select="$tablestyle0"/>					<xsl:value-of select="$altova:RowStyle1"/>				</xsl:if>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 1"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:call-template name="write-text">					<xsl:with-param name="text">						<xsl:text>Version Date</xsl:text>					</xsl:with-param>				</xsl:call-template>				<xsl:value-of select="$cellend0"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:for-each select="n1:VersionDate">					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.03125 - 0.03125"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>				</xsl:for-each>				<xsl:value-of select="$cellend0"/>				<xsl:if test="$templatetablelevel + 1 > 1">					<xsl:text>{\*\nesttableprops</xsl:text>				</xsl:if>				<xsl:value-of select="$tablestyle0"/>				<xsl:value-of select="$altova:RowStyle1"/>				<xsl:value-of select="$rowend0"/>				<xsl:variable name="altova:RowStyle2">					<xsl:text>\trrh0</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>					<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>					<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>				</xsl:variable>				<xsl:if test="$templatetablelevel + 1 = 1">					<xsl:value-of select="$tablestyle0"/>					<xsl:value-of select="$altova:RowStyle2"/>				</xsl:if>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 1"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:call-template name="write-text">					<xsl:with-param name="text">						<xsl:text>Version Comment</xsl:text>					</xsl:with-param>				</xsl:call-template>				<xsl:value-of select="$cellend0"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:for-each select="n1:VersionComment">					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.03125 - 0.03125"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>				</xsl:for-each>				<xsl:value-of select="$cellend0"/>				<xsl:if test="$templatetablelevel + 1 > 1">					<xsl:text>{\*\nesttableprops</xsl:text>				</xsl:if>				<xsl:value-of select="$tablestyle0"/>				<xsl:value-of select="$altova:RowStyle2"/>				<xsl:value-of select="$rowend0"/>				<xsl:variable name="altova:RowStyle3">					<xsl:text>\trrh0</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>					<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>					<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>					<xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">						<xsl:text>\clftsWidth1</xsl:text>					</xsl:if>					<xsl:text>\cellx</xsl:text>					<xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>					<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>				</xsl:variable>				<xsl:if test="$templatetablelevel + 1 = 1">					<xsl:value-of select="$tablestyle0"/>					<xsl:value-of select="$altova:RowStyle3"/>				</xsl:if>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 1"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:call-template name="write-text">					<xsl:with-param name="text">						<xsl:text>Model Name</xsl:text>					</xsl:with-param>				</xsl:call-template>				<xsl:value-of select="$cellend0"/>				<xsl:text>\ql\sl0 </xsl:text>				<xsl:for-each select="n1:ModelName">					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.03125 - 0.03125"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>				</xsl:for-each>				<xsl:value-of select="$cellend0"/>				<xsl:if test="$templatetablelevel + 1 > 1">					<xsl:text>{\*\nesttableprops</xsl:text>				</xsl:if>				<xsl:value-of select="$tablestyle0"/>				<xsl:value-of select="$altova:RowStyle3"/>				<xsl:value-of select="$rowend0"/>				<xsl:text>\pard</xsl:text>				<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>				<xsl:text>\itap</xsl:text>				<xsl:value-of select="$templatetablelevel + 0"/>				<xsl:text> </xsl:text>				<xsl:for-each select="n1:MCollection">					<xsl:for-each select="n1:MDetails">						<xsl:if test="../../n1:UsePageBreaks = &apos;true&apos;">							<xsl:text>\page</xsl:text>							<xsl:text>{}</xsl:text>						</xsl:if>						<xsl:text>\par\par</xsl:text>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 0"/>						<xsl:text>\s0\f0\fs24\sl0\sb150\s19\sl0\sb150 </xsl:text>						<xsl:text>\par\pard\s0</xsl:text>						<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 0"/>						<xsl:text>\par </xsl:text>						<xsl:variable name="altova:CurrContextGrid_2" select="."/>						<xsl:variable name="altova:nTableWidthIn_1">							<xsl:choose>								<xsl:when test="6.29921 &gt; $altova:nMaxWidthIn">									<xsl:value-of select="$altova:nMaxWidthIn"/>								</xsl:when>								<xsl:otherwise>									<xsl:value-of select="6.29921"/>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<xsl:variable name="altova:nTableWidthTw_1" select="$altova:nTableWidthIn_1 * 1440"/>						<xsl:variable name="altova:SumDefaultColumnsForWideTableTw_1" select="round($altova:nTableWidthTw_1 * 0.25)"/>						<xsl:variable name="altova:nTableIndentTw_1" select="0"/>						<xsl:variable name="altova:nSumColumnWidthsTw_1" select="round(9071.87)"/>						<xsl:variable name="altova:TableWidthFactor_1">							<xsl:choose>								<xsl:when test="$altova:nSumColumnWidthsTw_1 &gt; $altova:nTableWidthTw_1">									<xsl:value-of select="$altova:nTableWidthTw_1 div $altova:nSumColumnWidthsTw_1"/>								</xsl:when>								<xsl:otherwise>									<xsl:value-of select="1"/>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<xsl:variable name="altova:nDefaultColumnWidthTw_1" select="0"/>						<xsl:variable name="altova:nColumnWidthTw_1_0" select="round(1.57 * 1440 * $altova:TableWidthFactor_1)"/>						<xsl:variable name="altova:nColumnWidthTw_1_1" select="round(4.72 * 1440 * $altova:TableWidthFactor_1)"/>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:variable name="tablestyle1">							<xsl:text>\trowd</xsl:text>							<xsl:text>\trautofit1</xsl:text>							<xsl:text>\trftsWidth3\trwWidth</xsl:text>							<xsl:value-of select="round($altova:nTableWidthTw_1)"/>							<xsl:text>\trleft</xsl:text>							<xsl:value-of select="$altova:nTableIndentTw_1"/>							<xsl:text>\ts20\ts21\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>						</xsl:variable>						<xsl:variable name="rowend1">							<xsl:choose>								<xsl:when test="$templatetablelevel + 1 = 1">									<xsl:text>\row\pard</xsl:text>								</xsl:when>								<xsl:otherwise>									<xsl:text>\nestrow}{\nonesttables\par}</xsl:text>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<xsl:variable name="cellend1">							<xsl:choose>								<xsl:when test="$templatetablelevel + 1 = 1">									<xsl:text>\cell</xsl:text>								</xsl:when>								<xsl:otherwise>									<xsl:text>\nestcell</xsl:text>								</xsl:otherwise>							</xsl:choose>						</xsl:variable>						<xsl:variable name="altova:RowStyle4">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clcbpat142\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle4"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Measurement Name</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0\fs20 </xsl:text>						<xsl:for-each select="n1:MName">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.01042 - 0.01042"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:text>\fs24</xsl:text>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle4"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle5">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle5"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Comment</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MComment">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle5"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle6">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle6"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Notes</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MNotes">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle6"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle7">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle7"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Value</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MValue">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle7"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle8">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle8"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Unit</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MUnit">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle8"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle9">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle9"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Type</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MType">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle9"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle10">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle10"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Creation Date</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MCreationDate">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle10"/>						<xsl:value-of select="$rowend1"/>						<xsl:variable name="altova:RowStyle11">							<xsl:text>\trrh0</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>							<xsl:text>\clvertalt\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>							<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>							<xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">								<xsl:text>\clftsWidth1</xsl:text>							</xsl:if>							<xsl:text>\cellx</xsl:text>							<xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>							<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>						</xsl:variable>						<xsl:if test="$templatetablelevel + 1 = 1">							<xsl:value-of select="$tablestyle1"/>							<xsl:value-of select="$altova:RowStyle11"/>						</xsl:if>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text">								<xsl:text>Effective Note</xsl:text>							</xsl:with-param>						</xsl:call-template>						<xsl:value-of select="$cellend1"/>						<xsl:text>\ql\sl0 </xsl:text>						<xsl:for-each select="n1:MEffectiveDate">							<xsl:apply-templates>								<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) - 0.03125 - 0.03125"/>								<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>							</xsl:apply-templates>						</xsl:for-each>						<xsl:value-of select="$cellend1"/>						<xsl:if test="$templatetablelevel + 1 > 1">							<xsl:text>{\*\nesttableprops</xsl:text>						</xsl:if>						<xsl:value-of select="$tablestyle1"/>						<xsl:value-of select="$altova:RowStyle11"/>						<xsl:value-of select="$rowend1"/>						<xsl:text>\pard</xsl:text>						<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>						<xsl:text>\itap</xsl:text>						<xsl:value-of select="$templatetablelevel + 0"/>						<xsl:text> </xsl:text>						<xsl:if test="count(n1:MUsedInObjectCollection)">							<xsl:text>\pard</xsl:text>							<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>							<xsl:text>\itap</xsl:text>							<xsl:value-of select="$templatetablelevel + 0"/>							<xsl:text>\s0\f0\fs24\sl0\sb150\s22\sl0\sb150 </xsl:text>							<xsl:text>\par\pard</xsl:text>							<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>							<xsl:text>\itap</xsl:text>							<xsl:value-of select="$templatetablelevel + 0"/>							<xsl:text>\par </xsl:text>							<xsl:text>{\cs23\fs16\i </xsl:text>							<xsl:call-template name="write-text">								<xsl:with-param name="text">									<xsl:text>Impacted Objects</xsl:text>								</xsl:with-param>							</xsl:call-template>							<xsl:text>}</xsl:text>							<xsl:variable name="altova:CurrContextGrid_3" select="."/>							<xsl:variable name="altova:nTableWidthIn_2">								<xsl:choose>									<xsl:when test="9.84252 &gt; $altova:nMaxWidthIn">										<xsl:value-of select="$altova:nMaxWidthIn"/>									</xsl:when>									<xsl:otherwise>										<xsl:value-of select="9.84252"/>									</xsl:otherwise>								</xsl:choose>							</xsl:variable>							<xsl:variable name="altova:nTableWidthTw_2" select="$altova:nTableWidthIn_2 * 1440"/>							<xsl:variable name="altova:SumDefaultColumnsForWideTableTw_2" select="round($altova:nTableWidthTw_2 * 0.25)"/>							<xsl:variable name="altova:nTableIndentTw_2" select="0"/>							<xsl:variable name="altova:nSumColumnWidthsTw_2" select="round(14174.73)"/>							<xsl:variable name="altova:TableWidthFactor_2">								<xsl:choose>									<xsl:when test="$altova:nSumColumnWidthsTw_2 &gt; $altova:nTableWidthTw_2">										<xsl:value-of select="$altova:nTableWidthTw_2 div $altova:nSumColumnWidthsTw_2"/>									</xsl:when>									<xsl:otherwise>										<xsl:value-of select="1"/>									</xsl:otherwise>								</xsl:choose>							</xsl:variable>							<xsl:variable name="altova:nDefaultColumnWidthTw_2" select="0"/>							<xsl:variable name="altova:nColumnWidthTw_2_0" select="round(3.15 * 1440 * $altova:TableWidthFactor_2)"/>							<xsl:variable name="altova:nColumnWidthTw_2_1" select="round(3.35 * 1440 * $altova:TableWidthFactor_2)"/>							<xsl:variable name="altova:nColumnWidthTw_2_2" select="round(3.35 * 1440 * $altova:TableWidthFactor_2)"/>							<xsl:text>\par </xsl:text>							<xsl:text>\pard</xsl:text>							<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>							<xsl:text>\itap</xsl:text>							<xsl:value-of select="$templatetablelevel + 1"/>							<xsl:variable name="tablestyle2">								<xsl:text>\trowd</xsl:text>								<xsl:text>\trautofit1</xsl:text>								<xsl:text>\trftsWidth3\trwWidth</xsl:text>								<xsl:value-of select="round($altova:nTableWidthTw_2)"/>								<xsl:text>\trleft</xsl:text>								<xsl:value-of select="$altova:nTableIndentTw_2"/>								<xsl:text>\ts24\ts25\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>							</xsl:variable>							<xsl:variable name="rowend2">								<xsl:choose>									<xsl:when test="$templatetablelevel + 1 = 1">										<xsl:text>\row\pard</xsl:text>									</xsl:when>									<xsl:otherwise>										<xsl:text>\nestrow}{\nonesttables\par}</xsl:text>									</xsl:otherwise>								</xsl:choose>							</xsl:variable>							<xsl:variable name="cellend2">								<xsl:choose>									<xsl:when test="$templatetablelevel + 1 = 1">										<xsl:text>\cell</xsl:text>									</xsl:when>									<xsl:otherwise>										<xsl:text>\nestcell</xsl:text>									</xsl:otherwise>								</xsl:choose>							</xsl:variable>							<xsl:variable name="altova:RowStyle12">								<xsl:text>\trrh0\trhdr</xsl:text>								<xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>								<xsl:text>\clvertalc\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>								<xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">									<xsl:text>\clftsWidth1</xsl:text>								</xsl:if>								<xsl:text>\cellx</xsl:text>								<xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>								<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>								<xsl:text>\clvertalc\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>								<xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">									<xsl:text>\clftsWidth1</xsl:text>								</xsl:if>								<xsl:text>\cellx</xsl:text>								<xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>								<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>								<xsl:text>\clvertalc\clcbpat141\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>								<xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">									<xsl:text>\clftsWidth1</xsl:text>								</xsl:if>								<xsl:text>\cellx</xsl:text>								<xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>								<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>							</xsl:variable>							<xsl:if test="$templatetablelevel + 1 = 1">								<xsl:value-of select="$tablestyle2"/>								<xsl:value-of select="$altova:RowStyle12"/>							</xsl:if>							<xsl:text>\pard</xsl:text>							<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>							<xsl:text>\itap</xsl:text>							<xsl:value-of select="$templatetablelevel + 1"/>							<xsl:text>\qc\sl0 </xsl:text>							<xsl:call-template name="write-text">								<xsl:with-param name="text">									<xsl:text>Model Name</xsl:text>								</xsl:with-param>							</xsl:call-template>							<xsl:value-of select="$cellend2"/>							<xsl:text>\qc\sl0 </xsl:text>							<xsl:call-template name="write-text">								<xsl:with-param name="text">									<xsl:text>Type</xsl:text>								</xsl:with-param>							</xsl:call-template>							<xsl:value-of select="$cellend2"/>							<xsl:text>\qc\sl0 </xsl:text>							<xsl:call-template name="write-text">								<xsl:with-param name="text">									<xsl:text>Object Name</xsl:text>								</xsl:with-param>							</xsl:call-template>							<xsl:value-of select="$cellend2"/>							<xsl:if test="$templatetablelevel + 1 > 1">								<xsl:text>{\*\nesttableprops</xsl:text>							</xsl:if>							<xsl:value-of select="$tablestyle2"/>							<xsl:value-of select="$altova:RowStyle12"/>							<xsl:value-of select="$rowend2"/>							<xsl:for-each select="n1:MUsedInObjectCollection">								<xsl:for-each select="n1:MUsedInObjectDetails">									<xsl:variable name="altova:RowStyle13">										<xsl:text>\trrh0</xsl:text>										<xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>										<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>										<xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">											<xsl:text>\clftsWidth1</xsl:text>										</xsl:if>										<xsl:text>\cellx</xsl:text>										<xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>										<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>										<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>										<xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">											<xsl:text>\clftsWidth1</xsl:text>										</xsl:if>										<xsl:text>\cellx</xsl:text>										<xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>										<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>										<xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw5\clbrdrb\brdrs\brdrcf1\brdrw5\clbrdrl\brdrs\brdrcf1\brdrw5\clbrdrr\brdrs\brdrcf1\brdrw5\clpadl45\clpadfl3\clpadb45\clpadfb3\clpadt45\clpadft3\clpadr45\clpadfr3</xsl:text>										<xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">											<xsl:text>\clftsWidth1</xsl:text>										</xsl:if>										<xsl:text>\cellx</xsl:text>										<xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>										<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>									</xsl:variable>									<xsl:if test="$templatetablelevel + 1 = 1">										<xsl:value-of select="$tablestyle2"/>										<xsl:value-of select="$altova:RowStyle13"/>									</xsl:if>									<xsl:text>\pard</xsl:text>									<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>									<xsl:text>\itap</xsl:text>									<xsl:value-of select="$templatetablelevel + 1"/>									<xsl:text>\ql\sl0 </xsl:text>									<xsl:for-each select="n1:ModelName">										<xsl:apply-templates>											<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_0 div 1440) - 0.03125 - 0.03125"/>											<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>										</xsl:apply-templates>									</xsl:for-each>									<xsl:value-of select="$cellend2"/>									<xsl:text>\ql\sl0 </xsl:text>									<xsl:for-each select="n1:TypeName">										<xsl:apply-templates>											<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_1 div 1440) - 0.03125 - 0.03125"/>											<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>										</xsl:apply-templates>									</xsl:for-each>									<xsl:value-of select="$cellend2"/>									<xsl:text>\ql\sl0 </xsl:text>									<xsl:for-each select="n1:ObjectName">										<xsl:apply-templates>											<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_2 div 1440) - 0.03125 - 0.03125"/>											<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>										</xsl:apply-templates>									</xsl:for-each>									<xsl:value-of select="$cellend2"/>									<xsl:if test="$templatetablelevel + 1 > 1">										<xsl:text>{\*\nesttableprops</xsl:text>									</xsl:if>									<xsl:value-of select="$tablestyle2"/>									<xsl:value-of select="$altova:RowStyle13"/>									<xsl:value-of select="$rowend2"/>								</xsl:for-each>							</xsl:for-each>							<xsl:text>\pard</xsl:text>							<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>							<xsl:text>\itap</xsl:text>							<xsl:value-of select="$templatetablelevel + 0"/>							<xsl:text> </xsl:text>						</xsl:if>					</xsl:for-each>				</xsl:for-each>			</xsl:for-each>		</xsl:for-each>	</xsl:template>	<xsl:template name="altova:Section_0_FooterRight">		<xsl:variable name="altova:nMaxWidthIn" select="10.13"/>		<xsl:variable name="templatetablelevel" select="0"/>		<xsl:variable name="altova:CurrContextGrid_4" select="."/>		<xsl:variable name="altova:nTableWidthIn_3">			<xsl:choose>				<xsl:when test="9.84252 &gt; $altova:nMaxWidthIn">					<xsl:value-of select="$altova:nMaxWidthIn"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="9.84252"/>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:nTableWidthTw_3" select="$altova:nTableWidthIn_3 * 1440"/>		<xsl:variable name="altova:SumDefaultColumnsForWideTableTw_3" select="round($altova:nTableWidthTw_3 * 0.25)"/>		<xsl:variable name="altova:nTableIndentTw_3" select="0"/>		<xsl:variable name="altova:nSumColumnWidthsTw_3" select="round(14174.73)"/>		<xsl:variable name="altova:TableWidthFactor_3">			<xsl:choose>				<xsl:when test="$altova:nSumColumnWidthsTw_3 &gt; $altova:nTableWidthTw_3">					<xsl:value-of select="$altova:nTableWidthTw_3 div $altova:nSumColumnWidthsTw_3"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="1"/>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:nDefaultColumnWidthTw_3" select="0"/>		<xsl:variable name="altova:nColumnWidthTw_3_0" select="round(7.48 * 1440 * $altova:TableWidthFactor_3)"/>		<xsl:variable name="altova:nColumnWidthTw_3_1" select="round(1.18 * 1440 * $altova:TableWidthFactor_3)"/>		<xsl:variable name="altova:nColumnWidthTw_3_2" select="round(1.18 * 1440 * $altova:TableWidthFactor_3)"/>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:variable name="tablestyle3">			<xsl:text>\trowd</xsl:text>			<xsl:text>\trautofit1</xsl:text>			<xsl:text>\trftsWidth3\trwWidth</xsl:text>			<xsl:value-of select="round($altova:nTableWidthTw_3)"/>			<xsl:text>\trleft</xsl:text>			<xsl:value-of select="$altova:nTableIndentTw_3"/>			<xsl:text>\ts26\ts27\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>		</xsl:variable>		<xsl:variable name="rowend3">			<xsl:choose>				<xsl:when test="$templatetablelevel + 1 = 1">					<xsl:text>\row\pard</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>\nestrow}{\nonesttables\par}</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="cellend3">			<xsl:choose>				<xsl:when test="$templatetablelevel + 1 = 1">					<xsl:text>\cell</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>\nestcell</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:RowStyle14">			<xsl:text>\trrh0</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>		</xsl:variable>		<xsl:if test="$templatetablelevel + 1 = 1">			<xsl:value-of select="$tablestyle3"/>			<xsl:value-of select="$altova:RowStyle14"/>		</xsl:if>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\ql\sl0\f0\fs16 </xsl:text>		<xsl:for-each select="$XML">			<xsl:for-each select="n1:Measurements">				<xsl:for-each select="n1:CompanyName">					<xsl:text>{\cs28\f0\fs16 </xsl:text>					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_0 div 1440) - 0.02083 - 0.02083"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>					<xsl:text>}</xsl:text>				</xsl:for-each>			</xsl:for-each>		</xsl:for-each>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend3"/>		<xsl:text>\qr\sl0\f0\fs12\b0 </xsl:text>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\qr\sl0\f0\fs12\b0\s6\f1\fs24\sl0 </xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text>Oracle Data Modeler  |</xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text>\f0\fs24</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend3"/>		<xsl:text>\ql\sl0\f0\fs12\b0 </xsl:text>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\ql\sl0\f0\fs12\b0\s6\f1\fs24\sl0 </xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text>Page: </xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text/>		<xsl:text>\chpgn</xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text> / </xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text>{\field{\*\fldinst{ NUMPAGES }}{\fldrslt }}</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend3"/>		<xsl:if test="$templatetablelevel + 1 > 1">			<xsl:text>{\*\nesttableprops</xsl:text>		</xsl:if>		<xsl:value-of select="$tablestyle3"/>		<xsl:value-of select="$altova:RowStyle14"/>		<xsl:value-of select="$rowend3"/>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 0"/>		<xsl:text> </xsl:text>	</xsl:template>	<xsl:template name="altova:Section_0_FooterLeft">		<xsl:variable name="altova:nMaxWidthIn" select="10.13"/>		<xsl:variable name="templatetablelevel" select="0"/>		<xsl:variable name="altova:CurrContextGrid_4" select="."/>		<xsl:variable name="altova:nTableWidthIn_4">			<xsl:choose>				<xsl:when test="9.84252 &gt; $altova:nMaxWidthIn">					<xsl:value-of select="$altova:nMaxWidthIn"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="9.84252"/>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:nTableWidthTw_4" select="$altova:nTableWidthIn_4 * 1440"/>		<xsl:variable name="altova:SumDefaultColumnsForWideTableTw_4" select="round($altova:nTableWidthTw_4 * 0.25)"/>		<xsl:variable name="altova:nTableIndentTw_4" select="0"/>		<xsl:variable name="altova:nSumColumnWidthsTw_4" select="round(14174.73)"/>		<xsl:variable name="altova:TableWidthFactor_4">			<xsl:choose>				<xsl:when test="$altova:nSumColumnWidthsTw_4 &gt; $altova:nTableWidthTw_4">					<xsl:value-of select="$altova:nTableWidthTw_4 div $altova:nSumColumnWidthsTw_4"/>				</xsl:when>				<xsl:otherwise>					<xsl:value-of select="1"/>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:nDefaultColumnWidthTw_4" select="0"/>		<xsl:variable name="altova:nColumnWidthTw_4_0" select="round(7.48 * 1440 * $altova:TableWidthFactor_4)"/>		<xsl:variable name="altova:nColumnWidthTw_4_1" select="round(1.18 * 1440 * $altova:TableWidthFactor_4)"/>		<xsl:variable name="altova:nColumnWidthTw_4_2" select="round(1.18 * 1440 * $altova:TableWidthFactor_4)"/>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:variable name="tablestyle4">			<xsl:text>\trowd</xsl:text>			<xsl:text>\trautofit1</xsl:text>			<xsl:text>\trftsWidth3\trwWidth</xsl:text>			<xsl:value-of select="round($altova:nTableWidthTw_4)"/>			<xsl:text>\trleft</xsl:text>			<xsl:value-of select="$altova:nTableIndentTw_4"/>			<xsl:text>\ts29\ts30\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>		</xsl:variable>		<xsl:variable name="rowend4">			<xsl:choose>				<xsl:when test="$templatetablelevel + 1 = 1">					<xsl:text>\row\pard</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>\nestrow}{\nonesttables\par}</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="cellend4">			<xsl:choose>				<xsl:when test="$templatetablelevel + 1 = 1">					<xsl:text>\cell</xsl:text>				</xsl:when>				<xsl:otherwise>					<xsl:text>\nestcell</xsl:text>				</xsl:otherwise>			</xsl:choose>		</xsl:variable>		<xsl:variable name="altova:RowStyle15">			<xsl:text>\trrh0</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>			<xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>			<xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">				<xsl:text>\clftsWidth1</xsl:text>			</xsl:if>			<xsl:text>\cellx</xsl:text>			<xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>			<xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>		</xsl:variable>		<xsl:if test="$templatetablelevel + 1 = 1">			<xsl:value-of select="$tablestyle4"/>			<xsl:value-of select="$altova:RowStyle15"/>		</xsl:if>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\ql\sl0\f0\fs16 </xsl:text>		<xsl:for-each select="$XML">			<xsl:for-each select="n1:Measurements">				<xsl:for-each select="n1:CompanyName">					<xsl:text>{\cs31\f0\fs16 </xsl:text>					<xsl:apply-templates>						<xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_0 div 1440) - 0.02083 - 0.02083"/>						<xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>					</xsl:apply-templates>					<xsl:text>}</xsl:text>				</xsl:for-each>			</xsl:for-each>		</xsl:for-each>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend4"/>		<xsl:text>\qr\sl0\f0\fs12\b0 </xsl:text>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\qr\sl0\f0\fs12\b0\s6\f1\fs24\sl0 </xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text>Oracle Data Modeler  |</xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text>\f0\fs24</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend4"/>		<xsl:text>\ql\sl0\f0\fs12\b0 </xsl:text>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 1"/>		<xsl:text>\ql\sl0\f0\fs12\b0\s6\f1\fs24\sl0 </xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text>Page: </xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text/>		<xsl:text>\chpgn</xsl:text>		<xsl:call-template name="write-text">			<xsl:with-param name="text">				<xsl:text> / </xsl:text>			</xsl:with-param>		</xsl:call-template>		<xsl:text>{\field{\*\fldinst{ NUMPAGES }}{\fldrslt }}</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:text>\f0\fs24</xsl:text>		<xsl:value-of select="$cellend4"/>		<xsl:if test="$templatetablelevel + 1 > 1">			<xsl:text>{\*\nesttableprops</xsl:text>		</xsl:if>		<xsl:value-of select="$tablestyle4"/>		<xsl:value-of select="$altova:RowStyle15"/>		<xsl:value-of select="$rowend4"/>		<xsl:text>\pard</xsl:text>		<xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>		<xsl:text>\itap</xsl:text>		<xsl:value-of select="$templatetablelevel + 0"/>		<xsl:text> </xsl:text>	</xsl:template>	<xsl:template name="EmptyHeader"/>	<xsl:template name="write-text">		<xsl:param name="text"/>		<xsl:param name="bEscape" select="true()"/>		<xsl:choose>			<xsl:when test="$bEscape">				<xsl:variable name="sLinefeed" select="'&#x0A;'"/>				<xsl:choose>					<xsl:when test="contains($text, $sLinefeed)">						<xsl:variable name="first-line" select="substring-before($text, $sLinefeed)"/>						<xsl:variable name="rest" select="substring-after($text, $sLinefeed)"/>						<xsl:call-template name="write-text-line">							<xsl:with-param name="text" select="$first-line"/>						</xsl:call-template>						<xsl:text>\u13?</xsl:text>						<xsl:call-template name="write-text">							<xsl:with-param name="text" select="$rest"/>						</xsl:call-template>					</xsl:when>					<xsl:otherwise>						<xsl:call-template name="write-text-line">							<xsl:with-param name="text" select="$text"/>						</xsl:call-template>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="string($text)"/>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="write-text-line">		<xsl:param name="text"/>		<xsl:variable name="text-length" select="string-length($text)"/>		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>		<xsl:choose>			<xsl:when test="$text-after-bs-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '\'">						<xsl:call-template name="write-text-ob">							<xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\\')"/>							<xsl:with-param name="text-length" select="$text-length + 1"/>						</xsl:call-template>					</xsl:when>					<xsl:otherwise>						<xsl:call-template name="write-text-ob">							<xsl:with-param name="text" select="$text"/>							<xsl:with-param name="text-length" select="$text-length"/>						</xsl:call-template>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:call-template name="write-text-ob">					<xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>					<xsl:with-param name="text-length" select="$text-length - $text-after-bs-length + 1"/>				</xsl:call-template>				<xsl:call-template name="write-text-line">					<xsl:with-param name="text" select="$text-after-bs"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="write-text-ob">		<xsl:param name="text"/>		<xsl:param name="text-length"/>		<xsl:variable name="text-after-ob" select="substring-after($text, '{')"/>		<xsl:variable name="text-after-ob-length" select="string-length($text-after-ob)"/>		<xsl:choose>			<xsl:when test="$text-after-ob-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '{'">						<xsl:call-template name="write-text-cb">							<xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\{')"/>							<xsl:with-param name="text-length" select="$text-length + 1"/>						</xsl:call-template>					</xsl:when>					<xsl:otherwise>						<xsl:call-template name="write-text-cb">							<xsl:with-param name="text" select="$text"/>							<xsl:with-param name="text-length" select="$text-length"/>						</xsl:call-template>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:call-template name="write-text-cb">					<xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-ob-length - 1), '\{')"/>					<xsl:with-param name="text-length" select="$text-length - $text-after-ob-length + 1"/>				</xsl:call-template>				<xsl:call-template name="write-text-ob">					<xsl:with-param name="text" select="$text-after-ob"/>					<xsl:with-param name="text-length" select="$text-after-ob-length"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="write-text-cb">		<xsl:param name="text"/>		<xsl:param name="text-length"/>		<xsl:variable name="text-after-cb" select="substring-after($text, '}')"/>		<xsl:variable name="text-after-cb-length" select="string-length($text-after-cb)"/>		<xsl:choose>			<xsl:when test="$text-after-cb-length = 0">				<xsl:choose>					<xsl:when test="substring($text, $text-length) = '}'">						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\}')"/>					</xsl:when>					<xsl:otherwise>						<xsl:value-of select="$text"/>					</xsl:otherwise>				</xsl:choose>			</xsl:when>			<xsl:otherwise>				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-cb-length - 1), '\}')"/>				<xsl:call-template name="write-text-cb">					<xsl:with-param name="text" select="$text-after-cb"/>					<xsl:with-param name="text-length" select="$text-after-cb-length"/>				</xsl:call-template>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template match="text()|@*">		<xsl:call-template name="write-text">			<xsl:with-param name="text" select="."/>		</xsl:call-template>	</xsl:template>	<xsl:template name="altova:GetColorID">		<xsl:param name="text"/>		<xsl:variable name="txt" select="translate($text, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>		<xsl:choose>			<xsl:when test="$txt = 'WHITE'">				<xsl:text>140</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'IVORY'">				<xsl:text>139</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTYELLOW'">				<xsl:text>138</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'YELLOW'">				<xsl:text>137</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SNOW'">				<xsl:text>136</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FLORALWHITE'">				<xsl:text>135</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LEMONCHIFFON'">				<xsl:text>134</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CORNSILK'">				<xsl:text>133</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SEASHELL'">				<xsl:text>132</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LAVENDERBLUSH'">				<xsl:text>131</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PAPAYAWHIP'">				<xsl:text>130</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BLANCHEDALMOND'">				<xsl:text>129</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MISTYROSE'">				<xsl:text>128</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BISQUE'">				<xsl:text>127</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MOCCASIN'">				<xsl:text>126</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'NAVAJOWHITE'">				<xsl:text>125</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PEACHPUFF'">				<xsl:text>124</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GOLD'">				<xsl:text>123</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PINK'">				<xsl:text>122</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTPINK'">				<xsl:text>121</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ORANGE'">				<xsl:text>120</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTSALMON'">				<xsl:text>119</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKORANGE'">				<xsl:text>118</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CORAL'">				<xsl:text>117</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'HOTPINK'">				<xsl:text>116</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'TOMATO'">				<xsl:text>115</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ORANGERED'">				<xsl:text>114</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DEEPPINK'">				<xsl:text>113</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FUCHSIA'">				<xsl:text>112</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MAGENTA'">				<xsl:text>111</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'RED'">				<xsl:text>110</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'OLDLACE'">				<xsl:text>109</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTGOLDENRODYELLOW'">				<xsl:text>108</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LINEN'">				<xsl:text>107</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ANTIQUEWHITE'">				<xsl:text>106</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SALMON'">				<xsl:text>105</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GHOSTWHITE'">				<xsl:text>104</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MINTCREAM'">				<xsl:text>103</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'WHITESMOKE'">				<xsl:text>102</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BEIGE'">				<xsl:text>101</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'WHEAT'">				<xsl:text>100</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SANDYBROWN'">				<xsl:text>99</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'AZURE'">				<xsl:text>98</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'HONEYDEW'">				<xsl:text>97</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ALICEBLUE'">				<xsl:text>96</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'KHAKI'">				<xsl:text>95</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTCORAL'">				<xsl:text>94</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PALEGOLDENROD'">				<xsl:text>93</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'VIOLET'">				<xsl:text>92</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKSALMON'">				<xsl:text>91</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LAVENDER'">				<xsl:text>90</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTCYAN'">				<xsl:text>89</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BURLYWOOD'">				<xsl:text>88</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PLUM'">				<xsl:text>87</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GAINSBORO'">				<xsl:text>86</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CRIMSON'">				<xsl:text>85</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PALEVIOLETRED'">				<xsl:text>84</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GOLDENROD'">				<xsl:text>83</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ORCHID'">				<xsl:text>82</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'THISTLE'">				<xsl:text>81</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTGRAY'">				<xsl:text>80</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'TAN'">				<xsl:text>79</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CHOCOLATE'">				<xsl:text>78</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PERU'">				<xsl:text>77</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'INDIANRED'">				<xsl:text>76</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMVIOLETRED'">				<xsl:text>75</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SILVER'">				<xsl:text>74</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKKHAKI'">				<xsl:text>73</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ROSYBROWN'">				<xsl:text>72</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMORCHID'">				<xsl:text>71</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKGOLDENROD'">				<xsl:text>70</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FIREBRICK'">				<xsl:text>69</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'POWDERBLUE'">				<xsl:text>68</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTSTEELBLUE'">				<xsl:text>67</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PALETURQUOISE'">				<xsl:text>66</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GREENYELLOW'">				<xsl:text>65</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTBLUE'">				<xsl:text>64</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKGRAY'">				<xsl:text>63</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BROWN'">				<xsl:text>62</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SIENNA'">				<xsl:text>61</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'YELLOWGREEN'">				<xsl:text>60</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKORCHID'">				<xsl:text>59</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PALEGREEN'">				<xsl:text>58</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKVIOLET'">				<xsl:text>57</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMPURPLE'">				<xsl:text>56</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTGREEN'">				<xsl:text>55</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKSEAGREEN'">				<xsl:text>54</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SADDLEBROWN'">				<xsl:text>53</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKMAGENTA'">				<xsl:text>52</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKRED'">				<xsl:text>51</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BLUEVIOLET'">				<xsl:text>50</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTSKYBLUE'">				<xsl:text>49</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SKYBLUE'">				<xsl:text>48</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GRAY'">				<xsl:text>47</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'OLIVE'">				<xsl:text>46</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'PURPLE'">				<xsl:text>45</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MAROON'">				<xsl:text>44</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'AQUAMARINE'">				<xsl:text>43</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CHARTREUSE'">				<xsl:text>42</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LAWNGREEN'">				<xsl:text>41</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMSLATEBLUE'">				<xsl:text>40</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTSLATEGRAY'">				<xsl:text>39</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SLATEGRAY'">				<xsl:text>38</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'OLIVEDRAB'">				<xsl:text>37</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SLATEBLUE'">				<xsl:text>36</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DIMGRAY'">				<xsl:text>35</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMAQUAMARINE'">				<xsl:text>34</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CORNFLOWERBLUE'">				<xsl:text>33</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CADETBLUE'">				<xsl:text>32</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKOLIVEGREEN'">				<xsl:text>31</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'INDIGO'">				<xsl:text>30</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMTURQUOISE'">				<xsl:text>29</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKSLATEBLUE'">				<xsl:text>28</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'STEELBLUE'">				<xsl:text>27</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ROYALBLUE'">				<xsl:text>26</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'TURQUOISE'">				<xsl:text>25</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMSEAGREEN'">				<xsl:text>24</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIMEGREEN'">				<xsl:text>23</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKSLATEGRAY'">				<xsl:text>22</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SEAGREEN'">				<xsl:text>21</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FORESTGREEN'">				<xsl:text>20</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIGHTSEAGREEN'">				<xsl:text>19</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DODGERBLUE'">				<xsl:text>18</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MIDNIGHTBLUE'">				<xsl:text>17</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CYAN'">				<xsl:text>16</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'AQUA'">				<xsl:text>15</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'SPRINGGREEN'">				<xsl:text>14</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'LIME'">				<xsl:text>13</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMSPRINGGREEN'">				<xsl:text>12</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKTURQUOISE'">				<xsl:text>11</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DEEPSKYBLUE'">				<xsl:text>10</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKCYAN'">				<xsl:text>9</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'TEAL'">				<xsl:text>8</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'GREEN'">				<xsl:text>7</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKGREEN'">				<xsl:text>6</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BLUE'">				<xsl:text>5</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'MEDIUMBLUE'">				<xsl:text>4</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DARKBLUE'">				<xsl:text>3</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'NAVY'">				<xsl:text>2</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BLACK'">				<xsl:text>1</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFFFF'">				<xsl:text>140</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFFF0'">				<xsl:text>139</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFFE0'">				<xsl:text>138</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFF00'">				<xsl:text>137</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFAFA'">				<xsl:text>136</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFAF0'">				<xsl:text>135</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFFACD'">				<xsl:text>134</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFF8DC'">				<xsl:text>133</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFF5EE'">				<xsl:text>132</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFF0F5'">				<xsl:text>131</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFEFD5'">				<xsl:text>130</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFEBCD'">				<xsl:text>129</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFE4E1'">				<xsl:text>128</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFE4C4'">				<xsl:text>127</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFE4B5'">				<xsl:text>126</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFDEAD'">				<xsl:text>125</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFDAB9'">				<xsl:text>124</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFD700'">				<xsl:text>123</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFC0CB'">				<xsl:text>122</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFB6C1'">				<xsl:text>121</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFA500'">				<xsl:text>120</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FFA07A'">				<xsl:text>119</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF8C00'">				<xsl:text>118</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF7F50'">				<xsl:text>117</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF69B4'">				<xsl:text>116</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF6347'">				<xsl:text>115</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF4500'">				<xsl:text>114</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF1493'">				<xsl:text>113</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF00FF'">				<xsl:text>112</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF00FF'">				<xsl:text>111</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FF0000'">				<xsl:text>110</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FDF5E6'">				<xsl:text>109</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FAFAD2'">				<xsl:text>108</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FAF0E6'">				<xsl:text>107</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FAEBD7'">				<xsl:text>106</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'FA8072'">				<xsl:text>105</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F8F8FF'">				<xsl:text>104</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F5FFFA'">				<xsl:text>103</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F5F5F5'">				<xsl:text>102</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F5F5DC'">				<xsl:text>101</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F5DEB3'">				<xsl:text>100</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F4A460'">				<xsl:text>99</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F0FFFF'">				<xsl:text>98</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F0FFF0'">				<xsl:text>97</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F0F8FF'">				<xsl:text>96</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F0E68C'">				<xsl:text>95</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'F08080'">				<xsl:text>94</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'EEE8AA'">				<xsl:text>93</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'EE82EE'">				<xsl:text>92</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'E9967A'">				<xsl:text>91</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'E6E6FA'">				<xsl:text>90</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'E0FFFF'">				<xsl:text>89</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DEB887'">				<xsl:text>88</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DDA0DD'">				<xsl:text>87</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DCDCDC'">				<xsl:text>86</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DC143C'">				<xsl:text>85</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DB7093'">				<xsl:text>84</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DAA520'">				<xsl:text>83</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'DA70D6'">				<xsl:text>82</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'D8BFD8'">				<xsl:text>81</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'D3D3D3'">				<xsl:text>80</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'D2B48C'">				<xsl:text>79</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'D2691E'">				<xsl:text>78</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CD853F'">				<xsl:text>77</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'CD5C5C'">				<xsl:text>76</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'C71585'">				<xsl:text>75</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'C0C0C0'">				<xsl:text>74</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BDB76B'">				<xsl:text>73</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BC8F8F'">				<xsl:text>72</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'BA55D3'">				<xsl:text>71</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'B8860B'">				<xsl:text>70</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'B22222'">				<xsl:text>69</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'B0E0E6'">				<xsl:text>68</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'B0C4DE'">				<xsl:text>67</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'AFEEEE'">				<xsl:text>66</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ADFF2F'">				<xsl:text>65</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'ADD8E6'">				<xsl:text>64</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'A9A9A9'">				<xsl:text>63</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'A52A2A'">				<xsl:text>62</xsl:text>			</xsl:when>			<xsl:when test="$txt = 'A0522D'">				<xsl:text>61</xsl:text>			</xsl:when>			<xsl:when test="$txt = '9ACD32'">				<xsl:text>60</xsl:text>			</xsl:when>			<xsl:when test="$txt = '9932CC'">				<xsl:text>59</xsl:text>			</xsl:when>			<xsl:when test="$txt = '98FB98'">				<xsl:text>58</xsl:text>			</xsl:when>			<xsl:when test="$txt = '9400D3'">				<xsl:text>57</xsl:text>			</xsl:when>			<xsl:when test="$txt = '9370DB'">				<xsl:text>56</xsl:text>			</xsl:when>			<xsl:when test="$txt = '90EE90'">				<xsl:text>55</xsl:text>			</xsl:when>			<xsl:when test="$txt = '8FBC8B'">				<xsl:text>54</xsl:text>			</xsl:when>			<xsl:when test="$txt = '8B4513'">				<xsl:text>53</xsl:text>			</xsl:when>			<xsl:when test="$txt = '8B008B'">				<xsl:text>52</xsl:text>			</xsl:when>			<xsl:when test="$txt = '8B0000'">				<xsl:text>51</xsl:text>			</xsl:when>			<xsl:when test="$txt = '8A2BE2'">				<xsl:text>50</xsl:text>			</xsl:when>			<xsl:when test="$txt = '87CEFA'">				<xsl:text>49</xsl:text>			</xsl:when>			<xsl:when test="$txt = '87CEEB'">				<xsl:text>48</xsl:text>			</xsl:when>			<xsl:when test="$txt = '808080'">				<xsl:text>47</xsl:text>			</xsl:when>			<xsl:when test="$txt = '808000'">				<xsl:text>46</xsl:text>			</xsl:when>			<xsl:when test="$txt = '800080'">				<xsl:text>45</xsl:text>			</xsl:when>			<xsl:when test="$txt = '800000'">				<xsl:text>44</xsl:text>			</xsl:when>			<xsl:when test="$txt = '7FFFD4'">				<xsl:text>43</xsl:text>			</xsl:when>			<xsl:when test="$txt = '7FFF00'">				<xsl:text>42</xsl:text>			</xsl:when>			<xsl:when test="$txt = '7CFC00'">				<xsl:text>41</xsl:text>			</xsl:when>			<xsl:when test="$txt = '7B68EE'">				<xsl:text>40</xsl:text>			</xsl:when>			<xsl:when test="$txt = '778899'">				<xsl:text>39</xsl:text>			</xsl:when>			<xsl:when test="$txt = '708090'">				<xsl:text>38</xsl:text>			</xsl:when>			<xsl:when test="$txt = '6B8E23'">				<xsl:text>37</xsl:text>			</xsl:when>			<xsl:when test="$txt = '6A5ACD'">				<xsl:text>36</xsl:text>			</xsl:when>			<xsl:when test="$txt = '696969'">				<xsl:text>35</xsl:text>			</xsl:when>			<xsl:when test="$txt = '66CDAA'">				<xsl:text>34</xsl:text>			</xsl:when>			<xsl:when test="$txt = '6495ED'">				<xsl:text>33</xsl:text>			</xsl:when>			<xsl:when test="$txt = '5F9EA0'">				<xsl:text>32</xsl:text>			</xsl:when>			<xsl:when test="$txt = '556B2F'">				<xsl:text>31</xsl:text>			</xsl:when>			<xsl:when test="$txt = '4B0082'">				<xsl:text>30</xsl:text>			</xsl:when>			<xsl:when test="$txt = '48D1CC'">				<xsl:text>29</xsl:text>			</xsl:when>			<xsl:when test="$txt = '483D8B'">				<xsl:text>28</xsl:text>			</xsl:when>			<xsl:when test="$txt = '4682B4'">				<xsl:text>27</xsl:text>			</xsl:when>			<xsl:when test="$txt = '4169E1'">				<xsl:text>26</xsl:text>			</xsl:when>			<xsl:when test="$txt = '40E0D0'">				<xsl:text>25</xsl:text>			</xsl:when>			<xsl:when test="$txt = '3CB371'">				<xsl:text>24</xsl:text>			</xsl:when>			<xsl:when test="$txt = '32CD32'">				<xsl:text>23</xsl:text>			</xsl:when>			<xsl:when test="$txt = '2F4F4F'">				<xsl:text>22</xsl:text>			</xsl:when>			<xsl:when test="$txt = '2E8B57'">				<xsl:text>21</xsl:text>			</xsl:when>			<xsl:when test="$txt = '228B22'">				<xsl:text>20</xsl:text>			</xsl:when>			<xsl:when test="$txt = '20B2AA'">				<xsl:text>19</xsl:text>			</xsl:when>			<xsl:when test="$txt = '1E90FF'">				<xsl:text>18</xsl:text>			</xsl:when>			<xsl:when test="$txt = '191970'">				<xsl:text>17</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00FFFF'">				<xsl:text>16</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00FFFF'">				<xsl:text>15</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00FF7F'">				<xsl:text>14</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00FF00'">				<xsl:text>13</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00FA9A'">				<xsl:text>12</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00CED1'">				<xsl:text>11</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00BFFF'">				<xsl:text>10</xsl:text>			</xsl:when>			<xsl:when test="$txt = '008B8B'">				<xsl:text>9</xsl:text>			</xsl:when>			<xsl:when test="$txt = '008080'">				<xsl:text>8</xsl:text>			</xsl:when>			<xsl:when test="$txt = '008000'">				<xsl:text>7</xsl:text>			</xsl:when>			<xsl:when test="$txt = '006400'">				<xsl:text>6</xsl:text>			</xsl:when>			<xsl:when test="$txt = '0000FF'">				<xsl:text>5</xsl:text>			</xsl:when>			<xsl:when test="$txt = '0000CD'">				<xsl:text>4</xsl:text>			</xsl:when>			<xsl:when test="$txt = '00008B'">				<xsl:text>3</xsl:text>			</xsl:when>			<xsl:when test="$txt = '000080'">				<xsl:text>2</xsl:text>			</xsl:when>			<xsl:when test="$txt = '000000'">				<xsl:text>1</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:GetFontID">		<xsl:param name="font"/>		<xsl:variable name="font-upper" select="translate($font, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>		<xsl:choose>			<xsl:when test="$font-upper = 'TAHOMA'">				<xsl:text>0</xsl:text>			</xsl:when>			<xsl:when test="$font-upper = 'ARIAL'">				<xsl:text>1</xsl:text>			</xsl:when>			<xsl:when test="$font-upper = 'SYMBOL'">				<xsl:text>2</xsl:text>			</xsl:when>			<xsl:when test="$font-upper = 'WINGDINGS'">				<xsl:text>3</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:GetRtfBorderStyle">		<xsl:param name="style"/>		<xsl:choose>			<xsl:when test="$style='none'">				<xsl:text>\brdrnil</xsl:text>			</xsl:when>			<xsl:when test="$style='hidden'">				<xsl:text>\brdrnone</xsl:text>			</xsl:when>			<xsl:when test="$style='dotted'">				<xsl:text>\brdrdot</xsl:text>			</xsl:when>			<xsl:when test="$style='dashed'">				<xsl:text>\brdrdash</xsl:text>			</xsl:when>			<xsl:when test="$style='solid'">				<xsl:text>\brdrs</xsl:text>			</xsl:when>			<xsl:when test="$style='double'">				<xsl:text>\brdrd</xsl:text>			</xsl:when>			<xsl:when test="$style='groove'">				<xsl:text>\brdrengrave</xsl:text>			</xsl:when>			<xsl:when test="$style='ridge'">				<xsl:text>\brdremboss</xsl:text>			</xsl:when>			<xsl:when test="$style='inset'">				<xsl:text>\brdrinset</xsl:text>			</xsl:when>			<xsl:when test="$style='outset'">				<xsl:text>\brdroutset</xsl:text>			</xsl:when>			<xsl:otherwise>				<xsl:text>\brdrnil</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template>	<xsl:template name="altova:ConvertWidthToTwips">		<xsl:param name="width"/>		<xsl:variable name="normal-width" select="normalize-space($width)"/>		<xsl:choose>			<xsl:when test="contains($normal-width,'px')">				<xsl:value-of select="(number(substring-before($normal-width,'px')) * 1440) div $altova:nPxPerIn"/>			</xsl:when>			<xsl:when test="contains($normal-width,'cm')">				<xsl:value-of select="(number(substring-before($normal-width,'cm')) * 1440) div 2.54"/>			</xsl:when>			<xsl:when test="contains($normal-width,'mm')">				<xsl:value-of select="(number(substring-before($normal-width,'mm')) * 1440) div 25.4"/>			</xsl:when>			<xsl:when test="contains($normal-width,'in')">				<xsl:value-of select="number(substring-before($normal-width,'in')) * 1440"/>			</xsl:when>			<xsl:when test="contains($normal-width,'pc')">				<xsl:value-of select="number(substring-before($normal-width,'pc')) * 240"/>			</xsl:when>			<xsl:when test="contains($normal-width,'pt')">				<xsl:value-of select="number(substring-before($normal-width,'pt')) * 20"/>			</xsl:when>			<xsl:when test="$normal-width='thin'">				<xsl:value-of select="30"/>			</xsl:when>			<xsl:when test="$normal-width='medium'">				<xsl:value-of select="60"/>			</xsl:when>			<xsl:when test="$normal-width='thick'">				<xsl:value-of select="80"/>			</xsl:when>			<xsl:otherwise>				<xsl:text>0</xsl:text>			</xsl:otherwise>		</xsl:choose>	</xsl:template></xsl:stylesheet>